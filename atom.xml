<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JayMo个人网站</title>
  
  <subtitle>打造属于自己的超能力</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jaymo666.github.io/"/>
  <updated>2018-03-08T04:59:49.950Z</updated>
  <id>http://jaymo666.github.io/</id>
  
  <author>
    <name>莫爵贵(JayMo)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo博客再配置</title>
    <link href="http://jaymo666.github.io/2018/03/08/%E2%80%9Chexo%E5%8D%9A%E5%AE%A2%E5%86%8D%E9%85%8D%E7%BD%AE%E2%80%9D/"/>
    <id>http://jaymo666.github.io/2018/03/08/“hexo博客再配置”/</id>
    <published>2018-03-08T04:09:30.000Z</published>
    <updated>2018-03-08T04:59:49.950Z</updated>
    
    <summary type="html">
    
      记录更换电脑后开启的新功能



1.已结开启的功能
1.1设置 RSS
1.2侧边栏社交链接
1.3设置「动画效果」
1.4设置「背景动画」
2.待开启
2.1设置字体
2.2开启打赏功能
2.3订阅微信公众号
3.hexo 官方插件地址：
https://hexo.io/plugins/

4.加入的插件：
 1. HEXO-自动摘录https://github.com/ashisherc/hexo-auto-excerpt
 2. HEXO辅助性live2d https://github.com/EYHN/hexo-helper-live2d
 3. Hexo跨博客文章推荐插件 http
    
    </summary>
    
      <category term="hexo" scheme="http://jaymo666.github.io/categories/hexo/"/>
    
    
      <category term="博客" scheme="http://jaymo666.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://jaymo666.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>迁移hexo到新电脑</title>
    <link href="http://jaymo666.github.io/2018/03/08/%E8%BF%81%E7%A7%BBhexo%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/"/>
    <id>http://jaymo666.github.io/2018/03/08/迁移hexo到新电脑/</id>
    <published>2018-03-08T04:09:30.000Z</published>
    <updated>2018-03-08T04:39:53.924Z</updated>
    
    <summary type="html">
    
      在更换新电脑的情况下恢复博客，保留了源码…

1、从官网Git下载git，在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建：
（1）打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “youremail@example.com“ 把其中的邮件地址换成自己的邮件地址，然后一路回车
（2）最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
（3）登陆Gi
    
    </summary>
    
      <category term="hexo" scheme="http://jaymo666.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://jaymo666.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://jaymo666.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jaymo666.github.io/2018/03/07/hello-world/"/>
    <id>http://jaymo666.github.io/2018/03/07/hello-world/</id>
    <published>2018-03-07T10:59:51.630Z</published>
    <updated>2017-12-03T11:06:54.594Z</updated>
    
    <summary type="html">
    
      Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.

Quick Start
Create a new post
1


$ hexo new &quot;My New Post&quot;


More info: Writing

Run server
1


$ hexo s
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>conda用法</title>
    <link href="http://jaymo666.github.io/2017/12/04/conda%E7%94%A8%E6%B3%95/"/>
    <id>http://jaymo666.github.io/2017/12/04/conda用法/</id>
    <published>2017-12-04T10:07:08.000Z</published>
    <updated>2017-12-04T10:09:42.413Z</updated>
    
    <summary type="html">
    
      Conda简单用法及在python2与python3之间切换

安装scipy
conda install scipy

conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）
查看已经安装的packages
conda list

最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包
查看当前环境下已安装的包
conda list

查看某个指定环境的已安装包
conda list -n python34

查找package信息
cond
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络管理员必备</title>
    <link href="http://jaymo666.github.io/2017/09/26/Network(1)/"/>
    <id>http://jaymo666.github.io/2017/09/26/Network(1)/</id>
    <published>2017-09-26T06:49:47.000Z</published>
    <updated>2017-12-03T12:42:18.345Z</updated>
    
    <summary type="html">
    
      本文包括：

 * [1]ping命令
 * [2]路由器和交换机的差异
 * [3]路由器的基本设置
 * [4]netsh网络配置命令
 * [5]安装失败（未签名）
 * [6]管理用户网络应用
 * [7]映射网络驱动器
 * [8]网络适配器的原理
 * [9]交换机的分类
 * [10]交换机的功能
 * [11]交换机的接口种类
 * [12]路由器的工作原理
 * [13]初识TCP/IP的分层

网络管理员必备
[1]ping命令
“ping”命令是windows系统最长用的命令之一，是通过对一个网址发送测试数据包，看对方网址是否有响应并统计响应时间，以此测试网络，同时可以很
    
    </summary>
    
      <category term="网络" scheme="http://jaymo666.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://jaymo666.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>网络管理员必备</title>
    <link href="http://jaymo666.github.io/2017/09/26/Network/"/>
    <id>http://jaymo666.github.io/2017/09/26/Network/</id>
    <published>2017-09-26T06:49:47.000Z</published>
    <updated>2017-12-03T11:30:29.248Z</updated>
    
    <summary type="html">
    
      本文包括：

 * [1]ping命令
 * [2]路由器和交换机的差异
 * [3]路由器的基本设置
 * [4]netsh网络配置命令
 * [5]安装失败（未签名）
 * [6]管理用户网络应用
 * [7]映射网络驱动器
 * [8]网络适配器的原理
 * [9]交换机的分类
 * [10]交换机的功能
 * [11]交换机的接口种类
 * [12]路由器的工作原理
 * [13]初识TCP/IP的分层

网络管理员必备
[1]ping命令
“ping”命令是windows系统最长用的命令之一，是通过对一个网址发送测试数据包，看对方网址是否有响应并统计响应时间，以此测试网络，同时可以很
    
    </summary>
    
      <category term="网络" scheme="http://jaymo666.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://jaymo666.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Threejs中的各种光源（Threejs第三章）</title>
    <link href="http://jaymo666.github.io/2017/09/22/Threejs3/"/>
    <id>http://jaymo666.github.io/2017/09/22/Threejs3/</id>
    <published>2017-09-22T06:34:47.000Z</published>
    <updated>2017-12-03T11:29:43.126Z</updated>
    
    <summary type="html">
    
      本章你将了解
1、怎么使用光源
2、以及各种光源的区别，这些区别会通过实例对比来给大家讲清楚。这种对比方式应该是讲解最好的思路。

2.6 环境光和方向光
接下来，我们来看看多种光源同时存在于场景之中，对物体颜色的影响。

当环境光和方向光同时存在的时候，会出现怎么样的情况呢？可以把这种情况想成两种光源同时作用于物体，它产生的情况，和每种光源分别作用于物体，然后将两者的结果相加，是一样的效果。
例如：
0x00FF00 + 0xFF0000 = 0xFFFF00，oxFFFF00 就是黄色。

2.7 点光源
点光源是理想化为质点的向四面八方发出光线的光源。点光源是抽象化了的物理概念，为了把物
    
    </summary>
    
      <category term="前端" scheme="http://jaymo666.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="3D" scheme="http://jaymo666.github.io/tags/3D/"/>
    
      <category term="threejs" scheme="http://jaymo666.github.io/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>Threejs中的各种光源（Threejs第三章）</title>
    <link href="http://jaymo666.github.io/2017/09/22/Threejs3(1)/"/>
    <id>http://jaymo666.github.io/2017/09/22/Threejs3(1)/</id>
    <published>2017-09-22T06:34:47.000Z</published>
    <updated>2017-12-03T12:41:51.103Z</updated>
    
    <summary type="html">
    
      本章你将了解
1、怎么使用光源
2、以及各种光源的区别，这些区别会通过实例对比来给大家讲清楚。这种对比方式应该是讲解最好的思路。

2.6 环境光和方向光
接下来，我们来看看多种光源同时存在于场景之中，对物体颜色的影响。

当环境光和方向光同时存在的时候，会出现怎么样的情况呢？可以把这种情况想成两种光源同时作用于物体，它产生的情况，和每种光源分别作用于物体，然后将两者的结果相加，是一样的效果。
例如：
0x00FF00 + 0xFF0000 = 0xFFFF00，oxFFFF00 就是黄色。

2.7 点光源
点光源是理想化为质点的向四面八方发出光线的光源。点光源是抽象化了的物理概念，为了把物
    
    </summary>
    
      <category term="前端" scheme="http://jaymo666.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="3D" scheme="http://jaymo666.github.io/tags/3D/"/>
    
      <category term="threejs" scheme="http://jaymo666.github.io/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>Threejs中的各种光源（Threejs第二章）</title>
    <link href="http://jaymo666.github.io/2017/09/22/Threejs2/"/>
    <id>http://jaymo666.github.io/2017/09/22/Threejs2/</id>
    <published>2017-09-22T05:34:47.000Z</published>
    <updated>2017-12-03T11:29:52.275Z</updated>
    
    <summary type="html">
    
      作为3D技术的发展趋势，浏览器端3D技术越来越被一些技术公司重视。由此，Threejs非常注重3D渲染效果的真实性，对渲染真实性来说，使用光源是比不可少的技巧。Threejs，在光源方面提供了多种光源供选择。

第二章
1.Threejs中的各种光源
1.1光源基类
在Threejs中，光源用Light表示，它是所有光源的基类。它的构造函数是：
THREE.Light ( hex )

它有一个参数hex，接受一个16进制的颜色值。例如要定义一种红色的光源，我们可以这样来定义：

Var redLight = new THREE.Light(0xFF0000);


1.2由基类派生出来的其他
    
    </summary>
    
      <category term="前端" scheme="http://jaymo666.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="3D" scheme="http://jaymo666.github.io/tags/3D/"/>
    
      <category term="threejs" scheme="http://jaymo666.github.io/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>Threejs中的各种光源（Threejs第二章）</title>
    <link href="http://jaymo666.github.io/2017/09/22/Threejs2(1)/"/>
    <id>http://jaymo666.github.io/2017/09/22/Threejs2(1)/</id>
    <published>2017-09-22T05:34:47.000Z</published>
    <updated>2017-12-03T12:41:54.229Z</updated>
    
    <summary type="html">
    
      作为3D技术的发展趋势，浏览器端3D技术越来越被一些技术公司重视。由此，Threejs非常注重3D渲染效果的真实性，对渲染真实性来说，使用光源是比不可少的技巧。Threejs，在光源方面提供了多种光源供选择。

第二章
1.Threejs中的各种光源
1.1光源基类
在Threejs中，光源用Light表示，它是所有光源的基类。它的构造函数是：
THREE.Light ( hex )

它有一个参数hex，接受一个16进制的颜色值。例如要定义一种红色的光源，我们可以这样来定义：

Var redLight = new THREE.Light(0xFF0000);


1.2由基类派生出来的其他
    
    </summary>
    
      <category term="前端" scheme="http://jaymo666.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="3D" scheme="http://jaymo666.github.io/tags/3D/"/>
    
      <category term="threejs" scheme="http://jaymo666.github.io/tags/threejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue进阶之路——过渡效果</title>
    <link href="http://jaymo666.github.io/2017/09/21/Vue%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E8%BF%87%E6%B8%A1%E6%95%88%E6%9E%9C(1)/"/>
    <id>http://jaymo666.github.io/2017/09/21/Vue进阶之路——过渡效果(1)/</id>
    <published>2017-09-21T15:54:46.000Z</published>
    <updated>2017-12-03T12:41:46.193Z</updated>
    
    <summary type="html">
    
      Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。

概述
Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。
包括以下工具：

 * 在 CSS 过渡和动画中自动应用 class
 * 可以配合使用第三方 CSS 动画库，如 Animate.css
 * 在过渡钩子函数中使用 JavaScript 直接操作 DOM
 * 可以配合使用第三方 JavaScript 动画库，如 Velocity.js

单元素/组件的过渡
Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过
    
    </summary>
    
      <category term="JS" scheme="http://jaymo666.github.io/categories/JS/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="Vue" scheme="http://jaymo666.github.io/tags/Vue/"/>
    
      <category term="框架" scheme="http://jaymo666.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue进阶之路——深入响应式原理</title>
    <link href="http://jaymo666.github.io/2017/09/21/Vue%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
    <id>http://jaymo666.github.io/2017/09/21/Vue进阶之路——深入响应式原理/</id>
    <published>2017-09-21T15:54:46.000Z</published>
    <updated>2017-12-03T11:29:32.892Z</updated>
    
    <summary type="html">
    
      Vue 最显著的特性之一便是不太引人注意的响应式系统


Vue 最显著的特性之一便是不太引人注意的响应式系统(reactivity system)。模型层(model)只是普通 JavaScript 对象，修改它则更新视图(view)。

如何追踪变化
把一个普通 JavaScript 对象传给 Vue 实例的 data选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为getter/setter。

每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter被调用时，会通知 
    
    </summary>
    
      <category term="JS" scheme="http://jaymo666.github.io/categories/JS/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="Vue" scheme="http://jaymo666.github.io/tags/Vue/"/>
    
      <category term="框架" scheme="http://jaymo666.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue进阶之路——过渡效果</title>
    <link href="http://jaymo666.github.io/2017/09/21/Vue%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E8%BF%87%E6%B8%A1%E6%95%88%E6%9E%9C/"/>
    <id>http://jaymo666.github.io/2017/09/21/Vue进阶之路——过渡效果/</id>
    <published>2017-09-21T15:54:46.000Z</published>
    <updated>2017-12-03T11:29:35.636Z</updated>
    
    <summary type="html">
    
      Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。

概述
Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。
包括以下工具：

 * 在 CSS 过渡和动画中自动应用 class
 * 可以配合使用第三方 CSS 动画库，如 Animate.css
 * 在过渡钩子函数中使用 JavaScript 直接操作 DOM
 * 可以配合使用第三方 JavaScript 动画库，如 Velocity.js

单元素/组件的过渡
Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过
    
    </summary>
    
      <category term="JS" scheme="http://jaymo666.github.io/categories/JS/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="Vue" scheme="http://jaymo666.github.io/tags/Vue/"/>
    
      <category term="框架" scheme="http://jaymo666.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue进阶之路——深入响应式原理</title>
    <link href="http://jaymo666.github.io/2017/09/21/Vue%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86(1)/"/>
    <id>http://jaymo666.github.io/2017/09/21/Vue进阶之路——深入响应式原理(1)/</id>
    <published>2017-09-21T15:54:46.000Z</published>
    <updated>2017-12-03T12:41:44.165Z</updated>
    
    <summary type="html">
    
      Vue 最显著的特性之一便是不太引人注意的响应式系统


Vue 最显著的特性之一便是不太引人注意的响应式系统(reactivity system)。模型层(model)只是普通 JavaScript 对象，修改它则更新视图(view)。

如何追踪变化
把一个普通 JavaScript 对象传给 Vue 实例的 data选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为getter/setter。

每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter被调用时，会通知 
    
    </summary>
    
      <category term="JS" scheme="http://jaymo666.github.io/categories/JS/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="Vue" scheme="http://jaymo666.github.io/tags/Vue/"/>
    
      <category term="框架" scheme="http://jaymo666.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Threejs</title>
    <link href="http://jaymo666.github.io/2017/09/21/Threejs/"/>
    <id>http://jaymo666.github.io/2017/09/21/Threejs/</id>
    <published>2017-09-21T15:38:32.000Z</published>
    <updated>2017-12-03T11:29:54.568Z</updated>
    
    <summary type="html">
    
      一门3D技术语言。

什么是threejs，很简单，你将它理解成three + js就可以了。three表示3D的意思，js表示javascript的意思。那么合起来，three.js就是使用javascript 来写3D程序的意思。
Javascript是运行在网页端的脚本语言，那么毫无疑问Three.js也是运行在浏览器上的。

##第一章
来学习three.js之前最好了解一下WebGL。
什么是WebGL?

WebGL是在浏览器中实现三维效果的一套规范。

使用WebGL原生的API来写3D程序是一件非常痛苦的事情，幸好，有很多同行花业余时间写了一些WebGL开源框架，其中three
    
    </summary>
    
      <category term="JS" scheme="http://jaymo666.github.io/categories/JS/"/>
    
      <category term="3D" scheme="http://jaymo666.github.io/categories/JS/3D/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="可视化" scheme="http://jaymo666.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="3D" scheme="http://jaymo666.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Threejs</title>
    <link href="http://jaymo666.github.io/2017/09/21/Threejs(1)/"/>
    <id>http://jaymo666.github.io/2017/09/21/Threejs(1)/</id>
    <published>2017-09-21T15:38:32.000Z</published>
    <updated>2017-12-03T12:41:56.937Z</updated>
    
    <summary type="html">
    
      一门3D技术语言。

什么是threejs，很简单，你将它理解成three + js就可以了。three表示3D的意思，js表示javascript的意思。那么合起来，three.js就是使用javascript 来写3D程序的意思。
Javascript是运行在网页端的脚本语言，那么毫无疑问Three.js也是运行在浏览器上的。

##第一章
来学习three.js之前最好了解一下WebGL。
什么是WebGL?

WebGL是在浏览器中实现三维效果的一套规范。

使用WebGL原生的API来写3D程序是一件非常痛苦的事情，幸好，有很多同行花业余时间写了一些WebGL开源框架，其中three
    
    </summary>
    
      <category term="JS" scheme="http://jaymo666.github.io/categories/JS/"/>
    
      <category term="3D" scheme="http://jaymo666.github.io/categories/JS/3D/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="可视化" scheme="http://jaymo666.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="3D" scheme="http://jaymo666.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Mock.js</title>
    <link href="http://jaymo666.github.io/2017/09/21/Mock(1)/"/>
    <id>http://jaymo666.github.io/2017/09/21/Mock(1)/</id>
    <published>2017-09-21T07:22:25.000Z</published>
    <updated>2017-12-03T12:42:19.219Z</updated>
    
    <summary type="html">
    
      Mock.js 是一款模拟数据生成器，旨在帮助前端攻城师独立于后端进行开发，帮助编写单元测试

Mock.js 是一款模拟数据生成器，旨在帮助前端攻城师独立于后端进行开发，帮助编写单元测试。提供了以下模拟功能：

 * 根据数据模板生成模拟数据
 * 模拟 Ajax 请求，生成并返回模拟数据
 * 基于 HTML 模板生成模拟数据

语法规范
Mock.js 的语法规范包括两部分：

 * 数据模板定义规范（Data Template Definition，DTD）
 * 数据占位符定义规范（Data Placeholder Definition，DPD）

数据模板定义规范 DTD
数据模板
    
    </summary>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Mock.js</title>
    <link href="http://jaymo666.github.io/2017/09/21/Mock/"/>
    <id>http://jaymo666.github.io/2017/09/21/Mock/</id>
    <published>2017-09-21T07:22:25.000Z</published>
    <updated>2017-12-03T11:30:31.374Z</updated>
    
    <summary type="html">
    
      Mock.js 是一款模拟数据生成器，旨在帮助前端攻城师独立于后端进行开发，帮助编写单元测试

Mock.js 是一款模拟数据生成器，旨在帮助前端攻城师独立于后端进行开发，帮助编写单元测试。提供了以下模拟功能：

 * 根据数据模板生成模拟数据
 * 模拟 Ajax 请求，生成并返回模拟数据
 * 基于 HTML 模板生成模拟数据

语法规范
Mock.js 的语法规范包括两部分：

 * 数据模板定义规范（Data Template Definition，DTD）
 * 数据占位符定义规范（Data Placeholder Definition，DPD）

数据模板定义规范 DTD
数据模板
    
    </summary>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>REST</title>
    <link href="http://jaymo666.github.io/2017/09/20/REST(1)/"/>
    <id>http://jaymo666.github.io/2017/09/20/REST(1)/</id>
    <published>2017-09-20T15:54:46.000Z</published>
    <updated>2017-12-03T12:42:08.052Z</updated>
    
    <summary type="html">
    
      REST是一种设计API的模式

什么是Web API呢？

如果我们想要获取某个电商网站的某个商品，输入http://localhost:3000/products/123，就可以看到id为123的商品页面，但这个结果是HTML页面，它同时混合包含了Product的数据和Product的展示两个部分。对于用户来说，阅读起来没有问题，但是，如果机器读取，就很难从HTML中解析出Product的数据。

如果一个URL返回的不是HTML，而是机器能直接解析的数据，这个URL就可以看成是一个Web API。比如，读取http://localhost:3000/api/products/123，如果
    
    </summary>
    
      <category term="JS" scheme="http://jaymo666.github.io/categories/JS/"/>
    
    
      <category term="js" scheme="http://jaymo666.github.io/tags/js/"/>
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>R笔记</title>
    <link href="http://jaymo666.github.io/2017/09/20/R%E7%AC%94%E8%AE%B0/"/>
    <id>http://jaymo666.github.io/2017/09/20/R笔记/</id>
    <published>2017-09-20T15:54:46.000Z</published>
    <updated>2017-12-03T11:30:05.935Z</updated>
    
    <summary type="html">
    
      一门可视化语言。

http://bayes.math.montana.edu/Rweb/Rnotes/R.html

前言：关于R
在R的官方教程里是这么给R下注解的:一个数据分析和图形显示的程序设计环境(A system for data analysis and visualization which is built based on S language.)。
R的源起
R是S语言的一种实现。S语言是由 AT&amp;T贝尔实验室开发的一种用来进行数据探索、统计分析、作图的解释型语言。最初S语言的实现版本主要是S-PLUS。S-PLUS是一个商业 软件，它基于S语言，并由MathSoft公司
    
    </summary>
    
      <category term="R" scheme="http://jaymo666.github.io/categories/R/"/>
    
    
      <category term="初级" scheme="http://jaymo666.github.io/tags/%E5%88%9D%E7%BA%A7/"/>
    
      <category term="可视化" scheme="http://jaymo666.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R" scheme="http://jaymo666.github.io/tags/R/"/>
    
  </entry>
  
</feed>
