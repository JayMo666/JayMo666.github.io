<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>用mock实现前端所需数据</title>
      <link href="/2018/04/01/%E7%94%A8mock%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E6%89%80%E9%9C%80%E6%95%B0%E6%8D%AE/"/>
      <content type="html"><![CDATA[<p>mock.js的小demo及mock语法简述及JSON.stringify用法<a id="more"></a></p><p>[TOC]</p><h2 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h2><ul><li>mock.js 官网:<a href="http://mockjs.com/" target="_blank" rel="noopener">http://mockjs.com/</a></li><li>（进阶的有eolinker，是基于mock.js的可视化模拟数据API接口）:<a href="https://www.eolinker.com/" target="_blank" rel="noopener">https://www.eolinker.com/</a></li></ul><h2 id="Mock概述："><a href="#Mock概述：" class="headerlink" title="Mock概述："></a>Mock概述：</h2><p>Mock.js实现的功能</p><ul><li>基于 数据模板 生成数据</li><li>基于 HTML模板 生成数据</li><li>拦截并模拟 Ajax请求</li></ul><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><h3 id="浏览器："><a href="#浏览器：" class="headerlink" title="浏览器："></a>浏览器：</h3><blockquote><p>index.html:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;http://mockjs.com/dist/mock.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var data = Mock.mock(&#123;</span><br><span class="line">            &apos;list|1-10&apos;: [&#123;</span><br><span class="line">                &apos;id|+1&apos;: 1</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;);</span><br><span class="line">        $(&apos;&lt;pre&gt;&apos;).text(JSON.stringify(data, null, 4))</span><br><span class="line">            .appendTo(&apos;body&apos;);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        //JQuery</span><br><span class="line">        //配置模拟数据</span><br><span class="line">        Mock.mock(&apos;http://g.cn&apos;,&#123;</span><br><span class="line">            &apos;name&apos;:&apos;@name&apos;,</span><br><span class="line">            &apos;age|1-100&apos;:100,</span><br><span class="line">            &apos;color&apos;:&apos;@color&apos;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //发送Ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&apos;http://g.cn&apos;,</span><br><span class="line">            dataType:&apos;json&apos;</span><br><span class="line">        &#125;).done(function(data,status,xhr)&#123;</span><br><span class="line">            console.log(</span><br><span class="line">                JSON.stringify(data,null,4)</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>页面返回值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;list&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 3</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>浏览器控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index.html:33 &#123;</span><br><span class="line">    &quot;name&quot;: &quot;Deborah Williams&quot;,</span><br><span class="line">    &quot;age&quot;: 2,</span><br><span class="line">    &quot;color&quot;: &quot;#ecf279&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>Mock.js 的语法规范包括两部分：</p><ul><li>数据模板定义（Data Temaplte Definition，DTD）</li><li>数据占位符定义（Data Placeholder Definition，DPD）</li></ul><h3 id="数据模板定义-DTD"><a href="#数据模板定义-DTD" class="headerlink" title="数据模板定义 DTD"></a>数据模板定义 DTD</h3><p>数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 属性名   name</span><br><span class="line">// 生成规则 rule</span><br><span class="line">// 属性值   value</span><br><span class="line">&apos;name|rule&apos;: value</span><br></pre></td></tr></table></figure></p><p>注意：</p><ul><li>属性名 和 生成规则 之间用 | 分隔。</li><li>生成规则 是可选的。</li><li>生成规则 有 7 种格式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&apos;name|min-max&apos;: value</span><br><span class="line">&apos;name|count&apos;: value</span><br><span class="line">&apos;name|min-max.dmin-dmax&apos;: value</span><br><span class="line">&apos;name|min-max.dcount&apos;: value</span><br><span class="line">&apos;name|count.dmin-dmax&apos;: value</span><br><span class="line">&apos;name|count.dcount&apos;: value</span><br><span class="line">&apos;name|+step&apos;: value</span><br></pre></td></tr></table></figure><p>生成规则 的 含义 需要依赖 属性值 才能确定。</p><p>属性值 中可以含有 @占位符。<br>属性值 还指定了最终值的初始值和类型。</p><h3 id="数据占位符定义-DPD"><a href="#数据占位符定义-DPD" class="headerlink" title="数据占位符定义 DPD"></a>数据占位符定义 DPD</h3><blockquote><p>占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。占位符 的格式为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@占位符</span><br><span class="line">@占位符(参数 [, 参数])</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>用 @ 来标识其后的字符串是 占位符。</li><li>占位符 引用的是 Mock.Random 中的方法。</li><li>通过 Mock.Random.extend() 来扩展自定义占位符。</li><li>占位符 也可以引用 数据模板 中的属性。</li><li>占位符 会优先引用 数据模板 中的属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> name: &#123;</span><br><span class="line"> first: &apos;@FIRST&apos;,</span><br><span class="line"> middle: &apos;@FIRST&apos;,</span><br><span class="line"> last: &apos;@LAST&apos;,</span><br><span class="line"> full: &apos;@first @middle @last&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// =&gt;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;name&quot;: &#123;</span><br><span class="line"> &quot;first&quot;: &quot;Charles&quot;,</span><br><span class="line"> &quot;middle&quot;: &quot;Brenda&quot;,</span><br><span class="line"> &quot;last&quot;: &quot;Lopez&quot;,</span><br><span class="line"> &quot;full&quot;: &quot;Charles Brenda Lopez&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="Mock-mock-rurl-rtype-template-function-options"><a href="#Mock-mock-rurl-rtype-template-function-options" class="headerlink" title="Mock.mock( rurl?, rtype?, template|function(options) )"></a>Mock.mock( rurl?, rtype?, template|function(options) )</h3><p>根据数据模板生成模拟数据。<br>参数的含义和默认值如下所示：</p><ul><li>参数 rurl：可选。表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 /\/domain\/list.json/、’/domian/list.json’。</li><li>参数 rtype：可选。表示需要拦截的 Ajax 请求类型。例如 GET、POST、PUT、DELETE 等。</li><li>参数 template：可选。表示数据模板，可以是对象或字符串。例如 { ‘data|1-10’:[{}] }、‘@EMAIL’。</li><li>参数 function(options)：可选。表示用于生成响应数据的函数。</li><li>参数 options：指向本次请求的 Ajax 选项集。</li></ul><h3 id="Mock-mockjax-library"><a href="#Mock-mockjax-library" class="headerlink" title="Mock.mockjax(library)"></a>Mock.mockjax(library)</h3><p>覆盖（拦截） Ajax 请求，目前内置支持 jQuery、Zepto、KISSY。</p><h3 id="Mock-Random"><a href="#Mock-Random" class="headerlink" title="Mock.Random"></a>Mock.Random</h3><p>Mock.Random 是一个工具类，用于生成各种随机数据。Mock.Random 的方法在数据模板中称为“占位符”，引用格式为 @占位符(参数 [, 参数]) 。</p><h3 id="Mock-tpl-input-options-helpers-partials"><a href="#Mock-tpl-input-options-helpers-partials" class="headerlink" title="Mock.tpl(input,options,helpers,partials)"></a>Mock.tpl(input,options,helpers,partials)</h3><p>基于 Handlebars、Mustache 的 HTML 模板生成模拟数据。</p><p>方法使用详情请参考<a href="http://mockjs.com/#mock" target="_blank" rel="noopener">mock.js文档</a></p><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><h3 id="JSON-stringify-方法"><a href="#JSON-stringify-方法" class="headerlink" title="JSON.stringify 方法"></a>JSON.stringify 方法</h3><blockquote><p>把一个对象通过 stringify 之后提交给后台或者存储在 Storage 里是很常用的手段。</p></blockquote><blockquote><p>demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123;name: &quot;王尼玛&quot;, sex:1, age: 30&#125;,</span><br><span class="line">    &#123;name: &quot;王尼美&quot;, sex:0, age: 20&#125;,</span><br><span class="line">    &#123;name: &quot;王大锤&quot;, sex:1, age: 30&#125;</span><br><span class="line">];</span><br><span class="line">var str_json = JSON.stringify(data);</span><br><span class="line">console.log(str_json);</span><br></pre></td></tr></table></figure></p></blockquote><p>这个是我们日常用法，非常简单，对吧。</p><p>比如说，我们的数据非常复杂，还有类似头像，昵称，个人签名之类的信息。<br>可是我保存在本地，只需要用户名，和性别，肿么破呢？<br>也许你会说 so easy, 遍历数据重新提取下即可。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123;name: &quot;王尼玛&quot;, sex:1, age: 30&#125;,</span><br><span class="line">    &#123;name: &quot;王尼美&quot;, sex:0, age: 20&#125;,</span><br><span class="line">    &#123;name: &quot;王大锤&quot;, sex:1, age: 30&#125;</span><br><span class="line">];</span><br><span class="line">for (var i=0, new_data=[]; i&lt;data.length; i++) &#123;</span><br><span class="line">    new_data.push(&#123;</span><br><span class="line">        name: data[i].name,</span><br><span class="line">        sex:  data[i].sex</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">var str_json = JSON.stringify(new_data);</span><br><span class="line">console.log(str_json);</span><br></pre></td></tr></table></figure></p><p>确实分分钟搞定。</p><p>其实我们只需要用 stringify 第二个参数即可简单处理这种问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123;name: &quot;王尼玛&quot;, sex:1, age: 30&#125;,</span><br><span class="line">    &#123;name: &quot;王尼美&quot;, sex:0, age: 20&#125;,</span><br><span class="line">    &#123;name: &quot;王大锤&quot;, sex:1, age: 30&#125;</span><br><span class="line">];</span><br><span class="line">var str_json = JSON.stringify(data, [&quot;name&quot;, &quot;sex&quot;]);</span><br><span class="line">console.log(str_json);</span><br></pre></td></tr></table></figure></p><p>第二个参数如此强悍，为我们省去了不少麻烦。</p><p>还有第三个参数，用于格式化字符串用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123;name: &quot;王尼玛&quot;, sex:1, age: 30&#125;,</span><br><span class="line">    &#123;name: &quot;王尼美&quot;, sex:0, age: 20&#125;,</span><br><span class="line">    &#123;name: &quot;王大锤&quot;, sex:1, age: 30&#125;</span><br><span class="line">];</span><br><span class="line">var str_json = JSON.stringify(data, null, &quot;\t&quot;);</span><br><span class="line">console.log(str_json);</span><br><span class="line">str_json = JSON.stringify(data, [&quot;name&quot;, &quot;sex&quot;], &quot;\t&quot;);</span><br><span class="line">console.log(str_json);</span><br></pre></td></tr></table></figure><p>不想要的 key 返回 undefined 即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123;name: &quot;王尼玛&quot;, sex:1, age: 30&#125;,</span><br><span class="line">    &#123;name: &quot;王尼美&quot;, sex:0, age: 20&#125;,</span><br><span class="line">    &#123;name: &quot;王大锤&quot;, sex:1, age: 30&#125;</span><br><span class="line">];</span><br><span class="line">var str_json = JSON.stringify(data, function (k, v) &#123;</span><br><span class="line">    if (k === &quot;sex&quot;) &#123;</span><br><span class="line">        return [&quot;女&quot;, &quot;男&quot;][v];</span><br><span class="line">    &#125; else if (k === &quot;age&quot; ) &#123;</span><br><span class="line">        return undefined;</span><br><span class="line">    &#125;</span><br><span class="line">    return v;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(str_json);</span><br></pre></td></tr></table></figure></p><p>JSON.stringify(str, null, 4) //表示使用四个空格缩进</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul><li><a href="https://segmentfault.com/a/1190000003087224" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003087224</a></li><li><a href="https://www.cnblogs.com/52cik/p/js-json-stringify.html" target="_blank" rel="noopener">https://www.cnblogs.com/52cik/p/js-json-stringify.html</a></li></ul><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2018/04/01/用mock实现前端所需数据/">http://jaymo666.github.io/2018/04/01/用mock实现前端所需数据/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Ajax概念-简单例子复习/Ajax概念+简单例子复习</title>
      <link href="/2018/03/28/Ajax%E6%A6%82%E5%BF%B5-%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90%E5%A4%8D%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p>Ajax概念-简单例子复习/Ajax概念+简单例子复习<a id="more"></a></p><h1 id="Ajax概念-简单例子复习-Ajax概念-简单例子复习"><a href="#Ajax概念-简单例子复习-Ajax概念-简单例子复习" class="headerlink" title="Ajax概念-简单例子复习/Ajax概念+简单例子复习"></a>Ajax概念-简单例子复习/Ajax概念+简单例子复习</h1><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><blockquote><p>同步：页面请求实时传给服务器，导致必填数据没有填的时候，要回到页面上重新从头填写，耗时长、客户体验差。</p></blockquote><blockquote><p>异步：在页面必填项写上必填选项，不用通过传给服务器判断必填内容是否已经填写完整，耗时短、用户体验强。</p></blockquote><h2 id="异步："><a href="#异步：" class="headerlink" title="异步："></a>异步：</h2><blockquote><p>XMLHttpRequest： XMLHttpRequest对象的出现分割了同步和异步。XMLHttpRequest出现之前是同步的，出现之后是异步的。</p></blockquote><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ol><li>利用html+css来实现页面，表达信息；</li><li>用XMLHttpRequest和web服务器进行数据的异步交换</li><li>运用js操作DOM，实现动态局部刷新；</li></ol><h2 id="创建XMLhttpRequest对象"><a href="#创建XMLhttpRequest对象" class="headerlink" title="创建XMLhttpRequest对象"></a>创建XMLhttpRequest对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var request;</span><br><span class="line">if(window.XMLHttpRequest)&#123;</span><br><span class="line">    request = new XMLHtpRequest();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    request = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);//IE5,IE6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ajax-HTTP请求"><a href="#Ajax-HTTP请求" class="headerlink" title="Ajax+HTTP请求"></a>Ajax+HTTP请求</h2><h4 id="HTTP请求，简洁版"><a href="#HTTP请求，简洁版" class="headerlink" title="HTTP请求，简洁版"></a>HTTP请求，简洁版</h4><ul><li>建立TCP连接</li><li>Web浏览器向Web服务器发送请求命令</li><li>Web服务器发送请求头</li><li>Web服务器应答</li><li>Web服务器向浏览器发送数据</li><li>Web服务器关闭TCP连接</li></ul><h4 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h4><ul><li>1XX 信息类 表示收到web浏览器请求</li><li>2xx 成功 200</li><li>3xx 重定向，表示请求没有成功，</li><li>4xx 表示客户端错误</li><li>5xx 服务器错误，表示服务器不能完成对请求的处理</li></ul><h4 id="XMLHttpRequest发送方法"><a href="#XMLHttpRequest发送方法" class="headerlink" title="XMLHttpRequest发送方法"></a>XMLHttpRequest发送方法</h4><ul><li>open（method,url,async）//async:同步false；异步：true（默认）</li><li>send(string)</li></ul><p><strong>例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.open(&quot;GET&quot;,  &quot;get.php&quot;,true);</span><br><span class="line">request.send();</span><br><span class="line"></span><br><span class="line">request.open(&quot;POST&quot;, &quot;post.php&quot;,true)；</span><br><span class="line">request.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);//写在中间，引用表单时，告诉服务器是什么格式，Content-type&quot;告诉服务器是表单格式，页面表单数据向服务端传输时的编码方式application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">request.send(&quot;name=jaymo&amp;sex=男&quot;);</span><br></pre></td></tr></table></figure><h4 id="XMLHttpRequest取得相应"><a href="#XMLHttpRequest取得相应" class="headerlink" title="XMLHttpRequest取得相应"></a>XMLHttpRequest取得相应</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var request=new XMLHttpRequest();</span><br><span class="line">    request.open(&quot;GET&quot;,&quot;get.php&quot;,true);</span><br><span class="line">    request.send();</span><br><span class="line">    request.onreadyStatechange=function()&#123;</span><br><span class="line">    if（request.readyState===4&amp;&amp;request.status===200）&#123;</span><br><span class="line">    //做一些事</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h4 id="例子简介："><a href="#例子简介：" class="headerlink" title="例子简介："></a>例子简介：</h4><ul><li>html：用来查询员工查询和新建</li><li>php：用来查询和新建的后台接口</li><li>XAMPP </li></ul><h5 id="启动xampp"><a href="#启动xampp" class="headerlink" title="启动xampp"></a>启动xampp</h5><p>修改端口，改为8088；<br>在浏览器输入：<a href="http://localhost:8088/" target="_blank" rel="noopener">http://localhost:8088/</a><br></p><h4 id="建立php文件："><a href="#建立php文件：" class="headerlink" title="建立php文件："></a>建立php文件：</h4><p>test.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;测试页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">echo &quot; Hello World! 这是测试页面。&quot;;</span><br><span class="line">?&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h5 id="真正例子"><a href="#真正例子" class="headerlink" title="真正例子"></a>真正例子</h5><h2 id="json解析"><a href="#json解析" class="headerlink" title="json解析"></a>json解析</h2><p>第一种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var jsondata=&apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;红旗&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:16&#125;]&#125;&apos;;</span><br><span class="line">var jsonobj=eval(&apos;(&apos;+jsondata+&apos;)&apos;);</span><br><span class="line">alert(jsonobj.staff[0].name);</span><br></pre></td></tr></table></figure></p><p>第二种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var jsondata=&apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;红旗&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:16&#125;]&#125;&apos;;</span><br><span class="line">var jsonobj=JSON.parse(jsondata);</span><br><span class="line">alert(jsonobj.staff[0].name);</span><br></pre></td></tr></table></figure></p><blockquote><p>在JavaScript中有eval和JSON.parse两种方式，推荐后者，因为前者是不安全的，它不能验证json格式的合法性，不能避免在json中直接执行JavaScript代码，从而造成潜在威胁的存在。推荐用JSONlint进行json在线验证</p></blockquote><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2018/03/28/Ajax概念-简单例子复习/">http://jaymo666.github.io/2018/03/28/Ajax概念-简单例子复习/</a></p>]]></content>
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> json </tag>
            
            <tag> jQuery </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSON的使用</title>
      <link href="/2018/03/28/JSON%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<p>Json复习<a id="more"></a></p><h1 id="JSON的使用"><a href="#JSON的使用" class="headerlink" title="JSON的使用"></a>JSON的使用</h1><h2 id="JSON的两种格式"><a href="#JSON的两种格式" class="headerlink" title="JSON的两种格式"></a>JSON的两种格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;JSON&quot;,&quot;address&quot;:&quot;北京市西城区&quot;,&quot;age&quot;:25&#125;//JSON的对象格式的字符串</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;name&quot;:&quot;JSON&quot;,&quot;address&quot;:&quot;北京市西城区&quot;,&quot;age&quot;:25&#125;]//数组对象格式</span><br></pre></td></tr></table></figure><p>区别与联系：</p><blockquote><p>对象格式和数组对象格式唯一的不同则是在对象格式的基础上加上了[]，再来看具体的结构，可以看出都是以键值对的形式出现的，中间以英文状态下的逗号（,）分隔。</p></blockquote><h2 id="两个重要函数"><a href="#两个重要函数" class="headerlink" title="两个重要函数"></a>两个重要函数</h2><h4 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h4><h4 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h4><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>JSON字符串:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var str1 = &apos;&#123; &quot;name&quot;: &quot;cxh&quot;, &quot;sex&quot;: &quot;man&quot; &#125;&apos;;</span><br></pre></td></tr></table></figure></p><p>JSON对象:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj1= &#123; &quot;name&quot;: &quot;cxh&quot;, &quot;sex&quot;: &quot;man&quot; &#125;;</span><br></pre></td></tr></table></figure></p><h4 id="JSON字符串转换为JSON对象"><a href="#JSON字符串转换为JSON对象" class="headerlink" title="JSON字符串转换为JSON对象"></a>JSON字符串转换为JSON对象</h4><p>要使用上面的str1，必须使用下面的方法先转化为JSON对象：</p><p>由JSON字符串转换为JSON对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = eval(&apos;(&apos; + str1+ &apos;)&apos;);</span><br><span class="line">console.log(obj);</span><br><span class="line">//或者</span><br><span class="line">var obj = JSON.parse(str1); </span><br><span class="line">console.log(obj);</span><br></pre></td></tr></table></figure></p><p>一般，从后台传入到前台的是json字符串，不是真正的json对象，因此需要使用eval函数转换。 将字符串转换为json对象使用函数eval，或JSON.parse(str)。其中：eval(“(“ + str+ “)”)；</p><h4 id="SON对象转化为JSON字符串"><a href="#SON对象转化为JSON字符串" class="headerlink" title="SON对象转化为JSON字符串"></a>SON对象转化为JSON字符串</h4><p>使用toJSONString()或者全局方法JSON.stringify()将JSON对象转化为JSON字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var last=JSON.stringify(obj1); //将JSON对象转化为JSON字符</span><br><span class="line">console.log(last);</span><br><span class="line">typeof last;</span><br></pre></td></tr></table></figure><h2 id="Js-中对-Json-数组的常用操作"><a href="#Js-中对-Json-数组的常用操作" class="headerlink" title="Js 中对 Json 数组的常用操作"></a>Js 中对 Json 数组的常用操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var persons = [</span><br><span class="line">    &#123;name: &quot;tina&quot;, age: 14&#125;,</span><br><span class="line">    &#123;name: &quot;timo&quot;, age: 15&#125;,</span><br><span class="line">    &#123;name: &quot;lily&quot;, age: 16&#125;,</span><br><span class="line">    &#123;name: &quot;lucy&quot;, age: 16&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="根据对象属性值得到相应对象"><a href="#根据对象属性值得到相应对象" class="headerlink" title="根据对象属性值得到相应对象"></a>根据对象属性值得到相应对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//1. 获取 name 等于 lily 的对象</span><br><span class="line">var lily=persons.filter((p)=&gt;&#123;</span><br><span class="line">    return p.name==&quot;lily&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(lily);</span><br><span class="line"></span><br><span class="line">//注：filter()方法返回的是一个数组</span><br><span class="line">var twins = persons.filter((p) =&gt; &#123;</span><br><span class="line">    return p.age == 16;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(twins); </span><br><span class="line">// 打印结果 [&#123;name: &quot;lily&quot;, age: 16&#125;,&#123;name: &quot;lucy&quot;, age: 16&#125;]</span><br></pre></td></tr></table></figure><h4 id="删除其中一个对象"><a href="#删除其中一个对象" class="headerlink" title="删除其中一个对象"></a>删除其中一个对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 删除 name 等于 tina 的对象，利用splice()方法</span><br><span class="line"></span><br><span class="line">// 1. 首先我们要得到这个对象</span><br><span class="line">var tina = persons.filter((p) =&gt; &#123;</span><br><span class="line">    return p.name == &quot;tina&quot;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//2. 其次得到这个对象在数组中对应的索引</span><br><span class="line">var index = persons.indexOf(tina[0]);</span><br><span class="line"></span><br><span class="line">//3. 如果存在则将其删除，index &gt; -1 代表存在</span><br><span class="line">index &gt; -1 &amp;&amp; persons.splice(index, 1);</span><br><span class="line"></span><br><span class="line">console.log(persons);</span><br></pre></td></tr></table></figure><h4 id="修改其中一个对象的属性值"><a href="#修改其中一个对象的属性值" class="headerlink" title="修改其中一个对象的属性值"></a>修改其中一个对象的属性值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//将 name 等于 timo 的 age 修改为 20</span><br><span class="line"></span><br><span class="line">//1. 得到 timo 对象</span><br><span class="line">var timo = persons.filter((p) =&gt; &#123;</span><br><span class="line">    return p.name == &quot;timo&quot;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//2. 修改age</span><br><span class="line">timo[0].age = 20;</span><br></pre></td></tr></table></figure><h4 id="往数组中添加一个对象"><a href="#往数组中添加一个对象" class="headerlink" title="往数组中添加一个对象"></a>往数组中添加一个对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persons.push(&#123;name: &quot;similar&quot;, age: 18&#125;);</span><br></pre></td></tr></table></figure><h2 id="js-数组转json，json转数组"><a href="#js-数组转json，json转数组" class="headerlink" title="js 数组转json，json转数组"></a>js 数组转json，json转数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//数组转json串</span><br><span class="line">var arr = [1,2,3, &#123; a : 1 &#125; ];</span><br><span class="line">JSON.stringify( arr );</span><br><span class="line"></span><br><span class="line">//json字符串转数组</span><br><span class="line">var jsonStr = &apos;[1,2,3,&#123;&quot;a&quot;:1&#125;]&apos;;</span><br><span class="line">JSON.parse( jsonStr );</span><br></pre></td></tr></table></figure><h2 id="js解析json数组"><a href="#js解析json数组" class="headerlink" title="js解析json数组"></a>js解析json数组</h2><blockquote><p>解析json数组即对JSONArray的遍历</p></blockquote><h4 id="对于标准的json数组如"><a href="#对于标准的json数组如" class="headerlink" title="对于标准的json数组如"></a>对于标准的json数组如</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var result=[&#123;&quot;flag&quot;:1,&quot;macId&quot;:&quot;2&quot;,&quot;mbId&quot;:0,&quot;userName&quot;:&quot;XXX&quot;&#125;,&#123;&quot;flag&quot;:1,&quot;macId&quot;:&quot;1&quot;,&quot;mbId&quot;:1,&quot;userName&quot;:&quot;YYY&quot;&#125;]</span><br></pre></td></tr></table></figure><p>进行遍历的时候，可以直接通过for循环遍历这个数组，有两种方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//1</span><br><span class="line">for (var i = 0; i &lt; result.length; i++) &#123;</span><br><span class="line">        //result[i]表示获得第i个json对象即JSONObject</span><br><span class="line">        //result[i]通过.字段名称即可获得指定字段的值</span><br><span class="line">       console.log(result[i].userName);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> //2</span><br><span class="line"> for(var i in result)&#123;</span><br><span class="line">        //表示遍历数组，而i表示的是数组的下标值，</span><br><span class="line">        //result[i]表示获得第i个json对象即JSONObject</span><br><span class="line">        //result[i]通过.字段名称即可获得指定字段的值</span><br><span class="line">        result[i].userName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="对于不标准的json数组如"><a href="#对于不标准的json数组如" class="headerlink" title="对于不标准的json数组如"></a>对于不标准的json数组如</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var result2=&#123;&quot;datas&quot;:[&#123;&quot;flag&quot;:1,&quot;macId&quot;:&quot;2&quot;,&quot;mbId&quot;:0,&quot;userName&quot;:&quot;XXX&quot;&#125;,&#123;&quot;flag&quot;:1,&quot;macId&quot;:&quot;1&quot;,&quot;mbId&quot;:1,&quot;userName&quot;:&quot;YYY&quot;&#125;]&#125;;</span><br></pre></td></tr></table></figure><p>进行遍历之前得先解析出标准的json数组格式即[{},{}]</p><blockquote><p>var data= result2.datas;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//1.  for (var i = 0; i &lt; data.length; i++) &#123;</span><br><span class="line">        //data[i]表示获得第i个json对象即JSONObject</span><br><span class="line">        //data[i]通过.字段名称即可获得指定字段的值</span><br><span class="line">        data[i].userName;</span><br><span class="line">    &#125;</span><br><span class="line">//2.</span><br><span class="line">  for(var i in data)&#123;</span><br><span class="line">        //表示遍历数组，而i表示的是数组的下标值，</span><br><span class="line">        //data[i]表示获得第i个json对象即JSONObject</span><br><span class="line">        //data[i]通过.字段名称即可获得指定字段的值</span><br><span class="line">        data[i].userName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2018/03/28/JSON的使用/">http://jaymo666.github.io/2018/03/28/JSON的使用/</a></p>]]></content>
      
      <categories>
          
          <category> json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在npm发布第一个包</title>
      <link href="/2018/03/14/%E5%9C%A8npm%E5%8F%91%E5%B8%83%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%85/"/>
      <content type="html"><![CDATA[<p>第一个npm包:web-plus<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>安装node.js</li><li>注册一个github账户用于托管代码</li><li>注册一个npm账户</li><li>开发你的module，更新至github</li><li>发布module至npm<h2 id="github创建项目"><a href="#github创建项目" class="headerlink" title="github创建项目"></a>github创建项目</h2></li></ul><p>终端进入到项目文件夹，执行npm init命令，构建模块的描述文件，系统会提示你输入所需的信息，不想输入就直接Enter跳过。这里主要的几个配置如下:</p><ul><li>name就是你要发布的module名</li><li>version版本信息（每发布一次版本号都必须大于上一次发布的版本号）；</li><li>entry入口文件</li></ul><h2 id="开发："><a href="#开发：" class="headerlink" title="开发："></a>开发：</h2><blockquote><p>npm init</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (npm-module) web-plus</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description: 前端常用代码片段</span><br><span class="line">entry point: (index.js)</span><br><span class="line">test command:</span><br><span class="line">git repository: git@github.com:JayMo666/webplus.git</span><br><span class="line">keywords: web</span><br><span class="line">author: JayMo</span><br><span class="line">license: (ISC) MIT</span><br><span class="line">About to write to F:\npm\npm-module\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;web-plus&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;前端常用代码片段&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git+ssh://git@github.com/JayMo666/webplus.git&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;web&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;author&quot;: &quot;JayMo&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;bugs&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: &quot;https://github.com/JayMo666/webplus/issues&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;homepage&quot;: &quot;https://github.com/JayMo666/webplus#readme&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (yes)</span><br></pre></td></tr></table></figure><h3 id="npm注册"><a href="#npm注册" class="headerlink" title="npm注册"></a>npm注册</h3><h3 id="npm-命令"><a href="#npm-命令" class="headerlink" title="npm 命令"></a>npm 命令</h3><p>1.首先增加用户</p><blockquote><p>npm adduser<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm adduser</span><br><span class="line">Username: jaymo666</span><br><span class="line">Password: *******</span><br><span class="line">Email: (this IS public) 1294****8@qq.com</span><br><span class="line">Logged in as jaymo666 on https://registry.npmjs.org/.</span><br></pre></td></tr></table></figure></p></blockquote><p>2.查看当前登录用户</p><blockquote><p>npm whoami</p></blockquote><p>3.登录命令（这里已经登录，不用执行此命令）</p><blockquote><p>npm login</p></blockquote><h2 id="开发包-编程"><a href="#开发包-编程" class="headerlink" title="开发包-编程"></a>开发包-编程</h2><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ul><li>a.js</li><li>index.js （这个是入口文件，要和package.json 文件中的  “main”的值一样）</li><li>package.json (npm init 生成的）</li></ul><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><p>index.js:就开发一个简单地hello程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function hello(name)&#123;</span><br><span class="line">  console.log(&quot;hello &quot;+ name);</span><br><span class="line">&#125;</span><br><span class="line">exports.hello=hello;</span><br></pre></td></tr></table></figure><p>b.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var h=require(&apos;./index&apos;);</span><br><span class="line">h.hello(&apos;jaymo&apos;);</span><br></pre></td></tr></table></figure><p>##5.发布npm包</p><blockquote><p>npm publish<br>进入npm个人中心，可以看到自己的npm包已经发布在上面了</p></blockquote><p>##6.获取npm包</p><blockquote><p>npm install package-name<br>此处package-name使用web-plus即可<br>可以看到，多了一个node_modules目录，里面多了一个web-plus文件夹，里面放的就是我们刚才创建的npm包，包含a.js、index.js、package.json三个文件</p></blockquote><p>##7.使用npm包<br>跟使用普通的npm包一样，问了测试简单，创建一个index.js，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = require(&apos;web-plus&apos;)</span><br><span class="line">a.hello(&apos;jaymo&apos;)</span><br></pre></td></tr></table></figure></p><p>执行<code>node index</code>即可看见输出了hello jaymo</p><p>##8.更新npm包<br>更新npm包也是使用<code>npm publish</code>命令发布，不过必须更改npm包的版本号，即package.json的version字段，否则会报错<br>1.查看版本</p><blockquote><p>npm version<br>2.修改版本<br>npm version 版本<br>3.然后发布<br>npm publish</p></blockquote><p>##9.易出现的错误：</p><ul><li>如果在发布的文件下运行a.js文件测试：</li></ul><p><code>node a</code><br>如果出现：Cannot find module ‘web-plus’错误，可能是在a文件中require(‘./文件名’);引入出错</p><ul><li>如果是使用npm包出现Cannot find module ‘web-plus’错误，可能是：发布的包中package.json文件中main（入口文件）的值不是主文件名（在这里为index.js)</li></ul><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2018/03/14/在npm发布第一个包/">http://jaymo666.github.io/2018/03/14/在npm发布第一个包/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>hexo博客再配置</title>
      <link href="/2018/03/08/%E2%80%9Chexo%E5%8D%9A%E5%AE%A2%E5%86%8D%E9%85%8D%E7%BD%AE%E2%80%9D/"/>
      <content type="html"><![CDATA[<p>记录更换电脑后开启的新功能<a id="more"></a></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe></p><h1 id="1-已结开启的功能"><a href="#1-已结开启的功能" class="headerlink" title="1.已结开启的功能"></a>1.已结开启的功能</h1><h2 id="1-1设置-RSS"><a href="#1-1设置-RSS" class="headerlink" title="1.1设置 RSS"></a>1.1设置 RSS</h2><h2 id="1-2侧边栏社交链接"><a href="#1-2侧边栏社交链接" class="headerlink" title="1.2侧边栏社交链接"></a>1.2侧边栏社交链接</h2><h2 id="1-3设置「动画效果」"><a href="#1-3设置「动画效果」" class="headerlink" title="1.3设置「动画效果」"></a>1.3设置「动画效果」</h2><h2 id="1-4设置「背景动画」"><a href="#1-4设置「背景动画」" class="headerlink" title="1.4设置「背景动画」"></a>1.4设置「背景动画」</h2><h1 id="2-待开启"><a href="#2-待开启" class="headerlink" title="2.待开启"></a>2.待开启</h1><h2 id="2-1设置字体"><a href="#2-1设置字体" class="headerlink" title="2.1设置字体"></a>2.1设置字体</h2><h2 id="2-2开启打赏功能"><a href="#2-2开启打赏功能" class="headerlink" title="2.2开启打赏功能"></a>2.2开启打赏功能</h2><h2 id="2-3订阅微信公众号"><a href="#2-3订阅微信公众号" class="headerlink" title="2.3订阅微信公众号"></a>2.3订阅微信公众号</h2><h1 id="3-hexo-官方插件地址："><a href="#3-hexo-官方插件地址：" class="headerlink" title="3.hexo 官方插件地址："></a>3.hexo 官方插件地址：</h1><p><a href="https://hexo.io/plugins/" target="_blank" rel="noopener">https://hexo.io/plugins/</a></p><h1 id="4-加入的插件："><a href="#4-加入的插件：" class="headerlink" title="4.加入的插件："></a>4.加入的插件：</h1><ol><li>HEXO-自动摘录<a href="https://github.com/ashisherc/hexo-auto-excerpt" target="_blank" rel="noopener">https://github.com/ashisherc/hexo-auto-excerpt</a></li><li>HEXO辅助性live2d <a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d</a></li><li>Hexo跨博客文章推荐插件 <a href="https://github.com/huiwang/hexo-recommended-posts" target="_blank" rel="noopener">https://github.com/huiwang/hexo-recommended-posts</a><br>4.实现点击出现桃心效果</li><li>在网站底部加上访问量</li></ol><p>【参考】<br> 1.<a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">https://www.jianshu.com/p/f054333ac9e6</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2018/03/08/“hexo博客再配置”/">http://jaymo666.github.io/2018/03/08/“hexo博客再配置”/</a></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>迁移hexo到新电脑</title>
      <link href="/2018/03/08/%E8%BF%81%E7%A7%BBhexo%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/"/>
      <content type="html"><![CDATA[<p>在更换新电脑的情况下恢复博客，保留了源码…<a id="more"></a></p><p>1、从官网Git下载git，在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建：<br>（1）打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“ 把其中的邮件地址换成自己的邮件地址，然后一路回车<br>（2）最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。<br>（3）登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。<br>注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了。<br>（3）<a href="https://coding.net" target="_blank" rel="noopener">https://coding.net</a> 中的ssh与github的共用</p><p>2、下载Node.js，并安装</p><p>3、打开git bash客户端，输入 npm install hexo-cli -g，开始安装hexo</p><p>4、下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。<br>（1）讨论下哪些文件是必须拷贝的：首先是之前自己修改的文件，像站点配置_config.yml，theme文件夹里面的主题，以及source里面自己写的博客文件，这些肯定要拷贝的。除此之外，还有三个文件需要有，就是scaffolds文件夹（文章的模板）、package.json（说明使用哪些包）和.gitignore（限定在提交的时候哪些文件可以忽略）。其实，这三个文件不是我们修改的，所以即使丢失了，也没有关系，我们可以建立一个新的文件夹，然后在里面执行hexo init，就会生成这三个文件，我们只需要将它们拷贝过来使用即可。总结：_config.yml，theme/，source/，scaffolds/，package.json，.gitignore，是需要拷贝的。<br>（2）再讨论下哪些文件是不必拷贝的，或者说可以删除的：首先是.git文件，无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。然后是文件夹node_modules（在用npm install会重新生成），public（这个在用hexo g时会重新生成），.deploy_git文件夹（在使用hexo d时也会重新生成），db.json文件。其实上面这些文件也就是.gitignore文件里面记载的可以忽略的内容。总结：.git/，public/，.deploy_git/，db.json文件需要删除。</p><p>5、在git bash中切换目录到新拷贝的文件夹里，使用 npm install 命令，进行模块安装。很明显我们这里没用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。</p><p>6、安装其他的一些必要组件，如果在node_modules里面有的，就不要重复安装了：<br>（1）为了使用hexo d来部署到git上，需要安装<br>npm install hexo-deployer-git –save<br>（2）为了建立RSS订阅，需要安装<br>npm install hexo-generator-feed –save<br>（3）为了建立站点地图，需要安装<br>npm install hexo-generator-sitemap –save<br>插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明</p><p>7、使用hexo g，然后使用hexo d进行部署，如果都没有出错，就转移成功了！</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2018/03/08/迁移hexo到新电脑/">http://jaymo666.github.io/2018/03/08/迁移hexo到新电脑/</a></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/07/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2018/03/07/hello-world/">http://jaymo666.github.io/2018/03/07/hello-world/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>conda用法</title>
      <link href="/2017/12/04/conda%E7%94%A8%E6%B3%95/"/>
      <content type="html"><![CDATA[<p>Conda简单用法及在python2与python3之间切换<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h1 id="安装scipy"><a href="#安装scipy" class="headerlink" title="安装scipy"></a>安装scipy</h1><p>conda install scipy</p><h1 id="conda会从从远程搜索scipy的相关信息和依赖项目，对于python-3-4，conda会同时安装numpy和mkl（运算加速的库）"><a href="#conda会从从远程搜索scipy的相关信息和依赖项目，对于python-3-4，conda会同时安装numpy和mkl（运算加速的库）" class="headerlink" title="conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）"></a>conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）</h1><h1 id="查看已经安装的packages"><a href="#查看已经安装的packages" class="headerlink" title="查看已经安装的packages"></a>查看已经安装的packages</h1><p>conda list</p><h1 id="最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包"><a href="#最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包" class="headerlink" title="最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包"></a>最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</h1><h1 id="查看当前环境下已安装的包"><a href="#查看当前环境下已安装的包" class="headerlink" title="查看当前环境下已安装的包"></a>查看当前环境下已安装的包</h1><p>conda list</p><h1 id="查看某个指定环境的已安装包"><a href="#查看某个指定环境的已安装包" class="headerlink" title="查看某个指定环境的已安装包"></a>查看某个指定环境的已安装包</h1><p>conda list -n python34</p><h1 id="查找package信息"><a href="#查找package信息" class="headerlink" title="查找package信息"></a>查找package信息</h1><p>conda search numpy</p><h1 id="安装package"><a href="#安装package" class="headerlink" title="安装package"></a>安装package</h1><p>conda install -n python34 numpy</p><h1 id="如果不用-n指定环境名称，则被安装在当前活跃环境"><a href="#如果不用-n指定环境名称，则被安装在当前活跃环境" class="headerlink" title="如果不用-n指定环境名称，则被安装在当前活跃环境"></a>如果不用-n指定环境名称，则被安装在当前活跃环境</h1><h1 id="也可以通过-c指定通过某个channel安装"><a href="#也可以通过-c指定通过某个channel安装" class="headerlink" title="也可以通过-c指定通过某个channel安装"></a>也可以通过-c指定通过某个channel安装</h1><h1 id="更新package"><a href="#更新package" class="headerlink" title="更新package"></a>更新package</h1><p>conda update -n python34 numpy</p><h1 id="删除package"><a href="#删除package" class="headerlink" title="删除package"></a>删除package</h1><p>conda remove -n python34 numpy</p><p>conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如</p><h1 id="更新conda，保持conda最新"><a href="#更新conda，保持conda最新" class="headerlink" title="更新conda，保持conda最新"></a>更新conda，保持conda最新</h1><p>conda update conda</p><h1 id="更新anaconda"><a href="#更新anaconda" class="headerlink" title="更新anaconda"></a>更新anaconda</h1><p>conda update anaconda</p><h1 id="更新python"><a href="#更新python" class="headerlink" title="更新python"></a>更新python</h1><p>conda update python</p><h1 id="假设当前环境是python-3-4-conda会将python升级为3-4-x系列的当前最新版本"><a href="#假设当前环境是python-3-4-conda会将python升级为3-4-x系列的当前最新版本" class="headerlink" title="假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本"></a>假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</h1><p>如果创建新的python环境，比如3.4，运行conda create -n python34 python=3.4之后，conda仅安装python 3.4相关的必须项，如python, pip等，如果希望该环境像默认环境那样，安装anaconda集合包，只需要：</p><h1 id="在当前环境下安装anaconda包集合"><a href="#在当前环境下安装anaconda包集合" class="headerlink" title="在当前环境下安装anaconda包集合"></a>在当前环境下安装anaconda包集合</h1><p>conda install anaconda</p><h1 id="结合创建环境的命令，以上操作可以合并为"><a href="#结合创建环境的命令，以上操作可以合并为" class="headerlink" title="结合创建环境的命令，以上操作可以合并为"></a>结合创建环境的命令，以上操作可以合并为</h1><p>conda create -n python34 python=3.4 anaconda</p><h1 id="也可以不用全部安装，根据需求安装自己需要的package即可"><a href="#也可以不用全部安装，根据需求安装自己需要的package即可" class="headerlink" title="也可以不用全部安装，根据需求安装自己需要的package即可"></a>也可以不用全部安装，根据需求安装自己需要的package即可</h1><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/12/04/conda用法/">http://jaymo666.github.io/2017/12/04/conda用法/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>网络管理员必备</title>
      <link href="/2017/09/26/Network/"/>
      <content type="html"><![CDATA[<p>本文包括：</p><ul><li>[1]ping命令</li><li>[2]路由器和交换机的差异</li><li>[3]路由器的基本设置</li><li>[4]netsh网络配置命令</li><li>[5]安装失败（未签名）</li><li>[6]管理用户网络应用</li><li>[7]映射网络驱动器</li><li>[8]网络适配器的原理</li><li>[9]交换机的分类</li><li>[10]交换机的功能</li><li>[11]交换机的接口种类</li><li>[12]路由器的工作原理</li><li>[13]初识TCP/IP的分层<a id="more"></a></li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h2 id="网络管理员必备"><a href="#网络管理员必备" class="headerlink" title="网络管理员必备"></a>网络管理员必备</h2><h3 id="1-ping命令"><a href="#1-ping命令" class="headerlink" title="[1]ping命令"></a>[1]ping命令</h3><p>“ping”命令是windows系统最长用的命令之一，是通过对一个网址<strong>发送测试数据包</strong>，看对方网址是否有响应并统计响应时间，以此<strong>测试网络</strong>，同时可以很好地帮助我们<strong>分析和判定网络故障</strong>。</p><p>方式：“ping IP地址/域名”</p><ol><li>输入“ping IP地址”回车，我们可以看到本机跟这台网络设备的连接状态，如下图所示是连接正常的。<br>例如：百度首页ip地址：119.75.217.109</li></ol><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\ping百度.JPG" alt="image"></p><p>2.还可以“ping 域名”,例如:ping baidu.com</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\pingbaiducom.JPG" alt="image"></p><p>3.如果“ping”后出现下图所示界面，说明本机跟这台网络设备的网络连接是不通的</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\pingcuo.JPG" alt="image"></p><p>4.键入“ping”直接回车我们还可以看到ping命令加其他参数的使用方法</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\ping.JPG" alt="image"></p><p>5.比如，我们使用“ping IP地址 -t”命令，可以持续的ping指定的主机，如果没有手动停止，ping命令会一直持续下去，我们可以通过“Ctrl+C”停止命令。其他参数的使用方法用户可以自己体验</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\pingt.JPG" alt="image"></p><hr><h3 id="2-路由器和交换机的差异"><a href="#2-路由器和交换机的差异" class="headerlink" title="[2]路由器和交换机的差异"></a>[2]路由器和交换机的差异</h3><h5 id="1-工作层次不同"><a href="#1-工作层次不同" class="headerlink" title="1. 工作层次不同:"></a>1. 工作层次不同:</h5><p>交换机工作在七层模型的第二层（即数据链路层）；而路由器工作在第三层（即网络层）。交换机由于工作在第二层，它的工作原理比较简单，而路由器在第三层，可以得到更多的协议信息，也可以做出更加智能的转发或映射。</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\77.JPG" alt="image"></p><blockquote><p>网络层（第三层）：能提供介质访问和链路管理等功能<br>数据链路层（第二层）：具有寻址和路由选择等功能</p></blockquote><h5 id="2-数据转发依据的对象不同"><a href="#2-数据转发依据的对象不同" class="headerlink" title="2. 数据转发依据的对象不同"></a>2. 数据转发依据的对象不同</h5><p>交换机是利用网络设备的<strong>物理地址（即MAC地址）</strong>来确定转发数据的目的地址；路由器是利用网络设备的<strong>IP地址</strong>来确定转发数据的目的地址。其中<strong>物理地址</strong>是设备本身自带的，由设备的网卡生产厂商分配，已经固化到网卡硬件中，<strong>不可修改</strong>；而<strong>IP地址是在系统软件中分配的，可以修改</strong>。</p><p>通过命令“ipconfig/all”，可以查看本机的物理地址和IP地址。如下图所示，就是我的计算机的网卡信息。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\ip.JPG" alt="image"></p><h5 id="3-路由器可以分割广播域，而交换机不能"><a href="#3-路由器可以分割广播域，而交换机不能" class="headerlink" title="3.路由器可以分割广播域，而交换机不能"></a>3.路由器可以分割广播域，而交换机不能</h5><p><strong>交换机只可以分割冲突域</strong>，不可以分割广播域，<strong>而路由器可以分割广播域</strong>。简单的来说，在同一个交换机下连接的设备，IP都在同一个网段，是属于同一个广播域的，如果不在同一网段，则无法进行通信；而路由器可以分配不同的广播域（即不同的网段），而这些不同网段的设备可以不穿过路由而进行相互通信。</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\广播域.JPG" alt="image"></p><blockquote><p>目前，虽然三层或者第三层以上交换机具有VLAN功能，也可以分割广播域，但是各个广播域之间是不可以相互通信的，他们之前如果要通信交流还是需要路由器的支持。</p></blockquote><h5 id="4-路由器有防火墙服务，而交换机没有"><a href="#4-路由器有防火墙服务，而交换机没有" class="headerlink" title="4.路由器有防火墙服务，而交换机没有"></a>4.路由器有防火墙服务，而交换机没有</h5><p>路由器设置的防火墙是运行在网络层的，通过设置特定的规定，允许或者限制传输的数据通过，或者过滤IP封包，禁止不符合规定的封包通过。而交换机不具备防火墙功能，如果只是通过交换机接通外部网络，相当于闭上眼、光着屁股在大街上跑，很不安全！</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\防火墙.JPG" alt="image"><br><strong>注意：数据安全很重要，路由器、交换机的使用都要慎重！注意保密保护工作！</strong></p><h3 id="3-路由器的基本设置"><a href="#3-路由器的基本设置" class="headerlink" title="[3]路由器的基本设置"></a>[3]路由器的基本设置</h3><p> 要实现多台计算机同时上网，主要设置的地方就是路由器，下面以企业中总路由器下的一个无线路由为大家介绍一下路由器的基本设置过程。</p><p> 1.通过<strong>浏览器登录路由器</strong>。如果是<strong>新路由器</strong>，可以查看路由后面贴<strong>标签</strong>出的默认IP和登录账号、密码；如果是正常<strong>使用中的路由器</strong>，登录地址可以查看计算机的网关，如果登录密码修改过，请咨询管理员。</p><blockquote><p> 电脑和路由器相连：一种是通过网线连接，一种是通过无线连接。</p></blockquote><p>电脑和路由器之间通过网线连接的话，你要在路由器上找到<strong>LAN口和WAN口</strong>。这里讲一下，WAN口全称Wide Area Network（广域网），LAN口全称Wide Area Network（局域网）。一般的路由有很多LAN口，一个WAN口。<strong>WAN口插主网线，LAN插电脑与路由连接的网线</strong>。这样电脑就和路由器连接了。</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\LAN.JPG" alt="image"></p><blockquote><p>电脑连接上了路由器，就可以在浏览器上输入路由器的地址进入路由器的设置界面了</p></blockquote><p>2.<strong>WAN口设置</strong>，“<strong>基本设置</strong>”中的“<strong>快速设置</strong>”，（1）如果外网地址没有固定IP，则类型选择动态；（2）如果外网地址有固定IP或者上层还有路由则将分配IP设置到wan口，如下图所示。</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\快速配置.JPG" alt="image"><br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\外网.JPG" alt="image"></p><p>3.<strong>LAN口的设置</strong>，“基本设置”中的“内网设置”，设置IP地址（即内网中网络设备的网关比如设置成192.168.1.1，如果上层有路由是192.168.1.1，则次路由器可以设置成其他网段192.168.x.1）、子网掩码。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\内网.JPG" alt="image"><br><strong><br>4.“DHCP服务器”的设置</strong>，如果让用户<strong>自动获取IP地址</strong>使用，需要使用DHCP服务器，可以限制用户自动获取IP地址的范围，如下图的“起始IP地址”和“结束IP地址”（可以在上网行为管理的IP地址组中看到）。</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\上网行为.JPG" alt="image"><br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\DHCP.JPG" alt="image"></p><p>5.<strong>无线的“基本设置”</strong>，要启用无线的话，勾选启用开关，并为无线网络设置一个名称，设置无线模式为“11b/g/n混合模式”，来兼容三种无线协议：802.11b、802.11g、802.11n。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\无线.JPG" alt="image"></p><p>6.<strong>无线的“安全设置”</strong>，如果需要做MAC地址绑定的安全管控，需要勾选mac地址“启用”：设置“允许”，将允许上网的计算机mac地址添加到mac地址列表；设置“禁用”，将不允许上网的计算机mac地址添加到mac地址列表。设置加密类型为常用的“WPA2-PSK”，并设置密码<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\无线安全.JPG" alt="image"></p><p>7.<strong>“上网行为管理”设置</strong>，设置允许或者不允许上网的时间段；如果需要管理QQ等常用聊天软件，可以在聊天软件高级设置里进行启用，将允许使用QQ等聊天软件的账号添加到例外列表。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\上班.JPG" alt="image"><br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\QQ.JPG" alt="image"></p><p>8.网络安全中设置内外网的“攻击防御”和“MAC地址绑定”（勾选“禁止未绑定IP/MAC的主机通过”，前面已经说过，不再赘述）<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\外网防御.JPG" alt="image"><br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\IPMAC.JPG" alt="image"></p><p>9.<strong>“端口映射”和“域名转发”</strong>，大多在系统集成中会用到，特别是监控设备想要远程访问，需要将设备的通讯端口等进行路由转发，此处需要注意的是，如果跨多层路由的话，每一层路由都是需要转发的。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\端口.JPG" alt="image"><br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\域名.JPG" alt="image"></p><p>10.修改路由器的登录密码。</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\修改密码.JPG" alt="image"></p><hr><h3 id="4-netsh网络配置命令"><a href="#4-netsh网络配置命令" class="headerlink" title="[4]netsh网络配置命令"></a>[4]netsh网络配置命令</h3><p>netsh是Network Shell的缩写，是windows为我们提供的功能强大的网络配置命令行工具。下面用几个常用的“netsh interface ip show”小命令介绍netsh的用法。</p><p>1.<strong>netsh interface ip show address</strong>:显示本机IP地址配置，包括以太网的ip和本地回环ip地址，以太网ip地址就是我们常说的为本机网卡分配的一个地址，这个容易理解；本地还有ip地址，是一种叫做本地回环接口虚接口，在windows系统中都会采用如下图所示的127.0.0.1这个地址，用以提高网络的健壮性。</p><p>2.如果在上一步的基础上想要显示更多信息，可以用命令：<strong>netsh interface ip show config</strong>。</p><p>3.netsh interface ip show dns:显示本机使用的DNS服务器，同样包括以太网和本地回环接口的DNS信息。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\DNS.JPG" alt="image"></p><p>4.<strong>netsh interface ip show ipnet</strong>:显示本IP地址所在的网络到媒体的映射，我们同时可以看到映射类型和所用接口等信息。</p><p>5.<strong>netsh interface ip show wins</strong>:如果设置了wins服务器，可以用此命令查看wins服务器的地址。</p><p>6.还有一个我喜欢用的不属于“<strong>netsh interface ip</strong>”这一系列的小命令，<strong>netsh firewall show state</strong>:<strong>查看本机防火墙的状态</strong>，每当我们公司某一台办公电脑在连接公司的某个系统连接不上的时候，我会用以查看防火墙状态，我们可以看到启用或禁用的功能模块，以及启用情况。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\防火.JPG" alt="image"></p><hr><h3 id="5-安装失败（未签名）"><a href="#5-安装失败（未签名）" class="headerlink" title="[5]安装失败（未签名）"></a>[5]安装失败（未签名）</h3><p>在我们安装驱动的时候，特别是用驱动精灵等驱动软件安装的时候，会出现“安装失败（未签名）”的情况，如何解决？</p><p>方法/步骤</p><p>1.单击开始菜单里的“运行”，或者通过“windows键+R”打开“运行”，在输入框中输入“sigverif”回车<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\签名.JPG" alt="image"></p><p>2.在打开的文件签名验证里点击“高级”按钮</p><p>3.如下图所示找到下载的驱动（如果未解压，需要先解压），然后点击“确认”按钮</p><p>4.切换到“正在记录”选项，选中如下图所示选项，点击“确定”按钮</p><p>5.回到第二步时候的界面，点击“开始”按钮，我们可以看到下图所示列表界面，点击“关闭”即可</p><p>6.从设备管理器安装驱动，右键单击我的电脑（xp）/计算机（win7）/这台电脑（win8），点击“管理”，在“计算机管理”中右侧边栏中单击“设备管理器”，找到我们要安装驱动的这个硬件，右键单击，选择“更新驱动程序”</p><p>7.勾选“从列表或指定位置安装”，点击“下一步”按钮</p><p>8.选择驱动程序解压后的文件夹，点击“下一步”按钮</p><p>9.到安装界面，用户需等待，知道出现安装成功的界面，点击“完成”按钮即可</p><p>10.返回到设备管理器，我们可以看到，此驱动已经安装完成</p><hr><h3 id="6-管理用户网络应用"><a href="#6-管理用户网络应用" class="headerlink" title="[6]管理用户网络应用"></a>[6]管理用户网络应用</h3><p>现在各种网络应用程序纷繁复杂，而p2p软件又是其中最为流行的一种，而且提供了多样化得登陆方式，在此，我们以最常用的QQ为例。</p><p>我们大家都知道，QQ本身支持UDP、HTTP和HTTPS三种登陆方式，而且可以使用代理，意思是说，只要你允许了HTTP协议，QQ就可以登陆。</p><p>现在我们以封锁QQ为例，介绍一下，如何利用路由级的网络防火墙管理用户网络应用。</p><h5 id="1-QQ登陆原理"><a href="#1-QQ登陆原理" class="headerlink" title="1.QQ登陆原理"></a>1.QQ登陆原理</h5><ol><li><p>QQ登录登陆的过程，由向服务器群的8000端口发送UDP数据包，从服务器群的回复中选择一个最快的作为登陆服务器。</p></li><li><p>如果没有服务器回复UDP数据包，则使用TCP80/443端口来进行连接。</p></li><li><p>QQ服务器：</p></li></ol><ul><li>UDP8000端口类18个</li><li>TCPHTTP连接服务器5个</li><li>会员VIP服务器使用HTTPS443连接</li></ul><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\QQ原理.JPG" alt="image"></p><h5 id="2-如何封锁"><a href="#2-如何封锁" class="headerlink" title="2.如何封锁"></a>2.如何封锁</h5><p>1.上面我们知道，QQ可以使用HTTP直接连接，一般不能封锁HTTP协议，所以最好的办法就是封锁它的服务器IP地址，但是QQ还可以使用代理登陆，这种情况我们就得在路由级防火墙中的HTTP检查机制中设置禁止QQ的HTTP连接。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\QQ代理.JPG" alt="image"><br>2.首先，配置用户访问规则，使用计算机集定义目的网络。也就是做好禁止内部客户访问QQ服务器的访问策略。</p><p>3.其次，配置HTTP策略，理由路由器的HTTP深层检查机制，禁止QQ使用HTTP代理。在允许ＱＱ使用HTTP代理的策略上点击右键，选中“配置HTTP”</p><p>4.在弹出的“为规则配置HTTP策略”对话框中，点击“签名”，然后点击“添加”，在弹出的“签名”对话框中，输入名称为“QQ”，指定签名搜索条件为在“请求URL”中搜索“tencent.com”，找到则阻止这个连接</p><p>5.最后，在防火墙策略选项中，点击“应用”来保存修改和更新防火墙策略，此时，QQ已经不能通过代理服务器登录了</p><hr><h3 id="7-映射网络驱动器"><a href="#7-映射网络驱动器" class="headerlink" title="[7]映射网络驱动器"></a>[7]映射网络驱动器</h3><p>映射网络驱动器” 的意思是将局域网中的某个目录（一般是共享的文件夹之类的）映射成本地驱动器号，就是说把网络上其他机器的共享的文件夹映射自己机器上的一个磁盘，这样可以提高访问时间，相当于一个打开共享的快捷方式。</p><p>1.首先，找到这个共享文件夹，我们可以在网络里找到这台设备，或者打开开始菜单的“运行”，输入：“\这台设备的IP地址”，比如此例中的“\192.168.1.52”<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\本机IP.JPG" alt="image"></p><p>2.在打开的共享界面，找到并右键单击要映射驱动器的文件件，选择“映射网络驱动器”<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\映射.JPG" alt="image"></p><p>3.在映射驱动器的界面，选择好驱动器盘符，点击“完成”即可完成设置</p><p>4.打开资源管理器，我们可以看到，已经有了该驱动器，日常使用过程中直接点击打开即可</p><hr><h3 id="8-网络适配器的原理"><a href="#8-网络适配器的原理" class="headerlink" title="[8]网络适配器的原理"></a>[8]网络适配器的原理</h3><p>网络适配器，也就是我们说的网卡，有些维修人员也叫网络接口卡，是计算机和网络电缆之间的物理接口，下面我们根据网络适配器需要完成的任务介绍一下它的工作原理。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\网卡.JPG" alt="image"></p><p>1.为在<strong>计算机使用的数据</strong>（<strong>并行数据</strong>）和<strong>电缆上传输的电信号</strong>（<strong>串行数据</strong>）之间提供数据转换的功能。比如我们用的一个共享打印机，计算机直接连接打印机用的是并行数据，而如果我们通过网络连接别人共享的打印机，就是通过串行数据转换为并行数据来实现。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\打印.JPG" alt="image"><br>2.判断从电缆接收的数据是否为传输给该计算机的数据。</p><p>3.在计算机和电缆之间控制数据流，每块网卡都有一个唯一的标识，我们一般叫做MAC地址，大部分网卡的MAC地址烧录在卡上的ROM芯片中，MAC地址有6段组成，通常表示为12个16进制数。<br>我们可以通过命令提示符查看本机网卡的信息，操作步骤：1、单击开始菜单里的“运行”，在输入框中输入“cmd”，然后回车。2、在命令提示符界面输入“ipconfig /all”命令，回车，我们可以看到以下信息。<br>如图所示的是本机无线网卡的信息，其中前3字节“A6-17-31”表示厂商代码，有IEEE负责分配；后3个字节“30-49-E2”表示网卡序号，由网卡厂商负责。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\MAC地址.JPG" alt="image"></p><hr><h3 id="9-交换机的分类"><a href="#9-交换机的分类" class="headerlink" title="[9]交换机的分类"></a>[9]交换机的分类</h3><p>交换机是网络连接的基础，有了交换机，就可以实现更多电脑的共享上网</p><p>1.广义上来讲，交换机分为两种：<strong>广域交换机</strong>和<strong>局域网交换机</strong>。广域网交换机主要用于电信领域，提供通信用的基础平台，我们平常接触很少；而局域网交换机是我们日常使用最多的，主要应用于日常的局域网络，连接计算机和网络打印机的终端设备<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\交换机.JPG" alt="image"></p><p>2.从传输介质和传输速度上可以分为以太网交换机、快速以太网交换机、千兆以太网交换机、FDDI交换机、ATM交换机和令牌交换机等</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\交换机速率.JPG" alt="image"></p><p>3.从规模应用上可以分为企业级、部门级和工作组交换机<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\交换机企业.JPG" alt="image"></p><h3 id="10-交换机的功能"><a href="#10-交换机的功能" class="headerlink" title="[10]交换机的功能"></a>[10]交换机的功能</h3><h5 id="1-交换机功能"><a href="#1-交换机功能" class="headerlink" title="1.交换机功能"></a>1.交换机功能</h5><p>学习功能，局域网内交换机会了解跟每一个插口相连接的<strong>MAC地址</strong>，并将地址同<strong>相应的端口</strong>映射起来存放在<strong>交换机缓存中的MAC地址表中</strong></p><h5 id="2-转发-过滤功能"><a href="#2-转发-过滤功能" class="headerlink" title="2.转发/过滤功能"></a>2.转发/过滤功能</h5><p>当一个数据帧的目的地址在MAC地址表中有映射时，它被转发到连接目的节点的端口而不是所有端口（如该数据帧为广播/组播帧则转发至所有端口）<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\MAC地址表.JPG" alt="image"></p><h5 id="3-消除回路功能"><a href="#3-消除回路功能" class="headerlink" title="3.消除回路功能"></a>3.消除回路功能</h5><p>当交换机包括一个冗余回路时，以太网交换机通过<strong>生成树协议</strong>避免回路的产生，同时允许存在<strong>后背路径</strong><br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\回路.JPG" alt="image"></p><h5 id="4-兼容功能"><a href="#4-兼容功能" class="headerlink" title="4.兼容功能"></a>4.兼容功能</h5><p>交换机除了能连接两种同类型的网络之外，还可以在不同类型的网路（如以太网和快速以太网）之间起到互联作用。而且现在的交换机没有很严格的类型之分，百兆交换机一般也会加两个千兆口或光纤接入口<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\消除.JPG" alt="image"></p><hr><h3 id="11-交换机的接口种"><a href="#11-交换机的接口种" class="headerlink" title="[11]交换机的接口种"></a>[11]交换机的接口种</h3><h5 id="1-双绞线RJ-45接口-水晶头"><a href="#1-双绞线RJ-45接口-水晶头" class="headerlink" title="1.双绞线RJ-45接口-水晶头"></a>1.双绞线RJ-45接口-水晶头</h5><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\水晶头.JPG" alt="image"></p><h5 id="2-光纤接口"><a href="#2-光纤接口" class="headerlink" title="2.光纤接口"></a>2.光纤接口</h5><p>光纤需要熔接到带插头的尾纤，常见的尾纤插头有SC。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\SC.JPG" alt="image"></p><hr><h3 id="12-路由器的工作原理"><a href="#12-路由器的工作原理" class="headerlink" title="[12]路由器的工作原理"></a>[12]路由器的工作原理</h3><p>路由器，大家都很熟悉了，办公室或者家里凡有两台以上的电脑需要上网的一般都安装了路由器，只有安装了路由器才能实现多台电脑同时上网。我们就了解下路由器的配置原理。</p><h5 id="1-路由器的概念"><a href="#1-路由器的概念" class="headerlink" title="1.路由器的概念"></a>1.路由器的概念</h5><p>1.所谓“路由”，就是把数据从一个地方传送到另一个地方的行为和动作，路由器就是执行这个动作的机器，英文名Router</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\路由.JPG" alt="image"></p><p>2.路由器能将不同网络或网段之间的数据信息进行“翻译”，以使他们能够相互“读”懂对方的数据，从而构建更大的网络。</p><h5 id="2-路由器的典型功能"><a href="#2-路由器的典型功能" class="headerlink" title="2.路由器的典型功能"></a>2.路由器的典型功能</h5><ul><li><strong>数据通道功能</strong></li></ul><p>包括转发决定、背板转发以及输出链路调度等，一般由特定的硬件来完成</p><ul><li><strong>控制功能</strong></li></ul><p>一般用软件来实现，包括与相邻路由器之间的信息交换、系统配置、系统管理等</p><h5 id="3-路由器的主要功能"><a href="#3-路由器的主要功能" class="headerlink" title="3.路由器的主要功能"></a>3.路由器的主要功能</h5><ul><li><strong>网络互连</strong></li></ul><p>路由器支持各种局域网和广域网接口，主要用于互连局域网和广域网，实现不同网络互相通信<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\互连.JPG" alt="image"></p><ul><li><strong>数据处理</strong></li></ul><p>提供包括分组过滤、分组转发、优先级、复用、加密、压缩和防火墙等功能<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\过滤.JPG" alt="image"></p><ul><li><strong>网络管理</strong></li></ul><p>路由器提供包括配置管理、性能管理、容错管理和流量控制管理等功能</p><p><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\管理.JPG" alt="image"></p><h5 id="4-路由器的工作原理"><a href="#4-路由器的工作原理" class="headerlink" title="4.路由器的工作原理"></a>4.路由器的工作原理</h5><ul><li><p>接收来自它连接的某个网络的数据</p></li><li><p>将数据向上传递，并且（必要时）重新组合IP数据报</p></li><li><p>检查IP头部中的目的地址，如果目的地址位于发出数据的那个网络，那么路由器就放下被认为已经达到目的地的数据，因为数据是在目的计算机所在网络上传输</p></li><li><p>如果数据要送往另一个网络，那么路由器就查询路由表，以确定数据要转发到的目的地</p></li><li><p>路由器确定哪个适配器负责接收数据后，就通过相应的软件传递数据，以便通过网络来传送数据</p></li></ul><hr><h3 id="13-初识TCP-IP的分层"><a href="#13-初识TCP-IP的分层" class="headerlink" title="[13]初识TCP/IP的分层"></a>[13]初识TCP/IP的分层</h3><p>大家可能经常使用TCP/IP协议，在进行网络配置或修改IP地址等操作的时候会用到该处，但很少有人去深入挖掘，在此我们简单的了解一下TCP/IP的分层。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\分层.JPG" alt="image"></p><h5 id="1-TCP-IP协议"><a href="#1-TCP-IP协议" class="headerlink" title="1.TCP/IP协议"></a>1.TCP/IP协议</h5><ul><li><p>Internet采用了TCP/IP协议，但这并不是一个单一的协议，我们可能知道，TCP即传输控制协议，IP为网间协议，TCP/IP我们常常描述为互联网协议集。但可能很少人知道TCP/IP也是一种分层模型。它是基于<strong>硬件层次</strong>上的四个概念性层次构成，分别是<strong>网络接口层（数据链路层）、IP层（网络层）、传输层、应用层</strong>。<br><img src="/2017/09/26/Network/C:/Users\可汗金斯\Desktop\介质.JPG" alt="image"></p></li><li><p>网络接口层:也称数据链路层，这是TCP/IP最底层。功能:负责接收IP数据报并发送至选定的网络。</p></li><li><p>IP层:<strong>IP层处理机器之间的通信</strong>。功能:它接收来自传输层的请求，<strong>将带有目的地址的分组发送出去</strong>。将分组封装到数据报中，填入数据报头，使用路由算法以决定是直接将数据报传送至目的主机还是传给路由器，然后把数据报送至相应的网络接口来传送。</p></li><li>传输层:是提供应用层之间的通信，即端到端的通信。功能:<strong>管理信息流，提供可靠的传输服务</strong>，以确保数据无差错的地按序到达。</li></ul><h5 id="2-TCP-IP模型的分界线"><a href="#2-TCP-IP模型的分界线" class="headerlink" title="2.TCP/IP模型的分界线"></a>2.TCP/IP模型的分界线</h5><p>协议地址分界线:以区分高层和低层的寻址，<strong>高层寻址使用IP地址</strong>，<strong>低层寻址使用物理地址</strong>。应用程序IP层之上的协议软件只使用IP地址，而网络接口层处理物理地址。</p><ul><li>操作系统分界线:以区分系统与应用程序。<strong>在传输层和应用层之间。</strong></li><li><h5 id="3-复用与分解"><a href="#3-复用与分解" class="headerlink" title="3.复用与分解"></a>3.复用与分解</h5></li></ul><p>发送报文时，发送方在报文中加和了报文类型、选用协议等附加信息。所有的报文以帧的形式在网络中复用传送，形成一个分组流。在接收方收到分组时，参考附加信息对接收到的分组进行分解。</p><hr><p>参考网址：<a href="https://jingyan.baidu.com/season/38734" target="_blank" rel="noopener">https://jingyan.baidu.com/season/38734</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/26/Network/">http://jaymo666.github.io/2017/09/26/Network/</a></p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网络管理员必备</title>
      <link href="/2017/09/26/Network(1)/"/>
      <content type="html"><![CDATA[<p>本文包括：</p><ul><li>[1]ping命令</li><li>[2]路由器和交换机的差异</li><li>[3]路由器的基本设置</li><li>[4]netsh网络配置命令</li><li>[5]安装失败（未签名）</li><li>[6]管理用户网络应用</li><li>[7]映射网络驱动器</li><li>[8]网络适配器的原理</li><li>[9]交换机的分类</li><li>[10]交换机的功能</li><li>[11]交换机的接口种类</li><li>[12]路由器的工作原理</li><li>[13]初识TCP/IP的分层<a id="more"></a></li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h2 id="网络管理员必备"><a href="#网络管理员必备" class="headerlink" title="网络管理员必备"></a>网络管理员必备</h2><h3 id="1-ping命令"><a href="#1-ping命令" class="headerlink" title="[1]ping命令"></a>[1]ping命令</h3><p>“ping”命令是windows系统最长用的命令之一，是通过对一个网址<strong>发送测试数据包</strong>，看对方网址是否有响应并统计响应时间，以此<strong>测试网络</strong>，同时可以很好地帮助我们<strong>分析和判定网络故障</strong>。</p><p>方式：“ping IP地址/域名”</p><ol><li>输入“ping IP地址”回车，我们可以看到本机跟这台网络设备的连接状态，如下图所示是连接正常的。<br>例如：百度首页ip地址：119.75.217.109</li></ol><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\ping百度.JPG" alt="image"></p><p>2.还可以“ping 域名”,例如:ping baidu.com</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\pingbaiducom.JPG" alt="image"></p><p>3.如果“ping”后出现下图所示界面，说明本机跟这台网络设备的网络连接是不通的</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\pingcuo.JPG" alt="image"></p><p>4.键入“ping”直接回车我们还可以看到ping命令加其他参数的使用方法</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\ping.JPG" alt="image"></p><p>5.比如，我们使用“ping IP地址 -t”命令，可以持续的ping指定的主机，如果没有手动停止，ping命令会一直持续下去，我们可以通过“Ctrl+C”停止命令。其他参数的使用方法用户可以自己体验</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\pingt.JPG" alt="image"></p><hr><h3 id="2-路由器和交换机的差异"><a href="#2-路由器和交换机的差异" class="headerlink" title="[2]路由器和交换机的差异"></a>[2]路由器和交换机的差异</h3><h5 id="1-工作层次不同"><a href="#1-工作层次不同" class="headerlink" title="1. 工作层次不同:"></a>1. 工作层次不同:</h5><p>交换机工作在七层模型的第二层（即数据链路层）；而路由器工作在第三层（即网络层）。交换机由于工作在第二层，它的工作原理比较简单，而路由器在第三层，可以得到更多的协议信息，也可以做出更加智能的转发或映射。</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\77.JPG" alt="image"></p><blockquote><p>网络层（第三层）：能提供介质访问和链路管理等功能<br>数据链路层（第二层）：具有寻址和路由选择等功能</p></blockquote><h5 id="2-数据转发依据的对象不同"><a href="#2-数据转发依据的对象不同" class="headerlink" title="2. 数据转发依据的对象不同"></a>2. 数据转发依据的对象不同</h5><p>交换机是利用网络设备的<strong>物理地址（即MAC地址）</strong>来确定转发数据的目的地址；路由器是利用网络设备的<strong>IP地址</strong>来确定转发数据的目的地址。其中<strong>物理地址</strong>是设备本身自带的，由设备的网卡生产厂商分配，已经固化到网卡硬件中，<strong>不可修改</strong>；而<strong>IP地址是在系统软件中分配的，可以修改</strong>。</p><p>通过命令“ipconfig/all”，可以查看本机的物理地址和IP地址。如下图所示，就是我的计算机的网卡信息。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\ip.JPG" alt="image"></p><h5 id="3-路由器可以分割广播域，而交换机不能"><a href="#3-路由器可以分割广播域，而交换机不能" class="headerlink" title="3.路由器可以分割广播域，而交换机不能"></a>3.路由器可以分割广播域，而交换机不能</h5><p><strong>交换机只可以分割冲突域</strong>，不可以分割广播域，<strong>而路由器可以分割广播域</strong>。简单的来说，在同一个交换机下连接的设备，IP都在同一个网段，是属于同一个广播域的，如果不在同一网段，则无法进行通信；而路由器可以分配不同的广播域（即不同的网段），而这些不同网段的设备可以不穿过路由而进行相互通信。</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\广播域.JPG" alt="image"></p><blockquote><p>目前，虽然三层或者第三层以上交换机具有VLAN功能，也可以分割广播域，但是各个广播域之间是不可以相互通信的，他们之前如果要通信交流还是需要路由器的支持。</p></blockquote><h5 id="4-路由器有防火墙服务，而交换机没有"><a href="#4-路由器有防火墙服务，而交换机没有" class="headerlink" title="4.路由器有防火墙服务，而交换机没有"></a>4.路由器有防火墙服务，而交换机没有</h5><p>路由器设置的防火墙是运行在网络层的，通过设置特定的规定，允许或者限制传输的数据通过，或者过滤IP封包，禁止不符合规定的封包通过。而交换机不具备防火墙功能，如果只是通过交换机接通外部网络，相当于闭上眼、光着屁股在大街上跑，很不安全！</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\防火墙.JPG" alt="image"><br><strong>注意：数据安全很重要，路由器、交换机的使用都要慎重！注意保密保护工作！</strong></p><h3 id="3-路由器的基本设置"><a href="#3-路由器的基本设置" class="headerlink" title="[3]路由器的基本设置"></a>[3]路由器的基本设置</h3><p> 要实现多台计算机同时上网，主要设置的地方就是路由器，下面以企业中总路由器下的一个无线路由为大家介绍一下路由器的基本设置过程。</p><p> 1.通过<strong>浏览器登录路由器</strong>。如果是<strong>新路由器</strong>，可以查看路由后面贴<strong>标签</strong>出的默认IP和登录账号、密码；如果是正常<strong>使用中的路由器</strong>，登录地址可以查看计算机的网关，如果登录密码修改过，请咨询管理员。</p><blockquote><p> 电脑和路由器相连：一种是通过网线连接，一种是通过无线连接。</p></blockquote><p>电脑和路由器之间通过网线连接的话，你要在路由器上找到<strong>LAN口和WAN口</strong>。这里讲一下，WAN口全称Wide Area Network（广域网），LAN口全称Wide Area Network（局域网）。一般的路由有很多LAN口，一个WAN口。<strong>WAN口插主网线，LAN插电脑与路由连接的网线</strong>。这样电脑就和路由器连接了。</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\LAN.JPG" alt="image"></p><blockquote><p>电脑连接上了路由器，就可以在浏览器上输入路由器的地址进入路由器的设置界面了</p></blockquote><p>2.<strong>WAN口设置</strong>，“<strong>基本设置</strong>”中的“<strong>快速设置</strong>”，（1）如果外网地址没有固定IP，则类型选择动态；（2）如果外网地址有固定IP或者上层还有路由则将分配IP设置到wan口，如下图所示。</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\快速配置.JPG" alt="image"><br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\外网.JPG" alt="image"></p><p>3.<strong>LAN口的设置</strong>，“基本设置”中的“内网设置”，设置IP地址（即内网中网络设备的网关比如设置成192.168.1.1，如果上层有路由是192.168.1.1，则次路由器可以设置成其他网段192.168.x.1）、子网掩码。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\内网.JPG" alt="image"><br><strong><br>4.“DHCP服务器”的设置</strong>，如果让用户<strong>自动获取IP地址</strong>使用，需要使用DHCP服务器，可以限制用户自动获取IP地址的范围，如下图的“起始IP地址”和“结束IP地址”（可以在上网行为管理的IP地址组中看到）。</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\上网行为.JPG" alt="image"><br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\DHCP.JPG" alt="image"></p><p>5.<strong>无线的“基本设置”</strong>，要启用无线的话，勾选启用开关，并为无线网络设置一个名称，设置无线模式为“11b/g/n混合模式”，来兼容三种无线协议：802.11b、802.11g、802.11n。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\无线.JPG" alt="image"></p><p>6.<strong>无线的“安全设置”</strong>，如果需要做MAC地址绑定的安全管控，需要勾选mac地址“启用”：设置“允许”，将允许上网的计算机mac地址添加到mac地址列表；设置“禁用”，将不允许上网的计算机mac地址添加到mac地址列表。设置加密类型为常用的“WPA2-PSK”，并设置密码<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\无线安全.JPG" alt="image"></p><p>7.<strong>“上网行为管理”设置</strong>，设置允许或者不允许上网的时间段；如果需要管理QQ等常用聊天软件，可以在聊天软件高级设置里进行启用，将允许使用QQ等聊天软件的账号添加到例外列表。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\上班.JPG" alt="image"><br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\QQ.JPG" alt="image"></p><p>8.网络安全中设置内外网的“攻击防御”和“MAC地址绑定”（勾选“禁止未绑定IP/MAC的主机通过”，前面已经说过，不再赘述）<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\外网防御.JPG" alt="image"><br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\IPMAC.JPG" alt="image"></p><p>9.<strong>“端口映射”和“域名转发”</strong>，大多在系统集成中会用到，特别是监控设备想要远程访问，需要将设备的通讯端口等进行路由转发，此处需要注意的是，如果跨多层路由的话，每一层路由都是需要转发的。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\端口.JPG" alt="image"><br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\域名.JPG" alt="image"></p><p>10.修改路由器的登录密码。</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\修改密码.JPG" alt="image"></p><hr><h3 id="4-netsh网络配置命令"><a href="#4-netsh网络配置命令" class="headerlink" title="[4]netsh网络配置命令"></a>[4]netsh网络配置命令</h3><p>netsh是Network Shell的缩写，是windows为我们提供的功能强大的网络配置命令行工具。下面用几个常用的“netsh interface ip show”小命令介绍netsh的用法。</p><p>1.<strong>netsh interface ip show address</strong>:显示本机IP地址配置，包括以太网的ip和本地回环ip地址，以太网ip地址就是我们常说的为本机网卡分配的一个地址，这个容易理解；本地还有ip地址，是一种叫做本地回环接口虚接口，在windows系统中都会采用如下图所示的127.0.0.1这个地址，用以提高网络的健壮性。</p><p>2.如果在上一步的基础上想要显示更多信息，可以用命令：<strong>netsh interface ip show config</strong>。</p><p>3.netsh interface ip show dns:显示本机使用的DNS服务器，同样包括以太网和本地回环接口的DNS信息。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\DNS.JPG" alt="image"></p><p>4.<strong>netsh interface ip show ipnet</strong>:显示本IP地址所在的网络到媒体的映射，我们同时可以看到映射类型和所用接口等信息。</p><p>5.<strong>netsh interface ip show wins</strong>:如果设置了wins服务器，可以用此命令查看wins服务器的地址。</p><p>6.还有一个我喜欢用的不属于“<strong>netsh interface ip</strong>”这一系列的小命令，<strong>netsh firewall show state</strong>:<strong>查看本机防火墙的状态</strong>，每当我们公司某一台办公电脑在连接公司的某个系统连接不上的时候，我会用以查看防火墙状态，我们可以看到启用或禁用的功能模块，以及启用情况。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\防火.JPG" alt="image"></p><hr><h3 id="5-安装失败（未签名）"><a href="#5-安装失败（未签名）" class="headerlink" title="[5]安装失败（未签名）"></a>[5]安装失败（未签名）</h3><p>在我们安装驱动的时候，特别是用驱动精灵等驱动软件安装的时候，会出现“安装失败（未签名）”的情况，如何解决？</p><p>方法/步骤</p><p>1.单击开始菜单里的“运行”，或者通过“windows键+R”打开“运行”，在输入框中输入“sigverif”回车<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\签名.JPG" alt="image"></p><p>2.在打开的文件签名验证里点击“高级”按钮</p><p>3.如下图所示找到下载的驱动（如果未解压，需要先解压），然后点击“确认”按钮</p><p>4.切换到“正在记录”选项，选中如下图所示选项，点击“确定”按钮</p><p>5.回到第二步时候的界面，点击“开始”按钮，我们可以看到下图所示列表界面，点击“关闭”即可</p><p>6.从设备管理器安装驱动，右键单击我的电脑（xp）/计算机（win7）/这台电脑（win8），点击“管理”，在“计算机管理”中右侧边栏中单击“设备管理器”，找到我们要安装驱动的这个硬件，右键单击，选择“更新驱动程序”</p><p>7.勾选“从列表或指定位置安装”，点击“下一步”按钮</p><p>8.选择驱动程序解压后的文件夹，点击“下一步”按钮</p><p>9.到安装界面，用户需等待，知道出现安装成功的界面，点击“完成”按钮即可</p><p>10.返回到设备管理器，我们可以看到，此驱动已经安装完成</p><hr><h3 id="6-管理用户网络应用"><a href="#6-管理用户网络应用" class="headerlink" title="[6]管理用户网络应用"></a>[6]管理用户网络应用</h3><p>现在各种网络应用程序纷繁复杂，而p2p软件又是其中最为流行的一种，而且提供了多样化得登陆方式，在此，我们以最常用的QQ为例。</p><p>我们大家都知道，QQ本身支持UDP、HTTP和HTTPS三种登陆方式，而且可以使用代理，意思是说，只要你允许了HTTP协议，QQ就可以登陆。</p><p>现在我们以封锁QQ为例，介绍一下，如何利用路由级的网络防火墙管理用户网络应用。</p><h5 id="1-QQ登陆原理"><a href="#1-QQ登陆原理" class="headerlink" title="1.QQ登陆原理"></a>1.QQ登陆原理</h5><ol><li><p>QQ登录登陆的过程，由向服务器群的8000端口发送UDP数据包，从服务器群的回复中选择一个最快的作为登陆服务器。</p></li><li><p>如果没有服务器回复UDP数据包，则使用TCP80/443端口来进行连接。</p></li><li><p>QQ服务器：</p></li></ol><ul><li>UDP8000端口类18个</li><li>TCPHTTP连接服务器5个</li><li>会员VIP服务器使用HTTPS443连接</li></ul><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\QQ原理.JPG" alt="image"></p><h5 id="2-如何封锁"><a href="#2-如何封锁" class="headerlink" title="2.如何封锁"></a>2.如何封锁</h5><p>1.上面我们知道，QQ可以使用HTTP直接连接，一般不能封锁HTTP协议，所以最好的办法就是封锁它的服务器IP地址，但是QQ还可以使用代理登陆，这种情况我们就得在路由级防火墙中的HTTP检查机制中设置禁止QQ的HTTP连接。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\QQ代理.JPG" alt="image"><br>2.首先，配置用户访问规则，使用计算机集定义目的网络。也就是做好禁止内部客户访问QQ服务器的访问策略。</p><p>3.其次，配置HTTP策略，理由路由器的HTTP深层检查机制，禁止QQ使用HTTP代理。在允许ＱＱ使用HTTP代理的策略上点击右键，选中“配置HTTP”</p><p>4.在弹出的“为规则配置HTTP策略”对话框中，点击“签名”，然后点击“添加”，在弹出的“签名”对话框中，输入名称为“QQ”，指定签名搜索条件为在“请求URL”中搜索“tencent.com”，找到则阻止这个连接</p><p>5.最后，在防火墙策略选项中，点击“应用”来保存修改和更新防火墙策略，此时，QQ已经不能通过代理服务器登录了</p><hr><h3 id="7-映射网络驱动器"><a href="#7-映射网络驱动器" class="headerlink" title="[7]映射网络驱动器"></a>[7]映射网络驱动器</h3><p>映射网络驱动器” 的意思是将局域网中的某个目录（一般是共享的文件夹之类的）映射成本地驱动器号，就是说把网络上其他机器的共享的文件夹映射自己机器上的一个磁盘，这样可以提高访问时间，相当于一个打开共享的快捷方式。</p><p>1.首先，找到这个共享文件夹，我们可以在网络里找到这台设备，或者打开开始菜单的“运行”，输入：“\这台设备的IP地址”，比如此例中的“\192.168.1.52”<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\本机IP.JPG" alt="image"></p><p>2.在打开的共享界面，找到并右键单击要映射驱动器的文件件，选择“映射网络驱动器”<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\映射.JPG" alt="image"></p><p>3.在映射驱动器的界面，选择好驱动器盘符，点击“完成”即可完成设置</p><p>4.打开资源管理器，我们可以看到，已经有了该驱动器，日常使用过程中直接点击打开即可</p><hr><h3 id="8-网络适配器的原理"><a href="#8-网络适配器的原理" class="headerlink" title="[8]网络适配器的原理"></a>[8]网络适配器的原理</h3><p>网络适配器，也就是我们说的网卡，有些维修人员也叫网络接口卡，是计算机和网络电缆之间的物理接口，下面我们根据网络适配器需要完成的任务介绍一下它的工作原理。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\网卡.JPG" alt="image"></p><p>1.为在<strong>计算机使用的数据</strong>（<strong>并行数据</strong>）和<strong>电缆上传输的电信号</strong>（<strong>串行数据</strong>）之间提供数据转换的功能。比如我们用的一个共享打印机，计算机直接连接打印机用的是并行数据，而如果我们通过网络连接别人共享的打印机，就是通过串行数据转换为并行数据来实现。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\打印.JPG" alt="image"><br>2.判断从电缆接收的数据是否为传输给该计算机的数据。</p><p>3.在计算机和电缆之间控制数据流，每块网卡都有一个唯一的标识，我们一般叫做MAC地址，大部分网卡的MAC地址烧录在卡上的ROM芯片中，MAC地址有6段组成，通常表示为12个16进制数。<br>我们可以通过命令提示符查看本机网卡的信息，操作步骤：1、单击开始菜单里的“运行”，在输入框中输入“cmd”，然后回车。2、在命令提示符界面输入“ipconfig /all”命令，回车，我们可以看到以下信息。<br>如图所示的是本机无线网卡的信息，其中前3字节“A6-17-31”表示厂商代码，有IEEE负责分配；后3个字节“30-49-E2”表示网卡序号，由网卡厂商负责。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\MAC地址.JPG" alt="image"></p><hr><h3 id="9-交换机的分类"><a href="#9-交换机的分类" class="headerlink" title="[9]交换机的分类"></a>[9]交换机的分类</h3><p>交换机是网络连接的基础，有了交换机，就可以实现更多电脑的共享上网</p><p>1.广义上来讲，交换机分为两种：<strong>广域交换机</strong>和<strong>局域网交换机</strong>。广域网交换机主要用于电信领域，提供通信用的基础平台，我们平常接触很少；而局域网交换机是我们日常使用最多的，主要应用于日常的局域网络，连接计算机和网络打印机的终端设备<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\交换机.JPG" alt="image"></p><p>2.从传输介质和传输速度上可以分为以太网交换机、快速以太网交换机、千兆以太网交换机、FDDI交换机、ATM交换机和令牌交换机等</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\交换机速率.JPG" alt="image"></p><p>3.从规模应用上可以分为企业级、部门级和工作组交换机<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\交换机企业.JPG" alt="image"></p><h3 id="10-交换机的功能"><a href="#10-交换机的功能" class="headerlink" title="[10]交换机的功能"></a>[10]交换机的功能</h3><h5 id="1-交换机功能"><a href="#1-交换机功能" class="headerlink" title="1.交换机功能"></a>1.交换机功能</h5><p>学习功能，局域网内交换机会了解跟每一个插口相连接的<strong>MAC地址</strong>，并将地址同<strong>相应的端口</strong>映射起来存放在<strong>交换机缓存中的MAC地址表中</strong></p><h5 id="2-转发-过滤功能"><a href="#2-转发-过滤功能" class="headerlink" title="2.转发/过滤功能"></a>2.转发/过滤功能</h5><p>当一个数据帧的目的地址在MAC地址表中有映射时，它被转发到连接目的节点的端口而不是所有端口（如该数据帧为广播/组播帧则转发至所有端口）<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\MAC地址表.JPG" alt="image"></p><h5 id="3-消除回路功能"><a href="#3-消除回路功能" class="headerlink" title="3.消除回路功能"></a>3.消除回路功能</h5><p>当交换机包括一个冗余回路时，以太网交换机通过<strong>生成树协议</strong>避免回路的产生，同时允许存在<strong>后背路径</strong><br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\回路.JPG" alt="image"></p><h5 id="4-兼容功能"><a href="#4-兼容功能" class="headerlink" title="4.兼容功能"></a>4.兼容功能</h5><p>交换机除了能连接两种同类型的网络之外，还可以在不同类型的网路（如以太网和快速以太网）之间起到互联作用。而且现在的交换机没有很严格的类型之分，百兆交换机一般也会加两个千兆口或光纤接入口<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\消除.JPG" alt="image"></p><hr><h3 id="11-交换机的接口种"><a href="#11-交换机的接口种" class="headerlink" title="[11]交换机的接口种"></a>[11]交换机的接口种</h3><h5 id="1-双绞线RJ-45接口-水晶头"><a href="#1-双绞线RJ-45接口-水晶头" class="headerlink" title="1.双绞线RJ-45接口-水晶头"></a>1.双绞线RJ-45接口-水晶头</h5><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\水晶头.JPG" alt="image"></p><h5 id="2-光纤接口"><a href="#2-光纤接口" class="headerlink" title="2.光纤接口"></a>2.光纤接口</h5><p>光纤需要熔接到带插头的尾纤，常见的尾纤插头有SC。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\SC.JPG" alt="image"></p><hr><h3 id="12-路由器的工作原理"><a href="#12-路由器的工作原理" class="headerlink" title="[12]路由器的工作原理"></a>[12]路由器的工作原理</h3><p>路由器，大家都很熟悉了，办公室或者家里凡有两台以上的电脑需要上网的一般都安装了路由器，只有安装了路由器才能实现多台电脑同时上网。我们就了解下路由器的配置原理。</p><h5 id="1-路由器的概念"><a href="#1-路由器的概念" class="headerlink" title="1.路由器的概念"></a>1.路由器的概念</h5><p>1.所谓“路由”，就是把数据从一个地方传送到另一个地方的行为和动作，路由器就是执行这个动作的机器，英文名Router</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\路由.JPG" alt="image"></p><p>2.路由器能将不同网络或网段之间的数据信息进行“翻译”，以使他们能够相互“读”懂对方的数据，从而构建更大的网络。</p><h5 id="2-路由器的典型功能"><a href="#2-路由器的典型功能" class="headerlink" title="2.路由器的典型功能"></a>2.路由器的典型功能</h5><ul><li><strong>数据通道功能</strong></li></ul><p>包括转发决定、背板转发以及输出链路调度等，一般由特定的硬件来完成</p><ul><li><strong>控制功能</strong></li></ul><p>一般用软件来实现，包括与相邻路由器之间的信息交换、系统配置、系统管理等</p><h5 id="3-路由器的主要功能"><a href="#3-路由器的主要功能" class="headerlink" title="3.路由器的主要功能"></a>3.路由器的主要功能</h5><ul><li><strong>网络互连</strong></li></ul><p>路由器支持各种局域网和广域网接口，主要用于互连局域网和广域网，实现不同网络互相通信<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\互连.JPG" alt="image"></p><ul><li><strong>数据处理</strong></li></ul><p>提供包括分组过滤、分组转发、优先级、复用、加密、压缩和防火墙等功能<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\过滤.JPG" alt="image"></p><ul><li><strong>网络管理</strong></li></ul><p>路由器提供包括配置管理、性能管理、容错管理和流量控制管理等功能</p><p><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\管理.JPG" alt="image"></p><h5 id="4-路由器的工作原理"><a href="#4-路由器的工作原理" class="headerlink" title="4.路由器的工作原理"></a>4.路由器的工作原理</h5><ul><li><p>接收来自它连接的某个网络的数据</p></li><li><p>将数据向上传递，并且（必要时）重新组合IP数据报</p></li><li><p>检查IP头部中的目的地址，如果目的地址位于发出数据的那个网络，那么路由器就放下被认为已经达到目的地的数据，因为数据是在目的计算机所在网络上传输</p></li><li><p>如果数据要送往另一个网络，那么路由器就查询路由表，以确定数据要转发到的目的地</p></li><li><p>路由器确定哪个适配器负责接收数据后，就通过相应的软件传递数据，以便通过网络来传送数据</p></li></ul><hr><h3 id="13-初识TCP-IP的分层"><a href="#13-初识TCP-IP的分层" class="headerlink" title="[13]初识TCP/IP的分层"></a>[13]初识TCP/IP的分层</h3><p>大家可能经常使用TCP/IP协议，在进行网络配置或修改IP地址等操作的时候会用到该处，但很少有人去深入挖掘，在此我们简单的了解一下TCP/IP的分层。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\分层.JPG" alt="image"></p><h5 id="1-TCP-IP协议"><a href="#1-TCP-IP协议" class="headerlink" title="1.TCP/IP协议"></a>1.TCP/IP协议</h5><ul><li><p>Internet采用了TCP/IP协议，但这并不是一个单一的协议，我们可能知道，TCP即传输控制协议，IP为网间协议，TCP/IP我们常常描述为互联网协议集。但可能很少人知道TCP/IP也是一种分层模型。它是基于<strong>硬件层次</strong>上的四个概念性层次构成，分别是<strong>网络接口层（数据链路层）、IP层（网络层）、传输层、应用层</strong>。<br><img src="/2017/09/26/Network(1)/C:/Users\可汗金斯\Desktop\介质.JPG" alt="image"></p></li><li><p>网络接口层:也称数据链路层，这是TCP/IP最底层。功能:负责接收IP数据报并发送至选定的网络。</p></li><li><p>IP层:<strong>IP层处理机器之间的通信</strong>。功能:它接收来自传输层的请求，<strong>将带有目的地址的分组发送出去</strong>。将分组封装到数据报中，填入数据报头，使用路由算法以决定是直接将数据报传送至目的主机还是传给路由器，然后把数据报送至相应的网络接口来传送。</p></li><li>传输层:是提供应用层之间的通信，即端到端的通信。功能:<strong>管理信息流，提供可靠的传输服务</strong>，以确保数据无差错的地按序到达。</li></ul><h5 id="2-TCP-IP模型的分界线"><a href="#2-TCP-IP模型的分界线" class="headerlink" title="2.TCP/IP模型的分界线"></a>2.TCP/IP模型的分界线</h5><p>协议地址分界线:以区分高层和低层的寻址，<strong>高层寻址使用IP地址</strong>，<strong>低层寻址使用物理地址</strong>。应用程序IP层之上的协议软件只使用IP地址，而网络接口层处理物理地址。</p><ul><li>操作系统分界线:以区分系统与应用程序。<strong>在传输层和应用层之间。</strong></li><li><h5 id="3-复用与分解"><a href="#3-复用与分解" class="headerlink" title="3.复用与分解"></a>3.复用与分解</h5></li></ul><p>发送报文时，发送方在报文中加和了报文类型、选用协议等附加信息。所有的报文以帧的形式在网络中复用传送，形成一个分组流。在接收方收到分组时，参考附加信息对接收到的分组进行分解。</p><hr><p>参考网址：<a href="https://jingyan.baidu.com/season/38734" target="_blank" rel="noopener">https://jingyan.baidu.com/season/38734</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/26/Network(1)/">http://jaymo666.github.io/2017/09/26/Network(1)/</a></p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Threejs中的各种光源（Threejs第三章）</title>
      <link href="/2017/09/22/Threejs3/"/>
      <content type="html"><![CDATA[<p>本章你将了解<br>1、怎么使用光源<br>2、以及各种光源的区别，这些区别会通过实例对比来给大家讲清楚。这种对比方式应该是讲解最好的思路。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h4 id="2-6-环境光和方向光"><a href="#2-6-环境光和方向光" class="headerlink" title="2.6 环境光和方向光"></a>2.6 环境光和方向光</h4><p>接下来，我们来看看多种光源同时存在于场景之中，对物体颜色的影响。</p><p>当环境光和方向光同时存在的时候，会出现怎么样的情况呢？可以把这种情况想成两种光源同时作用于物体，它产生的情况，和每种光源分别作用于物体，然后将两者的结果相加，是一样的效果。<br>例如：<br><code>0x00FF00 + 0xFF0000 = 0xFFFF00</code>，oxFFFF00 就是黄色。</p><h4 id="2-7-点光源"><a href="#2-7-点光源" class="headerlink" title="2.7 点光源"></a>2.7 点光源</h4><p>点光源是理想化为质点的向四面八方发出光线的光源。点光源是抽象化了的物理概念，为了把物理问题的研究简单化。就像平时说的光滑平面，质点，无空气阻力一样，点光源在现实中也是不存在的，指的是从一个点向周围空间均匀发光的光源。</p><p>点光源的特点是发光部分为一个小圆面，近似一个点</p><p>下面的例子介绍了怎么使用点光源：</p><pre><code>light = new THREE.PointLight(0xFF0000);light.position.set(0, 0,50);scene.add(light);</code></pre><p>效果如下图：</p><p><img src="http://www.hewebgl.com/attached/image/20130517/20130517101725_304.png" alt=""></p><h4 id="2-8-混合光源"><a href="#2-8-混合光源" class="headerlink" title="2.8 混合光源"></a>2.8 混合光源</h4><p>将方向光和点光源混合使用。</p><p>效果如图所示：<br><img src="http://www.hewebgl.com/attached/image/20130517/20130517102228_302.png" alt=""></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/22/Threejs3/">http://jaymo666.github.io/2017/09/22/Threejs3/</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> 3D </tag>
            
            <tag> threejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Threejs中的各种光源（Threejs第三章）</title>
      <link href="/2017/09/22/Threejs3(1)/"/>
      <content type="html"><![CDATA[<p>本章你将了解<br>1、怎么使用光源<br>2、以及各种光源的区别，这些区别会通过实例对比来给大家讲清楚。这种对比方式应该是讲解最好的思路。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h4 id="2-6-环境光和方向光"><a href="#2-6-环境光和方向光" class="headerlink" title="2.6 环境光和方向光"></a>2.6 环境光和方向光</h4><p>接下来，我们来看看多种光源同时存在于场景之中，对物体颜色的影响。</p><p>当环境光和方向光同时存在的时候，会出现怎么样的情况呢？可以把这种情况想成两种光源同时作用于物体，它产生的情况，和每种光源分别作用于物体，然后将两者的结果相加，是一样的效果。<br>例如：<br><code>0x00FF00 + 0xFF0000 = 0xFFFF00</code>，oxFFFF00 就是黄色。</p><h4 id="2-7-点光源"><a href="#2-7-点光源" class="headerlink" title="2.7 点光源"></a>2.7 点光源</h4><p>点光源是理想化为质点的向四面八方发出光线的光源。点光源是抽象化了的物理概念，为了把物理问题的研究简单化。就像平时说的光滑平面，质点，无空气阻力一样，点光源在现实中也是不存在的，指的是从一个点向周围空间均匀发光的光源。</p><p>点光源的特点是发光部分为一个小圆面，近似一个点</p><p>下面的例子介绍了怎么使用点光源：</p><pre><code>light = new THREE.PointLight(0xFF0000);light.position.set(0, 0,50);scene.add(light);</code></pre><p>效果如下图：</p><p><img src="http://www.hewebgl.com/attached/image/20130517/20130517101725_304.png" alt=""></p><h4 id="2-8-混合光源"><a href="#2-8-混合光源" class="headerlink" title="2.8 混合光源"></a>2.8 混合光源</h4><p>将方向光和点光源混合使用。</p><p>效果如图所示：<br><img src="http://www.hewebgl.com/attached/image/20130517/20130517102228_302.png" alt=""></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/22/Threejs3(1)/">http://jaymo666.github.io/2017/09/22/Threejs3(1)/</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> 3D </tag>
            
            <tag> threejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Threejs中的各种光源（Threejs第二章）</title>
      <link href="/2017/09/22/Threejs2/"/>
      <content type="html"><![CDATA[<p>作为3D技术的发展趋势，浏览器端3D技术越来越被一些技术公司重视。由此，Threejs非常注重3D渲染效果的真实性，对渲染真实性来说，使用光源是比不可少的技巧。Threejs，在光源方面提供了多种光源供选择。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="1-Threejs中的各种光源"><a href="#1-Threejs中的各种光源" class="headerlink" title="1.Threejs中的各种光源"></a>1.Threejs中的各种光源</h3><h4 id="1-1光源基类"><a href="#1-1光源基类" class="headerlink" title="1.1光源基类"></a>1.1光源基类</h4><p>在Threejs中，光源用Light表示，它是所有光源的基类。它的构造函数是：<br><strong>THREE.Light ( hex )</strong></p><p>它有一个参数hex，接受一个16进制的颜色值。例如要定义一种红色的光源，我们可以这样来定义：</p><pre><code>Var redLight = new THREE.Light(0xFF0000);</code></pre><h4 id="1-2由基类派生出来的其他种类光源"><a href="#1-2由基类派生出来的其他种类光源" class="headerlink" title="1.2由基类派生出来的其他种类光源"></a>1.2由基类派生出来的其他种类光源</h4><p><strong>THREE.Light只是其他所有光源的基类</strong>，要让光源除了具有颜色的特性之外，我们需要其他光源。看看，下面的类图，是目前光源的继承结构。<br><img src="http://www.hewebgl.com/attached/image/20130515/20130515163339_12.jpg" alt=""></p><p>环境光是经过多次反射而来的光称为环境光，无法确定其最初的方向。环境光是一种无处不在的光。环境光源放出的光线被认为来自任何方向。因此，当你仅为场景指定环境光时，所有的物体无论法向量如何，都将表现为同样的明暗程度。 （这是因为，反射光可以从各个方向进入您的眼睛）</p><h5 id="1-2-1-环境光"><a href="#1-2-1-环境光" class="headerlink" title="1.2.1 环境光"></a>1.2.1 <strong>环境光</strong></h5><p>用<code>THREE.AmbientLight</code>来表示，它的构造函数如下所示：<br><strong>    THREE.AmbientLight( hex )</strong></p><p>它仍然接受一个16进制的颜色值，作为光源的颜色。环境光将照射场景中的所有物体，让物体显示出某种颜色。环境光的使用例子如下所示：</p><pre><code>var light = new THREE.AmbientLight( 0xff0000 );scene.add( light );</code></pre><p>只需要将光源加入场景，场景就能够通过光源渲染出好的效果来了。</p><h5 id="1-2-2点光源"><a href="#1-2-2点光源" class="headerlink" title="1.2.2点光源"></a>1.2.2<strong>点光源</strong></h5><p>由这种光源放出的光线来自同一点，且方向辐射自四面八方。例如蜡烛放出的光，萤火虫放出的光。</p><p>点光源用PointLight来表示，它的构造函数如下所示：</p><p>PointLight( color, intensity, distance )</p><p>这个类的参数稍微复杂一些，我们花点时间来解释一下：</p><ul><li><p>Color：光的颜色</p></li><li><p>Intensity：光的强度，默认是1.0,就是说是100%强度的灯光，</p></li><li><p>distance：光的距离，从光源所在的位置，经过distance这段距离之后，光的强度将从Intensity衰减为0。 默认情况下，这个值为0.0，表示光源强度不衰减。</p></li></ul><p>#####1.2.3<strong>聚光灯</strong><br>这种光源的光线从一个锥体中射出，在被照射的物体上产生聚光的效果。使用这种光源需要指定光的射出方向以及锥体的顶角α。聚光灯示例如图所示：<br><img src="http://www.hewebgl.com/attached/image/20130516/20130516165745_434.jpg" alt=""></p><p>聚光灯的构造函数是：<br><strong><br>THREE.SpotLight( hex, intensity, distance, angle, exponent )</strong></p><p>函数的参数如下所示：</p><ul><li><p>Hex：聚光灯发出的颜色，如0xFFFFFF</p></li><li><p>Intensity：光源的强度，默认是1.0，如果为0.5，则强度是一半，意思是颜色会淡一些。和上面点光源一样。</p></li><li><p>Distance：光线的强度，从最大值衰减到0，需要的距离。 默认为0，表示光不衰减，如果非0，则表示从光源的位置到Distance的距离，光都在线性衰减。到离光源距离Distance时，光源强度为0.</p></li></ul><p>Angle：聚光灯着色的角度，用弧度作为单位，这个角度是和光源的方向形成的角度。</p><p>exponent：光源模型中，衰减的一个参数，越大衰减约快。</p><h3 id="2-材质与光源的关系"><a href="#2-材质与光源的关系" class="headerlink" title="2.材质与光源的关系"></a>2.材质与光源的关系</h3><p>材质与光源有什么关系？什么是材质？</p><h4 id="2-1-材质的真相"><a href="#2-1-材质的真相" class="headerlink" title="2.1 材质的真相"></a>2.1 材质的真相</h4><blockquote><p>材质就是物体的质地。材质就是材料和质感的完美结合。</p></blockquote><p>在渲染程序中，它是表面<strong>各可视属性的结合</strong>，这些可视属性是指表面的色彩、纹理、光滑度、透明度、反射率、折射率、发光度等。正是有了这些属性，才能让我们识别三维中的模型是什么做成的，也正是有了这些属性，我们计算机三维的虚拟世界才会和真实世界一样缤纷多彩。</p><p>这就是材质的真相吗？答案是否定的。不要奇怪，我们必须仔细分析产生不同材质的原因，才能让我们更好的把握质感。那么，材质的真相到底是什么呢？仍然是光，离开光材质是无法体现的。　</p><p>首先，我们来看一些例子。这些例子是一系类的，掌握一个，我们就印下了一个脚印.</p><h5 id="2-2-脚印一：不带任何光源的物体"><a href="#2-2-脚印一：不带任何光源的物体" class="headerlink" title="2.2  脚印一：不带任何光源的物体"></a>2.2  脚印一：不带任何光源的物体</h5><p>我们首先在屏幕上画一个物体，不带任何的光源，定义物体的颜色为黑色，其值为0x000000，定义材质如下：</p><p>var material = new THREE.MeshLambertMaterial( { color:0x000000} ); // 这是兰伯特材质，材质中的一种</p><p>先看看最终的运行截图，如下所示：<br><img src="http://www.hewebgl.com/attached/image/20130515/20130515170232_15.png" alt=""></p><p>由这幅图得出结论，当没有任何光源的时候，最终的颜色将是材质的颜色。但是这个结论目前来说，并没有依据。<br><strong><br>结论：当没有任何光源的时候，最终的颜色将是黑色，无论材质是什么颜色。</strong></p><h4 id="2-3-脚印二：兰伯特材质与光源"><a href="#2-3-脚印二：兰伯特材质与光源" class="headerlink" title="2.3 脚印二：兰伯特材质与光源"></a>2.3 脚印二：兰伯特材质与光源</h4><p>最常见的材质之一就是Lambert材质，这是在灰暗的或不光滑的表面产生<strong>均匀散射</strong>而形成的材质类型。比如一张纸就是Lambert表面。 首先它粗糙不均匀，不会产生镜面效果。我们在阅读书籍的时候，没有发现书上一处亮，一处不亮吧，它非常均匀，这就是兰伯特材质。</p><p>有的朋友觉得纸不粗糙啊，你怎么说它粗糙吗？人的肉眼是不好分辨出来，它粗不粗糙的。</p><p>Lambert材质表面会在所有方向上均匀地散射灯光，这就会使颜色看上去比较均匀。想想一张纸，无论什么颜色，是不是纸的各个部分颜色都比较均匀呢。</p><p>Lambert材质的图例如下所示：<br><img src="http://www.hewebgl.com/attached/image/20130515/20130515170358_794.jpg" alt=""><br>Lambert材质会受环境光的影响，呈现环境光的颜色，与材质本身颜色关系不大。</p><p>我们现在来做一个例子</p><p>例子：红色环境光照射下的长方体，它用的是淡红色(0x880000)的兰伯特材质。效果如下图：</p><p><img src="http://www.hewebgl.com/attached/image/20130515/20130515170419_688.png" alt=""></p><p>最后整个效果中，长方体呈现的是红色。我们要说的是，长方体显示红色，是因为<strong>长方体反射了红色的光</strong>，长方体本身的颜色是0x880000，光源的颜色是0xFF0000，红色的光照在物体上，物体反射了红色的光，所以呈现红色。<br><strong><br>我们现在一直在使用环境光，从环境光的构造函数来看，它只有颜色，其位置对场景中的物体并没有影响，因为他是均匀的反射到物体的表面的。</strong></p><h4 id="2-4-脚印三：环境光对物体的影响"><a href="#2-4-脚印三：环境光对物体的影响" class="headerlink" title="2.4 脚印三：环境光对物体的影响"></a>2.4 脚印三：环境光对物体的影响</h4><p>环境光就是在场景中无处不在的光，它对物体的影响是均匀的，也就是无论你从物体的那个角度观察，物体的颜色都是一样的，这就是伟大的环境光。</p><p><strong>你可以把环境光放在任何一个位置，它的光线是不会衰减的，是永恒的某个强度的一种光源。</strong></p><h4 id="2-5脚印四：方向光（平行光）"><a href="#2-5脚印四：方向光（平行光）" class="headerlink" title="2.5脚印四：方向光（平行光）"></a>2.5脚印四：方向光（平行光）</h4><p>平行光又称为方向光（Directional Light），是一组没有衰减的平行的光线，类似太阳光的效果。</p><p>方向光的模型如图：<br><img src="http://www.hewebgl.com/attached/image/20130516/20130516171702_524.jpg" alt=""><br>方向光的构造函数如下所示：</p><p><strong>THREE.DirectionalLight = function ( hex, intensity )</strong></p><p>其参数如下：</p><ul><li><p>Hex：关系的颜色，用16进制表示</p></li><li><p>Intensity：光线的强度，默认为1。因为RGB的三个值均在0~255之间，不能反映出光照的强度变化，光照越强，物体表面就更明亮。它的取值范围是0到1。如果为0，表示光线基本没什么作用，那么物体就会显示为黑色。呆会你可以尝试来更改这个参数，看看实际的效果</p></li></ul><p>我们来看一个方向光的例子：</p><p>一个红色的方向光，把它放在（0,0,1）的位置，密度为1，照射在一个长方体中。效果如下图所示：</p><p><img src="http://www.hewebgl.com/attached/image/20130516/20130516172030_538.png" alt=""></p><p>平行光有一个方向，它的方向是如何决定的呢？<br>方向由<strong>位置</strong>和<strong>原点</strong>（0,0,0）来决定，方向光只与方向有关，与离物体的远近无关。分别将平行光放到（0,0,100），（0,0,50），（0,0,25），（0,0,1），渲染的结果还是红色和黑色，见下图，<strong>颜色的深浅不与离物体的距离相关。</strong></p><p>但是它与方向有关，如果，我们灯光的位置改为（1,0,0.5），那么效果如图所示：<br><img src="http://www.hewebgl.com/attached/image/20130516/20130516172333_384.png" alt=""></p><p>未完待续</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/22/Threejs2/">http://jaymo666.github.io/2017/09/22/Threejs2/</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> 3D </tag>
            
            <tag> threejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Threejs中的各种光源（Threejs第二章）</title>
      <link href="/2017/09/22/Threejs2(1)/"/>
      <content type="html"><![CDATA[<p>作为3D技术的发展趋势，浏览器端3D技术越来越被一些技术公司重视。由此，Threejs非常注重3D渲染效果的真实性，对渲染真实性来说，使用光源是比不可少的技巧。Threejs，在光源方面提供了多种光源供选择。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="1-Threejs中的各种光源"><a href="#1-Threejs中的各种光源" class="headerlink" title="1.Threejs中的各种光源"></a>1.Threejs中的各种光源</h3><h4 id="1-1光源基类"><a href="#1-1光源基类" class="headerlink" title="1.1光源基类"></a>1.1光源基类</h4><p>在Threejs中，光源用Light表示，它是所有光源的基类。它的构造函数是：<br><strong>THREE.Light ( hex )</strong></p><p>它有一个参数hex，接受一个16进制的颜色值。例如要定义一种红色的光源，我们可以这样来定义：</p><pre><code>Var redLight = new THREE.Light(0xFF0000);</code></pre><h4 id="1-2由基类派生出来的其他种类光源"><a href="#1-2由基类派生出来的其他种类光源" class="headerlink" title="1.2由基类派生出来的其他种类光源"></a>1.2由基类派生出来的其他种类光源</h4><p><strong>THREE.Light只是其他所有光源的基类</strong>，要让光源除了具有颜色的特性之外，我们需要其他光源。看看，下面的类图，是目前光源的继承结构。<br><img src="http://www.hewebgl.com/attached/image/20130515/20130515163339_12.jpg" alt=""></p><p>环境光是经过多次反射而来的光称为环境光，无法确定其最初的方向。环境光是一种无处不在的光。环境光源放出的光线被认为来自任何方向。因此，当你仅为场景指定环境光时，所有的物体无论法向量如何，都将表现为同样的明暗程度。 （这是因为，反射光可以从各个方向进入您的眼睛）</p><h5 id="1-2-1-环境光"><a href="#1-2-1-环境光" class="headerlink" title="1.2.1 环境光"></a>1.2.1 <strong>环境光</strong></h5><p>用<code>THREE.AmbientLight</code>来表示，它的构造函数如下所示：<br><strong>    THREE.AmbientLight( hex )</strong></p><p>它仍然接受一个16进制的颜色值，作为光源的颜色。环境光将照射场景中的所有物体，让物体显示出某种颜色。环境光的使用例子如下所示：</p><pre><code>var light = new THREE.AmbientLight( 0xff0000 );scene.add( light );</code></pre><p>只需要将光源加入场景，场景就能够通过光源渲染出好的效果来了。</p><h5 id="1-2-2点光源"><a href="#1-2-2点光源" class="headerlink" title="1.2.2点光源"></a>1.2.2<strong>点光源</strong></h5><p>由这种光源放出的光线来自同一点，且方向辐射自四面八方。例如蜡烛放出的光，萤火虫放出的光。</p><p>点光源用PointLight来表示，它的构造函数如下所示：</p><p>PointLight( color, intensity, distance )</p><p>这个类的参数稍微复杂一些，我们花点时间来解释一下：</p><ul><li><p>Color：光的颜色</p></li><li><p>Intensity：光的强度，默认是1.0,就是说是100%强度的灯光，</p></li><li><p>distance：光的距离，从光源所在的位置，经过distance这段距离之后，光的强度将从Intensity衰减为0。 默认情况下，这个值为0.0，表示光源强度不衰减。</p></li></ul><p>#####1.2.3<strong>聚光灯</strong><br>这种光源的光线从一个锥体中射出，在被照射的物体上产生聚光的效果。使用这种光源需要指定光的射出方向以及锥体的顶角α。聚光灯示例如图所示：<br><img src="http://www.hewebgl.com/attached/image/20130516/20130516165745_434.jpg" alt=""></p><p>聚光灯的构造函数是：<br><strong><br>THREE.SpotLight( hex, intensity, distance, angle, exponent )</strong></p><p>函数的参数如下所示：</p><ul><li><p>Hex：聚光灯发出的颜色，如0xFFFFFF</p></li><li><p>Intensity：光源的强度，默认是1.0，如果为0.5，则强度是一半，意思是颜色会淡一些。和上面点光源一样。</p></li><li><p>Distance：光线的强度，从最大值衰减到0，需要的距离。 默认为0，表示光不衰减，如果非0，则表示从光源的位置到Distance的距离，光都在线性衰减。到离光源距离Distance时，光源强度为0.</p></li></ul><p>Angle：聚光灯着色的角度，用弧度作为单位，这个角度是和光源的方向形成的角度。</p><p>exponent：光源模型中，衰减的一个参数，越大衰减约快。</p><h3 id="2-材质与光源的关系"><a href="#2-材质与光源的关系" class="headerlink" title="2.材质与光源的关系"></a>2.材质与光源的关系</h3><p>材质与光源有什么关系？什么是材质？</p><h4 id="2-1-材质的真相"><a href="#2-1-材质的真相" class="headerlink" title="2.1 材质的真相"></a>2.1 材质的真相</h4><blockquote><p>材质就是物体的质地。材质就是材料和质感的完美结合。</p></blockquote><p>在渲染程序中，它是表面<strong>各可视属性的结合</strong>，这些可视属性是指表面的色彩、纹理、光滑度、透明度、反射率、折射率、发光度等。正是有了这些属性，才能让我们识别三维中的模型是什么做成的，也正是有了这些属性，我们计算机三维的虚拟世界才会和真实世界一样缤纷多彩。</p><p>这就是材质的真相吗？答案是否定的。不要奇怪，我们必须仔细分析产生不同材质的原因，才能让我们更好的把握质感。那么，材质的真相到底是什么呢？仍然是光，离开光材质是无法体现的。　</p><p>首先，我们来看一些例子。这些例子是一系类的，掌握一个，我们就印下了一个脚印.</p><h5 id="2-2-脚印一：不带任何光源的物体"><a href="#2-2-脚印一：不带任何光源的物体" class="headerlink" title="2.2  脚印一：不带任何光源的物体"></a>2.2  脚印一：不带任何光源的物体</h5><p>我们首先在屏幕上画一个物体，不带任何的光源，定义物体的颜色为黑色，其值为0x000000，定义材质如下：</p><p>var material = new THREE.MeshLambertMaterial( { color:0x000000} ); // 这是兰伯特材质，材质中的一种</p><p>先看看最终的运行截图，如下所示：<br><img src="http://www.hewebgl.com/attached/image/20130515/20130515170232_15.png" alt=""></p><p>由这幅图得出结论，当没有任何光源的时候，最终的颜色将是材质的颜色。但是这个结论目前来说，并没有依据。<br><strong><br>结论：当没有任何光源的时候，最终的颜色将是黑色，无论材质是什么颜色。</strong></p><h4 id="2-3-脚印二：兰伯特材质与光源"><a href="#2-3-脚印二：兰伯特材质与光源" class="headerlink" title="2.3 脚印二：兰伯特材质与光源"></a>2.3 脚印二：兰伯特材质与光源</h4><p>最常见的材质之一就是Lambert材质，这是在灰暗的或不光滑的表面产生<strong>均匀散射</strong>而形成的材质类型。比如一张纸就是Lambert表面。 首先它粗糙不均匀，不会产生镜面效果。我们在阅读书籍的时候，没有发现书上一处亮，一处不亮吧，它非常均匀，这就是兰伯特材质。</p><p>有的朋友觉得纸不粗糙啊，你怎么说它粗糙吗？人的肉眼是不好分辨出来，它粗不粗糙的。</p><p>Lambert材质表面会在所有方向上均匀地散射灯光，这就会使颜色看上去比较均匀。想想一张纸，无论什么颜色，是不是纸的各个部分颜色都比较均匀呢。</p><p>Lambert材质的图例如下所示：<br><img src="http://www.hewebgl.com/attached/image/20130515/20130515170358_794.jpg" alt=""><br>Lambert材质会受环境光的影响，呈现环境光的颜色，与材质本身颜色关系不大。</p><p>我们现在来做一个例子</p><p>例子：红色环境光照射下的长方体，它用的是淡红色(0x880000)的兰伯特材质。效果如下图：</p><p><img src="http://www.hewebgl.com/attached/image/20130515/20130515170419_688.png" alt=""></p><p>最后整个效果中，长方体呈现的是红色。我们要说的是，长方体显示红色，是因为<strong>长方体反射了红色的光</strong>，长方体本身的颜色是0x880000，光源的颜色是0xFF0000，红色的光照在物体上，物体反射了红色的光，所以呈现红色。<br><strong><br>我们现在一直在使用环境光，从环境光的构造函数来看，它只有颜色，其位置对场景中的物体并没有影响，因为他是均匀的反射到物体的表面的。</strong></p><h4 id="2-4-脚印三：环境光对物体的影响"><a href="#2-4-脚印三：环境光对物体的影响" class="headerlink" title="2.4 脚印三：环境光对物体的影响"></a>2.4 脚印三：环境光对物体的影响</h4><p>环境光就是在场景中无处不在的光，它对物体的影响是均匀的，也就是无论你从物体的那个角度观察，物体的颜色都是一样的，这就是伟大的环境光。</p><p><strong>你可以把环境光放在任何一个位置，它的光线是不会衰减的，是永恒的某个强度的一种光源。</strong></p><h4 id="2-5脚印四：方向光（平行光）"><a href="#2-5脚印四：方向光（平行光）" class="headerlink" title="2.5脚印四：方向光（平行光）"></a>2.5脚印四：方向光（平行光）</h4><p>平行光又称为方向光（Directional Light），是一组没有衰减的平行的光线，类似太阳光的效果。</p><p>方向光的模型如图：<br><img src="http://www.hewebgl.com/attached/image/20130516/20130516171702_524.jpg" alt=""><br>方向光的构造函数如下所示：</p><p><strong>THREE.DirectionalLight = function ( hex, intensity )</strong></p><p>其参数如下：</p><ul><li><p>Hex：关系的颜色，用16进制表示</p></li><li><p>Intensity：光线的强度，默认为1。因为RGB的三个值均在0~255之间，不能反映出光照的强度变化，光照越强，物体表面就更明亮。它的取值范围是0到1。如果为0，表示光线基本没什么作用，那么物体就会显示为黑色。呆会你可以尝试来更改这个参数，看看实际的效果</p></li></ul><p>我们来看一个方向光的例子：</p><p>一个红色的方向光，把它放在（0,0,1）的位置，密度为1，照射在一个长方体中。效果如下图所示：</p><p><img src="http://www.hewebgl.com/attached/image/20130516/20130516172030_538.png" alt=""></p><p>平行光有一个方向，它的方向是如何决定的呢？<br>方向由<strong>位置</strong>和<strong>原点</strong>（0,0,0）来决定，方向光只与方向有关，与离物体的远近无关。分别将平行光放到（0,0,100），（0,0,50），（0,0,25），（0,0,1），渲染的结果还是红色和黑色，见下图，<strong>颜色的深浅不与离物体的距离相关。</strong></p><p>但是它与方向有关，如果，我们灯光的位置改为（1,0,0.5），那么效果如图所示：<br><img src="http://www.hewebgl.com/attached/image/20130516/20130516172333_384.png" alt=""></p><p>未完待续</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/22/Threejs2(1)/">http://jaymo666.github.io/2017/09/22/Threejs2(1)/</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> 3D </tag>
            
            <tag> threejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue进阶之路——深入响应式原理</title>
      <link href="/2017/09/21/Vue%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86(1)/"/>
      <content type="html"><![CDATA[<p>Vue 最显著的特性之一便是不太引人注意的响应式系统<br><a id="more"></a></p><blockquote><p>Vue 最显著的特性之一便是不太引人注意的<strong>响应式系统</strong>(reactivity system)。<strong>模型层</strong>(model)只是普通 JavaScript <strong>对象</strong>，修改它则更新<strong>视图</strong>(view)。</p></blockquote><h2 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h2><p>把一个普通 <code>JavaScript</code> 对象传给 Vue 实例的 <code>data</code>选项，Vue 将<strong>遍历</strong>此对象所有的属性，并使用 <code>Object.defineProperty</code> 把这些属性全部转为<code>getter</code>/<code>setter</code>。</p><p>每个组件实例都有相应的 <code>watcher</code> 实例对象，它会在组件渲染的过程中<strong>把属性记录为依赖</strong>，之后当依赖项的 <code>setter</code>被调用时，会通知 <code>watcher</code> 重新计算，从而致使它关联的组件得以更新。</p><p><img src="https://cn.vuejs.org/images/data.png" alt=""></p><h2 id="变化检测问题"><a href="#变化检测问题" class="headerlink" title="变化检测问题"></a>变化检测问题</h2><p>受现代 JavaScript 的限制,<strong>Vue 不能检测到对象属性的添加或删除</strong>。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以<strong>属性必须在 data 对象上存在</strong>才能让 Vue 转换它，这样才能让它是响应的。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">  a:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// `vm.a` 是响应的</span><br><span class="line">vm.b = 2</span><br><span class="line">// `vm.b` 是非响应的</span><br></pre></td></tr></table></figure></p><p>Vue 不允许在已经创建的实例上动态添加新的<strong>根级响应式属性</strong>(root-level reactive property)。然而它可以使用 <code>Vue.set(object, key, value)</code>方法将响应属性添加到嵌套的对象上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.someObject, &apos;b&apos;, 2)</span><br></pre></td></tr></table></figure><p>您还可以使用<code>vm.$set</code>实例方法，这也是全局 Vue.set 方法的<code>别名</code>：</p><p>有时你想<strong>向已有对象上添加一些属性</strong>，例如使用 <code>Object.assign()</code>或 <code>_.extend()</code> 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以<strong>创建一个新的对象</strong>，让它包含原对象的属性和新的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 代替 `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span><br><span class="line">this.someObject = Object.assign(&#123;&#125;, this.someObject, &#123; a: 1, b: 2 &#125;)</span><br></pre></td></tr></table></figure></p><h2 id="声明响应式属性"><a href="#声明响应式属性" class="headerlink" title="声明响应式属性"></a>声明响应式属性</h2><p>由于 Vue 不允许动态添加根级响应式属性，所以你必须<strong>在初始化实例前声明根级响应式属性，哪怕只是一个空值:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 声明 message 为一个空值字符串</span><br><span class="line">    message: &apos;&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &apos;&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">// 之后设置 `message` </span><br><span class="line">vm.message = &apos;Hello!&apos;</span><br></pre></td></tr></table></figure><p>如果你在 data 选项中<strong>未声明 message</strong>，Vue 将<strong>警告</strong>你渲染函数在试图访问的属性不存在。</p><p><code>data</code>对象就像组件状态的概要，提前声明所有的响应式属性，可以让组件代码<strong>在以后重新阅读</strong>或<strong>其他开发人员阅读时更易于被理解</strong>。</p><h2 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h2><p>可能你还没有注意到，Vue 异步执行 DOM 更新。只要观察到<strong>数据变化</strong>，Vue 将<strong>开启一个队列</strong>，并缓冲在同一事件循环中发生的所有数据改变。<strong>如果同一个 watcher 被多次触发，只会一次推入到队列中。</strong>这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际（已去重的）工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和<code>MutationObserver</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code> 代替。</p><p>例如，当你设置 <code>vm.someData = &#39;new value&#39;</code>，<strong>该组件不会立即重新渲染。</strong>当刷新队列时，组件会在事件循环队列清空时的下一个“tick”更新。多数情况我们不需要关心这个过程，但是如果你想在 DOM 状态更新后做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员沿着“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们确实要这么做。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code>。这样回调函数在 DOM 更新完成后就会调用。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#example&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;123&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.message = &apos;new message&apos; // 更改数据</span><br><span class="line">vm.$el.textContent === &apos;new message&apos; // false</span><br><span class="line">Vue.nextTick(function () &#123;</span><br><span class="line">  vm.$el.textContent === &apos;new message&apos; // true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在组件内使用 <code>vm.$nextTick()</code> 实例方法特别方便，因为它不需要全局<code>Vue</code>，并且回调函数中的 <code>this</code> 将自动绑定到当前的 Vue 实例上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;example&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &apos;没有更新&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateMessage: function () &#123;</span><br><span class="line">      this.message = &apos;更新完成&apos;</span><br><span class="line">      console.log(this.$el.textContent) // =&gt; &apos;没有更新&apos;</span><br><span class="line">      this.$nextTick(function () &#123;</span><br><span class="line">        console.log(this.$el.textContent) // =&gt; &apos;更新完成&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/21/Vue进阶之路——深入响应式原理(1)/">http://jaymo666.github.io/2017/09/21/Vue进阶之路——深入响应式原理(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue进阶之路——深入响应式原理</title>
      <link href="/2017/09/21/Vue%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <content type="html"><![CDATA[<p>Vue 最显著的特性之一便是不太引人注意的响应式系统<br><a id="more"></a></p><blockquote><p>Vue 最显著的特性之一便是不太引人注意的<strong>响应式系统</strong>(reactivity system)。<strong>模型层</strong>(model)只是普通 JavaScript <strong>对象</strong>，修改它则更新<strong>视图</strong>(view)。</p></blockquote><h2 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h2><p>把一个普通 <code>JavaScript</code> 对象传给 Vue 实例的 <code>data</code>选项，Vue 将<strong>遍历</strong>此对象所有的属性，并使用 <code>Object.defineProperty</code> 把这些属性全部转为<code>getter</code>/<code>setter</code>。</p><p>每个组件实例都有相应的 <code>watcher</code> 实例对象，它会在组件渲染的过程中<strong>把属性记录为依赖</strong>，之后当依赖项的 <code>setter</code>被调用时，会通知 <code>watcher</code> 重新计算，从而致使它关联的组件得以更新。</p><p><img src="https://cn.vuejs.org/images/data.png" alt=""></p><h2 id="变化检测问题"><a href="#变化检测问题" class="headerlink" title="变化检测问题"></a>变化检测问题</h2><p>受现代 JavaScript 的限制,<strong>Vue 不能检测到对象属性的添加或删除</strong>。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以<strong>属性必须在 data 对象上存在</strong>才能让 Vue 转换它，这样才能让它是响应的。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">  a:1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// `vm.a` 是响应的</span><br><span class="line">vm.b = 2</span><br><span class="line">// `vm.b` 是非响应的</span><br></pre></td></tr></table></figure></p><p>Vue 不允许在已经创建的实例上动态添加新的<strong>根级响应式属性</strong>(root-level reactive property)。然而它可以使用 <code>Vue.set(object, key, value)</code>方法将响应属性添加到嵌套的对象上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.someObject, &apos;b&apos;, 2)</span><br></pre></td></tr></table></figure><p>您还可以使用<code>vm.$set</code>实例方法，这也是全局 Vue.set 方法的<code>别名</code>：</p><p>有时你想<strong>向已有对象上添加一些属性</strong>，例如使用 <code>Object.assign()</code>或 <code>_.extend()</code> 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以<strong>创建一个新的对象</strong>，让它包含原对象的属性和新的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 代替 `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span><br><span class="line">this.someObject = Object.assign(&#123;&#125;, this.someObject, &#123; a: 1, b: 2 &#125;)</span><br></pre></td></tr></table></figure></p><h2 id="声明响应式属性"><a href="#声明响应式属性" class="headerlink" title="声明响应式属性"></a>声明响应式属性</h2><p>由于 Vue 不允许动态添加根级响应式属性，所以你必须<strong>在初始化实例前声明根级响应式属性，哪怕只是一个空值:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 声明 message 为一个空值字符串</span><br><span class="line">    message: &apos;&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &apos;&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">// 之后设置 `message` </span><br><span class="line">vm.message = &apos;Hello!&apos;</span><br></pre></td></tr></table></figure><p>如果你在 data 选项中<strong>未声明 message</strong>，Vue 将<strong>警告</strong>你渲染函数在试图访问的属性不存在。</p><p><code>data</code>对象就像组件状态的概要，提前声明所有的响应式属性，可以让组件代码<strong>在以后重新阅读</strong>或<strong>其他开发人员阅读时更易于被理解</strong>。</p><h2 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h2><p>可能你还没有注意到，Vue 异步执行 DOM 更新。只要观察到<strong>数据变化</strong>，Vue 将<strong>开启一个队列</strong>，并缓冲在同一事件循环中发生的所有数据改变。<strong>如果同一个 watcher 被多次触发，只会一次推入到队列中。</strong>这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际（已去重的）工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和<code>MutationObserver</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code> 代替。</p><p>例如，当你设置 <code>vm.someData = &#39;new value&#39;</code>，<strong>该组件不会立即重新渲染。</strong>当刷新队列时，组件会在事件循环队列清空时的下一个“tick”更新。多数情况我们不需要关心这个过程，但是如果你想在 DOM 状态更新后做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员沿着“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们确实要这么做。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code>。这样回调函数在 DOM 更新完成后就会调用。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#example&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &apos;123&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.message = &apos;new message&apos; // 更改数据</span><br><span class="line">vm.$el.textContent === &apos;new message&apos; // false</span><br><span class="line">Vue.nextTick(function () &#123;</span><br><span class="line">  vm.$el.textContent === &apos;new message&apos; // true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在组件内使用 <code>vm.$nextTick()</code> 实例方法特别方便，因为它不需要全局<code>Vue</code>，并且回调函数中的 <code>this</code> 将自动绑定到当前的 Vue 实例上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;example&apos;, &#123;</span><br><span class="line">  template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &apos;没有更新&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateMessage: function () &#123;</span><br><span class="line">      this.message = &apos;更新完成&apos;</span><br><span class="line">      console.log(this.$el.textContent) // =&gt; &apos;没有更新&apos;</span><br><span class="line">      this.$nextTick(function () &#123;</span><br><span class="line">        console.log(this.$el.textContent) // =&gt; &apos;更新完成&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/21/Vue进阶之路——深入响应式原理/">http://jaymo666.github.io/2017/09/21/Vue进阶之路——深入响应式原理/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue进阶之路——过渡效果</title>
      <link href="/2017/09/21/Vue%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E8%BF%87%E6%B8%A1%E6%95%88%E6%9E%9C/"/>
      <content type="html"><![CDATA[<p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。<br>包括以下工具：</p><ul><li>在 CSS 过渡和动画中自动应用 class</li><li>可以配合使用第三方 CSS 动画库，如 Animate.css</li><li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li><li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li></ul><h2 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素/组件的过渡"></a>单元素/组件的过渡</h2><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过渡</p><ul><li>条件渲染 （使用 v-if）</li><li>条件展示 （使用 v-show）</li><li>动态组件</li><li>组件根节点<br>这里是一个典型的例子：<br>HTMl:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;show = !show&quot;&gt;</span><br><span class="line">    Toggle</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><p>JS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#demo&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.fade-enter-active, .fade-leave-active &#123;</span><br><span class="line">  transition: opacity .5s</span><br><span class="line">&#125;</span><br><span class="line">.fade-enter, .fade-leave-to /* .fade-leave-active in &lt;2.1.8 */ &#123;</span><br><span class="line">  opacity: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当插入或删除包含在 <code>transition</code> 组件中的元素时，Vue 将会做以下处理：</p><ul><li>自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。</li><li>如果过渡组件提供了<code>JavaScript 钩子函数</code>，这些钩子函数将在恰当的时机被调用。</li><li>如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作（插入/删除）在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和Vue的 <code>nextTick</code>概念不同)</li><li><h3 id="过渡的-CSS-类名"><a href="#过渡的-CSS-类名" class="headerlink" title="过渡的-CSS-类名"></a>过渡的-CSS-类名</h3></li></ul><p>会有 6 个(CSS)类名在 enter/leave 的过渡中切换:</p><ol><li>v-enter</li><li>v-enter-active</li><li>v-enter-to</li><li>v-leave</li><li>v-leave-active</li><li>v-leave-to</li></ol><p><img src="https://cn.vuejs.org/images/transition.png" alt=""></p><p>对于这些在 enter/leave 过渡中切换的类名，<code>v-</code> 是这些类名的前缀。使用 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code> 可以重置前缀，比如 <code>v-enter</code>替换为 <code>my-transition-enter</code>。</p><h3 id="CSS-过渡"><a href="#CSS-过渡" class="headerlink" title="CSS 过渡"></a>CSS 过渡</h3><p>CSS 动画用法同 CSS 过渡，区别是在动画中 <code>v-enter</code>类名在节点插入 DOM 后不会立即删除，而是在<code>animationend</code> 事件触发时删除。</p><p>示例： (省略了兼容性前缀)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;show = !show&quot;&gt;Toggle show&lt;/button&gt;</span><br><span class="line">  &lt;transition name=&quot;bounce&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;Look at me!&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#example-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.bounce-enter-active &#123;</span><br><span class="line">  animation: bounce-in .5s;</span><br><span class="line">&#125;</span><br><span class="line">.bounce-leave-active &#123;</span><br><span class="line">  animation: bounce-out .5s;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bounce-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: scale(0);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bounce-out &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: scale(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义过渡类名"><a href="#自定义过渡类名" class="headerlink" title="自定义过渡类名"></a>自定义过渡类名</h3><p>我们可以通过以下特性来自定义过渡类名：</p><ul><li>enter-class</li><li>enter-active-class</li><li>leave-class</li><li>leave-active-class</li></ul><p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <code>Animate.css</code> 结合使用十分有用。<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://unpkg.com/animate.css@3.5.1/animate.min.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;show = !show&quot;&gt;</span><br><span class="line">    Toggle render</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;transition</span><br><span class="line">    name=&quot;custom-classes-transition&quot;</span><br><span class="line">    enter-active-class=&quot;animated tada&quot;</span><br><span class="line">    leave-active-class=&quot;animated bounceOutRight&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="同时使用-Transitions-和-Animations"><a href="#同时使用-Transitions-和-Animations" class="headerlink" title="同时使用 Transitions 和 Animations"></a>同时使用 Transitions 和 Animations</h3><p>Vue 为了知道过渡的完成，必须设置相应的<strong>事件监听器</strong>。它可以是 <code>transitionend</code>或 <code>animationend</code> ，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。</p><h3 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  v-on:before-enter=&quot;beforeEnter&quot;</span><br><span class="line">  v-on:enter=&quot;enter&quot;</span><br><span class="line">  v-on:after-enter=&quot;afterEnter&quot;</span><br><span class="line">  v-on:enter-cancelled=&quot;enterCancelled&quot;</span><br><span class="line">  v-on:before-leave=&quot;beforeLeave&quot;</span><br><span class="line">  v-on:leave=&quot;leave&quot;</span><br><span class="line">  v-on:after-leave=&quot;afterLeave&quot;</span><br><span class="line">  v-on:leave-cancelled=&quot;leaveCancelled&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">methods: &#123;</span><br><span class="line">  // --------</span><br><span class="line">  // 进入中</span><br><span class="line">  // --------</span><br><span class="line">  beforeEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 此回调函数是可选项的设置</span><br><span class="line">  // 与 CSS 结合时使用</span><br><span class="line">  enter: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // --------</span><br><span class="line">  // 离开时</span><br><span class="line">  // --------</span><br><span class="line">  beforeLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 此回调函数是可选项的设置</span><br><span class="line">  // 与 CSS 结合时使用</span><br><span class="line">  leave: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // leaveCancelled 只用于 v-show 中</span><br><span class="line">  leaveCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些钩子函数可以结合 <code>CSS transitions/animations</code>使用，也可以单独使用。</p><blockquote><p>当只用 JavaScript 过渡的时候， 在 enter 和 leave 中，回调函数 done 是必须的 。 否则，它们会被同步调用，过渡会立即完成。</p></blockquote><blockquote><p><strong>推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css=”false”，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</strong></p></blockquote><h2 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h2><p>可以通过<code>appear</code> 特性设置节点的在初始渲染的过渡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition appear&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></p><p>这里默认和进入和离开过渡一样，同样也可以自定义 CSS 类名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  appear-class=&quot;custom-appear-class&quot;</span><br><span class="line">  appear-active-class=&quot;custom-appear-active-class&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><p>自定义 JavaScript 钩子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  v-on:before-appear=&quot;customBeforeAppearHook&quot;</span><br><span class="line">  v-on:appear=&quot;customAppearHook&quot;</span><br><span class="line">  v-on:after-appear=&quot;customAfterAppearHook&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></p><h2 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h2><p> 对于原生标签可以使用 <code>v-if</code>/<code>v-else</code> 。最常见的多标签过渡是<strong>一个列表</strong>和<strong>描述这个列表</strong>为空消息的元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;table v-if=&quot;items.length &gt; 0&quot;&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;p v-else&gt;Sorry, no items found.&lt;/p&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>当有<strong>相同标签名</strong>的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，<strong>给在 &lt;transition组件中的多个元素设置 key 是一个更好的实践。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;button v-if=&quot;isEditing&quot; key=&quot;save&quot;&gt;</span><br><span class="line">    Save</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;button v-else key=&quot;edit&quot;&gt;</span><br><span class="line">    Edit</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h3><ul><li>in-out: 新元素先进行过渡，完成之后当前元素过渡离开。</li><li>out-in: 当前元素先进行过渡，完成之后新元素过渡进入。</li></ul><h2 id="多个组件的过渡"><a href="#多个组件的过渡" class="headerlink" title="多个组件的过渡"></a>多个组件的过渡</h2><p>多个组件的过渡简单很多 - 我们不需要使用 key 特性。相反，我们只需要使用<strong>动态组件</strong>:</p><h2 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h2><p>怎么同时渲染整个列表，比如使用<code>v-for</code>？在这种场景中，使用 <code>&lt;transition-group&gt;</code>组件。在我们深入例子之前，先了解关于这个组件的几个特点：</p><ul><li>不同于 <code>&lt;transition&gt;</code>， 它会以一个真实元素呈现：默认为一个 <code>&lt;span&gt;</code>。你也可以通过 tag 特性更换为其他元素。</li><li>内部元素 总是需要 提供<code>唯一的 key</code> 属性值</li></ul><h3 id="列表的位移过渡"><a href="#列表的位移过渡" class="headerlink" title="列表的位移过渡"></a>列表的位移过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，还可以<strong>改变定位。</strong>要使用这个新功能只需了解新增的 <code>v-move</code>特性，它会在元素的改变定位的过程中应用。像之前的类名一样，可以通过 <code>name</code> 属性来自定义前缀，也可以通过 <code>move-class</code> 属性手动设置。<br>v-move 对于设置过渡的切换时机和过渡曲线非常有用，你会看到如下的例子：</p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/21/Vue进阶之路——过渡效果/">http://jaymo666.github.io/2017/09/21/Vue进阶之路——过渡效果/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue进阶之路——过渡效果</title>
      <link href="/2017/09/21/Vue%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E8%BF%87%E6%B8%A1%E6%95%88%E6%9E%9C(1)/"/>
      <content type="html"><![CDATA[<p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。<br>包括以下工具：</p><ul><li>在 CSS 过渡和动画中自动应用 class</li><li>可以配合使用第三方 CSS 动画库，如 Animate.css</li><li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li><li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li></ul><h2 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素/组件的过渡"></a>单元素/组件的过渡</h2><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过渡</p><ul><li>条件渲染 （使用 v-if）</li><li>条件展示 （使用 v-show）</li><li>动态组件</li><li>组件根节点<br>这里是一个典型的例子：<br>HTMl:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;show = !show&quot;&gt;</span><br><span class="line">    Toggle</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><p>JS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#demo&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.fade-enter-active, .fade-leave-active &#123;</span><br><span class="line">  transition: opacity .5s</span><br><span class="line">&#125;</span><br><span class="line">.fade-enter, .fade-leave-to /* .fade-leave-active in &lt;2.1.8 */ &#123;</span><br><span class="line">  opacity: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当插入或删除包含在 <code>transition</code> 组件中的元素时，Vue 将会做以下处理：</p><ul><li>自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。</li><li>如果过渡组件提供了<code>JavaScript 钩子函数</code>，这些钩子函数将在恰当的时机被调用。</li><li>如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作（插入/删除）在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和Vue的 <code>nextTick</code>概念不同)</li><li><h3 id="过渡的-CSS-类名"><a href="#过渡的-CSS-类名" class="headerlink" title="过渡的-CSS-类名"></a>过渡的-CSS-类名</h3></li></ul><p>会有 6 个(CSS)类名在 enter/leave 的过渡中切换:</p><ol><li>v-enter</li><li>v-enter-active</li><li>v-enter-to</li><li>v-leave</li><li>v-leave-active</li><li>v-leave-to</li></ol><p><img src="https://cn.vuejs.org/images/transition.png" alt=""></p><p>对于这些在 enter/leave 过渡中切换的类名，<code>v-</code> 是这些类名的前缀。使用 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code> 可以重置前缀，比如 <code>v-enter</code>替换为 <code>my-transition-enter</code>。</p><h3 id="CSS-过渡"><a href="#CSS-过渡" class="headerlink" title="CSS 过渡"></a>CSS 过渡</h3><p>CSS 动画用法同 CSS 过渡，区别是在动画中 <code>v-enter</code>类名在节点插入 DOM 后不会立即删除，而是在<code>animationend</code> 事件触发时删除。</p><p>示例： (省略了兼容性前缀)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;show = !show&quot;&gt;Toggle show&lt;/button&gt;</span><br><span class="line">  &lt;transition name=&quot;bounce&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;Look at me!&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#example-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.bounce-enter-active &#123;</span><br><span class="line">  animation: bounce-in .5s;</span><br><span class="line">&#125;</span><br><span class="line">.bounce-leave-active &#123;</span><br><span class="line">  animation: bounce-out .5s;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bounce-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: scale(0);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bounce-out &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: scale(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义过渡类名"><a href="#自定义过渡类名" class="headerlink" title="自定义过渡类名"></a>自定义过渡类名</h3><p>我们可以通过以下特性来自定义过渡类名：</p><ul><li>enter-class</li><li>enter-active-class</li><li>leave-class</li><li>leave-active-class</li></ul><p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <code>Animate.css</code> 结合使用十分有用。<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://unpkg.com/animate.css@3.5.1/animate.min.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;show = !show&quot;&gt;</span><br><span class="line">    Toggle render</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;transition</span><br><span class="line">    name=&quot;custom-classes-transition&quot;</span><br><span class="line">    enter-active-class=&quot;animated tada&quot;</span><br><span class="line">    leave-active-class=&quot;animated bounceOutRight&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="同时使用-Transitions-和-Animations"><a href="#同时使用-Transitions-和-Animations" class="headerlink" title="同时使用 Transitions 和 Animations"></a>同时使用 Transitions 和 Animations</h3><p>Vue 为了知道过渡的完成，必须设置相应的<strong>事件监听器</strong>。它可以是 <code>transitionend</code>或 <code>animationend</code> ，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。</p><h3 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  v-on:before-enter=&quot;beforeEnter&quot;</span><br><span class="line">  v-on:enter=&quot;enter&quot;</span><br><span class="line">  v-on:after-enter=&quot;afterEnter&quot;</span><br><span class="line">  v-on:enter-cancelled=&quot;enterCancelled&quot;</span><br><span class="line">  v-on:before-leave=&quot;beforeLeave&quot;</span><br><span class="line">  v-on:leave=&quot;leave&quot;</span><br><span class="line">  v-on:after-leave=&quot;afterLeave&quot;</span><br><span class="line">  v-on:leave-cancelled=&quot;leaveCancelled&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">methods: &#123;</span><br><span class="line">  // --------</span><br><span class="line">  // 进入中</span><br><span class="line">  // --------</span><br><span class="line">  beforeEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 此回调函数是可选项的设置</span><br><span class="line">  // 与 CSS 结合时使用</span><br><span class="line">  enter: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // --------</span><br><span class="line">  // 离开时</span><br><span class="line">  // --------</span><br><span class="line">  beforeLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // 此回调函数是可选项的设置</span><br><span class="line">  // 与 CSS 结合时使用</span><br><span class="line">  leave: function (el, done) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  // leaveCancelled 只用于 v-show 中</span><br><span class="line">  leaveCancelled: function (el) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些钩子函数可以结合 <code>CSS transitions/animations</code>使用，也可以单独使用。</p><blockquote><p>当只用 JavaScript 过渡的时候， 在 enter 和 leave 中，回调函数 done 是必须的 。 否则，它们会被同步调用，过渡会立即完成。</p></blockquote><blockquote><p><strong>推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css=”false”，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</strong></p></blockquote><h2 id="初始渲染的过渡"><a href="#初始渲染的过渡" class="headerlink" title="初始渲染的过渡"></a>初始渲染的过渡</h2><p>可以通过<code>appear</code> 特性设置节点的在初始渲染的过渡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition appear&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></p><p>这里默认和进入和离开过渡一样，同样也可以自定义 CSS 类名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  appear-class=&quot;custom-appear-class&quot;</span><br><span class="line">  appear-active-class=&quot;custom-appear-active-class&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><p>自定义 JavaScript 钩子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  v-on:before-appear=&quot;customBeforeAppearHook&quot;</span><br><span class="line">  v-on:appear=&quot;customAppearHook&quot;</span><br><span class="line">  v-on:after-appear=&quot;customAfterAppearHook&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></p><h2 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h2><p> 对于原生标签可以使用 <code>v-if</code>/<code>v-else</code> 。最常见的多标签过渡是<strong>一个列表</strong>和<strong>描述这个列表</strong>为空消息的元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;table v-if=&quot;items.length &gt; 0&quot;&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;p v-else&gt;Sorry, no items found.&lt;/p&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>当有<strong>相同标签名</strong>的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，<strong>给在 &lt;transition组件中的多个元素设置 key 是一个更好的实践。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;button v-if=&quot;isEditing&quot; key=&quot;save&quot;&gt;</span><br><span class="line">    Save</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;button v-else key=&quot;edit&quot;&gt;</span><br><span class="line">    Edit</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h3><ul><li>in-out: 新元素先进行过渡，完成之后当前元素过渡离开。</li><li>out-in: 当前元素先进行过渡，完成之后新元素过渡进入。</li></ul><h2 id="多个组件的过渡"><a href="#多个组件的过渡" class="headerlink" title="多个组件的过渡"></a>多个组件的过渡</h2><p>多个组件的过渡简单很多 - 我们不需要使用 key 特性。相反，我们只需要使用<strong>动态组件</strong>:</p><h2 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h2><p>怎么同时渲染整个列表，比如使用<code>v-for</code>？在这种场景中，使用 <code>&lt;transition-group&gt;</code>组件。在我们深入例子之前，先了解关于这个组件的几个特点：</p><ul><li>不同于 <code>&lt;transition&gt;</code>， 它会以一个真实元素呈现：默认为一个 <code>&lt;span&gt;</code>。你也可以通过 tag 特性更换为其他元素。</li><li>内部元素 总是需要 提供<code>唯一的 key</code> 属性值</li></ul><h3 id="列表的位移过渡"><a href="#列表的位移过渡" class="headerlink" title="列表的位移过渡"></a>列表的位移过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，还可以<strong>改变定位。</strong>要使用这个新功能只需了解新增的 <code>v-move</code>特性，它会在元素的改变定位的过程中应用。像之前的类名一样，可以通过 <code>name</code> 属性来自定义前缀，也可以通过 <code>move-class</code> 属性手动设置。<br>v-move 对于设置过渡的切换时机和过渡曲线非常有用，你会看到如下的例子：</p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/21/Vue进阶之路——过渡效果(1)/">http://jaymo666.github.io/2017/09/21/Vue进阶之路——过渡效果(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Threejs</title>
      <link href="/2017/09/21/Threejs/"/>
      <content type="html"><![CDATA[<p>一门3D技术语言。<br><a id="more"></a><br>什么是threejs，很简单，你将它理解成three + js就可以了。three表示3D的意思，js表示javascript的意思。那么合起来，three.js就是使用javascript 来写3D程序的意思。<br>Javascript是运行在网页端的脚本语言，那么毫无疑问Three.js也是运行在浏览器上的。<!-- more --></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><p>##第一章<br>来学习three.js之前最好了解一下WebGL。<br>什么是WebGL?</p><blockquote><p>WebGL是在浏览器中实现三维效果的一套规范。</p></blockquote><p>使用<code>WebGL</code>原生的API来写3D程序是一件非常痛苦的事情，幸好，有很多同行花业余时间写了一些WebGL开源框架，其中three.js就是非常优秀的一个，它掩 盖了很多麻烦的细节，那么，就让我们一起来看看，什么是<code>three.js</code>吧</p><h3 id="1-启程："><a href="#1-启程：" class="headerlink" title="1. 启程："></a>1. 启程：</h3><p>实际上，我们要使用 Three.js 展示一些画面到浏览器上, 我们需要下面这三样东西:一个<strong>场景</strong>(scene)， 一个<strong>摄像头</strong>(camera) , 和一个<strong>渲染器</strong>(renderer)， 所以我们使用一个相机渲染一个场景.</p><pre><code>var scene = new THREE.Scene();    // 场景var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机var renderer = new THREE.WebGLRenderer();    // 渲染器renderer.setSize(window.innerWidth, window.innerHeight);    // 设置渲染器的大小为窗口的内宽度，也就是内容区的宽度document.body.appendChild(renderer.domElement);</code></pre><p><strong>场景是所有物体的容器</strong>，如果要显示一个苹果，就需要将苹果对象加入场景中。</p><p>另一个组件是相机，<strong>相机决定了场景中那个角度的景色会显示出来</strong>。相机就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色。</p><p>场景只有一种，但是相机却又很多种。和现实中一样，不同的相机确定了呈相的各个方面。比如有的相机适合人像，有的相机适合风景，专业的摄影师根据实际用途不一样，选择不同的相机。对程序员来说，只要设置不同的相机参数，就能够让相机产生不一样的效果。</p><h3 id="2-三维空间"><a href="#2-三维空间" class="headerlink" title="2. 三维空间"></a>2. 三维空间</h3><p><strong>两种基本的相机</strong></p><ol><li>透视相机</li><li>正投影相机</li></ol><h5 id="2-1-单反、双反都是相机"><a href="#2-1-单反、双反都是相机" class="headerlink" title="2.1. 单反、双反都是相机"></a>2.1. 单反、双反都是相机</h5><p>2.1.1 认识相机<br>在Threejs中相机的表示是<code>THREE.Camera</code>，它是相机的抽象基类，其子类有两种相机，分别是<strong>正投影相机</strong><code>THREE.OrthographicCamera</code>和<strong>透视投影相机</strong><code>THREE.PerspectiveCamera</code>。类图如下所示：<br><img src="http://www.hewebgl.com/attached/image/20130530/20130530145028_752.png" alt="相机的抽象基类及其子类"></p><p>正投影相机有时候也叫正交投影摄像机，下图显示了正交摄像机投影和透视投影之间的差别。</p><p><img src="http://www.hewebgl.com/attached/image/20130530/20130530145454_509.png" alt="正交摄像机投影和透视投影之间的差别图"></p><p>2.1.2 两者的区别</p><p>正投影和透视投影的区别是：透视投影有一个基本点，就是远处的物体比近处的物体小。</p><p>在工程建筑领域，正投影的例子很多，例如下面就是一个正投影的例子：<br><img src="http://www.hewebgl.com/attached/image/20130530/20130530145820_901.jpg" alt="正投影图"><br>其特点是，远近高低比例都相同。</p><h5 id="2-2-正投影相机"><a href="#2-2-正投影相机" class="headerlink" title="2.2 正投影相机"></a>2.2 正投影相机</h5><p>下面我们来介绍正投影相机，正投影的构造函数如下所示：</p><p><strong>OrthographicCamera( left, right, top, bottom, near, far )</strong></p><p>结合下面一个图，我们来看看，各个参数的意思。<br><img src="http://www.hewebgl.com/attached/image/20130530/20130530145859_920.jpg" alt=""></p><p>1、 left参数</p><p>left：左平面距离相机中心点的垂直距离。从图中可以看出，左平面是屏幕里面的那个平面。</p><p>2、 right参数</p><p>right：右平面距离相机中心点的垂直距离。从图中可以看出，右平面是屏幕稍微外面一点的那个平面。</p><p>3、 top参数</p><p>top：顶平面距离相机中心点的垂直距离。上图中的顶平面，是长方体头朝天的平面。</p><p>4、 bottom参数</p><p>bottom：底平面距离相机中心点的垂直距离。底平面是头朝地的平面。</p><p>5、near参数</p><p>near：近平面距离相机中心点的垂直距离。近平面是左边竖着的那个平面。</p><p>6、far参数</p><p>far：远平面距离相机中心点的垂直距离。远平面是右边竖着的那个平面。</p><p>有了这些参数和相机中心点，我们这里将<strong>相机的中心点又定义为相机的位置</strong>。通过这些参数，我们就能够在三维空间中唯一的确定上图的一个长方体。<strong>这个长方体也叫做视景体</strong>。</p><blockquote><p>投影变换的目的就是定义一个视景体，使得视景体外多余的部分裁剪掉，最终图像只是视景体内的有关部分。</p></blockquote><p>好了，看一个简单的例子：</p><pre><code>var camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );scene.add( camera );</code></pre><p>这个例子将浏览器窗口的宽度和高度作为了视景体的高度和宽度，相机正好在窗口的中心点上。这也是我们一般的设置方法，基本上为了方便，我们不会设置其他的值。</p><h5 id="2-3-透视投影相机"><a href="#2-3-透视投影相机" class="headerlink" title="2.3 透视投影相机"></a>2.3 透视投影相机</h5><p>透视投影相机的构造函数如下所示：</p><p><strong>PerspectiveCamera( fov, aspect, near, far )</strong></p><p>我们来欣赏一幅图来看看这个函数的各个参数的意思：<br><img src="http://www.hewebgl.com/attached/image/20130530/20130530151418_279.jpg" alt=""></p><p>先来明确这个图里涉及的概念。<br>1、视角fov：这个最难理解,我的理解是,眼睛睁开的角度,即,视角的大小,如果设置为0,相当你闭上眼睛了,所以什么也看不到,如果为180,那么可以认为你的视界很广阔,但是在180度的时候，往往物体很小，因为他在你的整个可视区域中的比例变小了。</p><p>2、近平面near：这个呢，表示你近处的裁面的距离。补充一下，也可以认为是眼睛距离近处的距离，假设为10米远，请不要设置为负值，Three.js就傻了,不知道怎么算了,</p><p>3、远平面far：这个呢，表示你远处的裁面,</p><p>4、纵横比aspect：实际窗口的纵横比，即宽度除以高度。这个值越大，说明你宽度越大</p><p>好了，看看下面一个简单的例子：</p><pre><code>var camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );scene.add( camera );</code></pre><p>未完待续。。。</p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/21/Threejs/">http://jaymo666.github.io/2017/09/21/Threejs/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
          <category> 3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 3D </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Threejs</title>
      <link href="/2017/09/21/Threejs(1)/"/>
      <content type="html"><![CDATA[<p>一门3D技术语言。<br><a id="more"></a><br>什么是threejs，很简单，你将它理解成three + js就可以了。three表示3D的意思，js表示javascript的意思。那么合起来，three.js就是使用javascript 来写3D程序的意思。<br>Javascript是运行在网页端的脚本语言，那么毫无疑问Three.js也是运行在浏览器上的。<!-- more --></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><p>##第一章<br>来学习three.js之前最好了解一下WebGL。<br>什么是WebGL?</p><blockquote><p>WebGL是在浏览器中实现三维效果的一套规范。</p></blockquote><p>使用<code>WebGL</code>原生的API来写3D程序是一件非常痛苦的事情，幸好，有很多同行花业余时间写了一些WebGL开源框架，其中three.js就是非常优秀的一个，它掩 盖了很多麻烦的细节，那么，就让我们一起来看看，什么是<code>three.js</code>吧</p><h3 id="1-启程："><a href="#1-启程：" class="headerlink" title="1. 启程："></a>1. 启程：</h3><p>实际上，我们要使用 Three.js 展示一些画面到浏览器上, 我们需要下面这三样东西:一个<strong>场景</strong>(scene)， 一个<strong>摄像头</strong>(camera) , 和一个<strong>渲染器</strong>(renderer)， 所以我们使用一个相机渲染一个场景.</p><pre><code>var scene = new THREE.Scene();    // 场景var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);// 透视相机var renderer = new THREE.WebGLRenderer();    // 渲染器renderer.setSize(window.innerWidth, window.innerHeight);    // 设置渲染器的大小为窗口的内宽度，也就是内容区的宽度document.body.appendChild(renderer.domElement);</code></pre><p><strong>场景是所有物体的容器</strong>，如果要显示一个苹果，就需要将苹果对象加入场景中。</p><p>另一个组件是相机，<strong>相机决定了场景中那个角度的景色会显示出来</strong>。相机就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色。</p><p>场景只有一种，但是相机却又很多种。和现实中一样，不同的相机确定了呈相的各个方面。比如有的相机适合人像，有的相机适合风景，专业的摄影师根据实际用途不一样，选择不同的相机。对程序员来说，只要设置不同的相机参数，就能够让相机产生不一样的效果。</p><h3 id="2-三维空间"><a href="#2-三维空间" class="headerlink" title="2. 三维空间"></a>2. 三维空间</h3><p><strong>两种基本的相机</strong></p><ol><li>透视相机</li><li>正投影相机</li></ol><h5 id="2-1-单反、双反都是相机"><a href="#2-1-单反、双反都是相机" class="headerlink" title="2.1. 单反、双反都是相机"></a>2.1. 单反、双反都是相机</h5><p>2.1.1 认识相机<br>在Threejs中相机的表示是<code>THREE.Camera</code>，它是相机的抽象基类，其子类有两种相机，分别是<strong>正投影相机</strong><code>THREE.OrthographicCamera</code>和<strong>透视投影相机</strong><code>THREE.PerspectiveCamera</code>。类图如下所示：<br><img src="http://www.hewebgl.com/attached/image/20130530/20130530145028_752.png" alt="相机的抽象基类及其子类"></p><p>正投影相机有时候也叫正交投影摄像机，下图显示了正交摄像机投影和透视投影之间的差别。</p><p><img src="http://www.hewebgl.com/attached/image/20130530/20130530145454_509.png" alt="正交摄像机投影和透视投影之间的差别图"></p><p>2.1.2 两者的区别</p><p>正投影和透视投影的区别是：透视投影有一个基本点，就是远处的物体比近处的物体小。</p><p>在工程建筑领域，正投影的例子很多，例如下面就是一个正投影的例子：<br><img src="http://www.hewebgl.com/attached/image/20130530/20130530145820_901.jpg" alt="正投影图"><br>其特点是，远近高低比例都相同。</p><h5 id="2-2-正投影相机"><a href="#2-2-正投影相机" class="headerlink" title="2.2 正投影相机"></a>2.2 正投影相机</h5><p>下面我们来介绍正投影相机，正投影的构造函数如下所示：</p><p><strong>OrthographicCamera( left, right, top, bottom, near, far )</strong></p><p>结合下面一个图，我们来看看，各个参数的意思。<br><img src="http://www.hewebgl.com/attached/image/20130530/20130530145859_920.jpg" alt=""></p><p>1、 left参数</p><p>left：左平面距离相机中心点的垂直距离。从图中可以看出，左平面是屏幕里面的那个平面。</p><p>2、 right参数</p><p>right：右平面距离相机中心点的垂直距离。从图中可以看出，右平面是屏幕稍微外面一点的那个平面。</p><p>3、 top参数</p><p>top：顶平面距离相机中心点的垂直距离。上图中的顶平面，是长方体头朝天的平面。</p><p>4、 bottom参数</p><p>bottom：底平面距离相机中心点的垂直距离。底平面是头朝地的平面。</p><p>5、near参数</p><p>near：近平面距离相机中心点的垂直距离。近平面是左边竖着的那个平面。</p><p>6、far参数</p><p>far：远平面距离相机中心点的垂直距离。远平面是右边竖着的那个平面。</p><p>有了这些参数和相机中心点，我们这里将<strong>相机的中心点又定义为相机的位置</strong>。通过这些参数，我们就能够在三维空间中唯一的确定上图的一个长方体。<strong>这个长方体也叫做视景体</strong>。</p><blockquote><p>投影变换的目的就是定义一个视景体，使得视景体外多余的部分裁剪掉，最终图像只是视景体内的有关部分。</p></blockquote><p>好了，看一个简单的例子：</p><pre><code>var camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );scene.add( camera );</code></pre><p>这个例子将浏览器窗口的宽度和高度作为了视景体的高度和宽度，相机正好在窗口的中心点上。这也是我们一般的设置方法，基本上为了方便，我们不会设置其他的值。</p><h5 id="2-3-透视投影相机"><a href="#2-3-透视投影相机" class="headerlink" title="2.3 透视投影相机"></a>2.3 透视投影相机</h5><p>透视投影相机的构造函数如下所示：</p><p><strong>PerspectiveCamera( fov, aspect, near, far )</strong></p><p>我们来欣赏一幅图来看看这个函数的各个参数的意思：<br><img src="http://www.hewebgl.com/attached/image/20130530/20130530151418_279.jpg" alt=""></p><p>先来明确这个图里涉及的概念。<br>1、视角fov：这个最难理解,我的理解是,眼睛睁开的角度,即,视角的大小,如果设置为0,相当你闭上眼睛了,所以什么也看不到,如果为180,那么可以认为你的视界很广阔,但是在180度的时候，往往物体很小，因为他在你的整个可视区域中的比例变小了。</p><p>2、近平面near：这个呢，表示你近处的裁面的距离。补充一下，也可以认为是眼睛距离近处的距离，假设为10米远，请不要设置为负值，Three.js就傻了,不知道怎么算了,</p><p>3、远平面far：这个呢，表示你远处的裁面,</p><p>4、纵横比aspect：实际窗口的纵横比，即宽度除以高度。这个值越大，说明你宽度越大</p><p>好了，看看下面一个简单的例子：</p><pre><code>var camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );scene.add( camera );</code></pre><p>未完待续。。。</p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/21/Threejs(1)/">http://jaymo666.github.io/2017/09/21/Threejs(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
          <category> 3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 3D </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mock.js</title>
      <link href="/2017/09/21/Mock/"/>
      <content type="html"><![CDATA[<p>Mock.js 是一款<strong>模拟数据生成器</strong>，旨在帮助<strong>前端</strong>攻城师独立于后端进行开发，帮助编写<strong>单元测试</strong><a id="more"></a></p><p>Mock.js 是一款<strong>模拟数据生成器</strong>，旨在帮助<strong>前端</strong>攻城师独立于后端进行开发，帮助编写<strong>单元测试</strong>。提供了以下模拟功能：</p><ul><li>根据数据模板生成模拟数据</li><li>模拟 Ajax 请求，生成并返回模拟数据</li><li>基于 HTML 模板生成模拟数据</li></ul><h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><p>Mock.js 的语法规范包括两部分：</p><ul><li>数据<strong>模板</strong>定义规范（Data Template Definition，DTD）</li><li>数据<strong>占位符</strong>定义规范（Data Placeholder Definition，DPD）</li></ul><h3 id="数据模板定义规范-DTD"><a href="#数据模板定义规范-DTD" class="headerlink" title="数据模板定义规范 DTD"></a>数据模板定义规范 DTD</h3><p>数据模板中的每个属性由 3 部分构成：<strong>属性名、生成规则、属性值：</strong></p><pre><code>// 属性名   name// 生成规则 rule// 属性值   value&apos;name|rule&apos;: value</code></pre><p>注意：</p><ul><li><strong>属性名</strong> 和 <strong>生成规则</strong> 之间用竖线 | 分隔。</li><li>生成规则 是可选的。</li><li>生成规则 有 7 种格式：<blockquote><ul><li>‘name|min-max’: value</li><li>‘name|count’: value</li><li>‘name|min-max.dmin-dmax’: value</li><li>‘name|min-max.dcount’: value</li><li>‘name|count.dmin-dmax’: value</li><li>‘name|count.dcount’: value</li><li>‘name|+step’: value</li></ul></blockquote></li><li>生成规则 的 含义 需要依赖 <strong>属性值的类型</strong> 才能确定。</li><li>属性值 中可以含有<strong> @占位符</strong>。</li><li>属性值 还指定了最终值的初始值和类型。<br><strong>生成规则和示例：</strong><br><strong>1. 属性值是字符串 String</strong></li><li>‘name|min-max’: string<br>通过重复 string 生成一个字符串，重复次数大于等于 min，小于等于 max。</li><li>‘name|count’: string<br>通过重复 string 生成一个字符串，重复次数等于 count。<br><strong>2. 属性值是数字 Number</strong></li><li><p>‘name|+1’: number</p><p>属性值自动加 1，初始值为 number。</p></li><li><p>‘name|min-max’: number<br>生成一个大于等于 min、小于等于 max 的整数，属性值 number 只是用来确定类型。</p></li><li><p>‘name|min-max.dmin-dmax’: number<br>生成一个浮点数，整数部分大于等于 min、小于等于 max，小数部分保留 dmin 到 dmax 位。</p></li></ul><p><strong>3.属性值是布尔型 Boolean</strong></p><p><strong>4. 属性值是对象 Object</strong></p><p><strong>5. 属性值是数组 Array</strong></p><p><strong>6. 属性值是函数 Function</strong></p><ul><li>‘name’: function</li></ul><p>执行函数 function，取其<strong>返回值</strong>作为最终的属性值，函数的上下文为属性 ‘name’ 所在的对象。</p><p><strong>7. 属性值是正则表达式 RegExp</strong></p><ul><li>‘name’: regexp</li></ul><p>根据正则表达式<code>regexp</code> 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。</p><h3 id="数据占位符定义规范-DPD"><a href="#数据占位符定义规范-DPD" class="headerlink" title="数据占位符定义规范 DPD"></a>数据占位符定义规范 DPD</h3><p><strong>占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。</strong></p><p>占位符 的格式为：</p><pre><code>@占位符@占位符(参数 [, 参数])</code></pre><p><strong>注意：</strong></p><ol><li>用 <strong>@</strong> 来标识其后的字符串是 占位符。</li><li>占位符 引用的是 <code>Mock.Random</code> 中的方法。</li><li>通过<code>Mock.Random.extend()</code> 来扩展自定义占位符。</li><li>占位符 也可以引用 <strong>数据模板</strong> 中的属性。</li><li>占位符 会<strong>优先引用</strong> 数据模板 中的属性。</li><li>占位符 支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong>。</li></ol><h2 id="Mock-mock"><a href="#Mock-mock" class="headerlink" title="Mock.mock"></a>Mock.mock</h2><h3 id="Mock-mock-rurl-rtype-template-function-options"><a href="#Mock-mock-rurl-rtype-template-function-options" class="headerlink" title="Mock.mock( rurl?, rtype?, template|function(options) )"></a>Mock.mock( rurl?, rtype?, template|function(options) )</h3><p>根据数据模板生成模拟数据。</p><ul><li><p>ock.mock( template )<br>根据数据模板生成模拟数据。</p></li><li><p>Mock.mock( rurl, template )<br>记录数据模板。当拦截到匹配 rurl 的 Ajax 请求时，将根据数据模板 template 生成模拟数据，并作为响应数据返回。</p></li><li><p>Mock.mock( rurl, function(options) )<br>记录用于生成响应数据的函数。当拦截到匹配 rurl 的 Ajax 请求时，函数 function(options) 将被执行，并把执行结果作为响应数据返回。</p></li><li><p>Mock.mock( rurl, rtype, template )<br>记录数据模板。当拦截到匹配 rurl 和 rtype 的 Ajax 请求时，将根据数据模板 template 生成模拟数据，并作为响应数据返回。</p></li><li><p>Mock.mock( rurl, rtype, function(options) )<br>记录用于生成响应数据的函数。当拦截到匹配 rurl 和 rtype 的 Ajax 请求时，函数 function(options) 将被执行，并把执行结果作为响应数据返回。</p></li></ul><p><strong>参数的含义和默认值</strong>如下所示：</p><ul><li><strong>参数 rurl</strong>：可选。表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 /\/domain\/list.json/、’/domian/list.json’。</li><li><strong>参数 rtype</strong>：可选。表示需要拦截的 Ajax 请求类型。例如 GET、POST、PUT、DELETE 等。</li><li><strong>参数 template</strong>：可选。表示数据模板，可以是<strong>对象</strong>或<strong>字符串</strong>。例如 { ‘data|1-10’:[{}] }、‘@EMAIL’。</li><li><strong>参数 function</strong>(options)：可选。表示用于生成响应数据的函数。</li><li><strong>参数 options</strong>：指向本次请求的 Ajax 选项集。</li></ul><blockquote><p>从 1.0 开始，Mock.js 通过<strong>覆盖</strong>和<strong>模拟原生 XMLHttpRequest </strong>的行为来拦截 Ajax 请求，不再依赖于第三方 Ajax 工具库（例如 jQuery、Zepto 等）。</p></blockquote><h3 id="Mock-mockjax-library"><a href="#Mock-mockjax-library" class="headerlink" title="Mock.mockjax(library)"></a>Mock.mockjax(library)</h3><h2 id="Mock-setup"><a href="#Mock-setup" class="headerlink" title="Mock.setup()"></a>Mock.setup()</h2><h3 id="Mock-setup-settings"><a href="#Mock-setup-settings" class="headerlink" title="Mock.setup( settings )"></a>Mock.setup( settings )</h3><p>配置拦截 Ajax 请求时的行为。支持的配置项有：timeout。</p><p><strong>timeout</strong><br><strong>指定被拦截的 Ajax 请求的响应时间</strong>，单位是毫秒。值可以是正整数，例如 400，表示 400 毫秒 后才会返回响应内容；也可以是横杠 ‘-‘ 风格的字符串，例如 ‘200-600’，表示响应时间介于 200 和 600 毫秒之间。<strong>默认值是’10-100’</strong>。</p><blockquote><p>目前，接口 Mock.setup( settings ) 仅用于配置 Ajax 请求，将来可能用于配置 Mock 的其他行为。</p></blockquote><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/21/Mock/">http://jaymo666.github.io/2017/09/21/Mock/</a></p>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mock.js</title>
      <link href="/2017/09/21/Mock(1)/"/>
      <content type="html"><![CDATA[<p>Mock.js 是一款<strong>模拟数据生成器</strong>，旨在帮助<strong>前端</strong>攻城师独立于后端进行开发，帮助编写<strong>单元测试</strong><a id="more"></a></p><p>Mock.js 是一款<strong>模拟数据生成器</strong>，旨在帮助<strong>前端</strong>攻城师独立于后端进行开发，帮助编写<strong>单元测试</strong>。提供了以下模拟功能：</p><ul><li>根据数据模板生成模拟数据</li><li>模拟 Ajax 请求，生成并返回模拟数据</li><li>基于 HTML 模板生成模拟数据</li></ul><h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><p>Mock.js 的语法规范包括两部分：</p><ul><li>数据<strong>模板</strong>定义规范（Data Template Definition，DTD）</li><li>数据<strong>占位符</strong>定义规范（Data Placeholder Definition，DPD）</li></ul><h3 id="数据模板定义规范-DTD"><a href="#数据模板定义规范-DTD" class="headerlink" title="数据模板定义规范 DTD"></a>数据模板定义规范 DTD</h3><p>数据模板中的每个属性由 3 部分构成：<strong>属性名、生成规则、属性值：</strong></p><pre><code>// 属性名   name// 生成规则 rule// 属性值   value&apos;name|rule&apos;: value</code></pre><p>注意：</p><ul><li><strong>属性名</strong> 和 <strong>生成规则</strong> 之间用竖线 | 分隔。</li><li>生成规则 是可选的。</li><li>生成规则 有 7 种格式：<blockquote><ul><li>‘name|min-max’: value</li><li>‘name|count’: value</li><li>‘name|min-max.dmin-dmax’: value</li><li>‘name|min-max.dcount’: value</li><li>‘name|count.dmin-dmax’: value</li><li>‘name|count.dcount’: value</li><li>‘name|+step’: value</li></ul></blockquote></li><li>生成规则 的 含义 需要依赖 <strong>属性值的类型</strong> 才能确定。</li><li>属性值 中可以含有<strong> @占位符</strong>。</li><li>属性值 还指定了最终值的初始值和类型。<br><strong>生成规则和示例：</strong><br><strong>1. 属性值是字符串 String</strong></li><li>‘name|min-max’: string<br>通过重复 string 生成一个字符串，重复次数大于等于 min，小于等于 max。</li><li>‘name|count’: string<br>通过重复 string 生成一个字符串，重复次数等于 count。<br><strong>2. 属性值是数字 Number</strong></li><li><p>‘name|+1’: number</p><p>属性值自动加 1，初始值为 number。</p></li><li><p>‘name|min-max’: number<br>生成一个大于等于 min、小于等于 max 的整数，属性值 number 只是用来确定类型。</p></li><li><p>‘name|min-max.dmin-dmax’: number<br>生成一个浮点数，整数部分大于等于 min、小于等于 max，小数部分保留 dmin 到 dmax 位。</p></li></ul><p><strong>3.属性值是布尔型 Boolean</strong></p><p><strong>4. 属性值是对象 Object</strong></p><p><strong>5. 属性值是数组 Array</strong></p><p><strong>6. 属性值是函数 Function</strong></p><ul><li>‘name’: function</li></ul><p>执行函数 function，取其<strong>返回值</strong>作为最终的属性值，函数的上下文为属性 ‘name’ 所在的对象。</p><p><strong>7. 属性值是正则表达式 RegExp</strong></p><ul><li>‘name’: regexp</li></ul><p>根据正则表达式<code>regexp</code> 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。</p><h3 id="数据占位符定义规范-DPD"><a href="#数据占位符定义规范-DPD" class="headerlink" title="数据占位符定义规范 DPD"></a>数据占位符定义规范 DPD</h3><p><strong>占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。</strong></p><p>占位符 的格式为：</p><pre><code>@占位符@占位符(参数 [, 参数])</code></pre><p><strong>注意：</strong></p><ol><li>用 <strong>@</strong> 来标识其后的字符串是 占位符。</li><li>占位符 引用的是 <code>Mock.Random</code> 中的方法。</li><li>通过<code>Mock.Random.extend()</code> 来扩展自定义占位符。</li><li>占位符 也可以引用 <strong>数据模板</strong> 中的属性。</li><li>占位符 会<strong>优先引用</strong> 数据模板 中的属性。</li><li>占位符 支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong>。</li></ol><h2 id="Mock-mock"><a href="#Mock-mock" class="headerlink" title="Mock.mock"></a>Mock.mock</h2><h3 id="Mock-mock-rurl-rtype-template-function-options"><a href="#Mock-mock-rurl-rtype-template-function-options" class="headerlink" title="Mock.mock( rurl?, rtype?, template|function(options) )"></a>Mock.mock( rurl?, rtype?, template|function(options) )</h3><p>根据数据模板生成模拟数据。</p><ul><li><p>ock.mock( template )<br>根据数据模板生成模拟数据。</p></li><li><p>Mock.mock( rurl, template )<br>记录数据模板。当拦截到匹配 rurl 的 Ajax 请求时，将根据数据模板 template 生成模拟数据，并作为响应数据返回。</p></li><li><p>Mock.mock( rurl, function(options) )<br>记录用于生成响应数据的函数。当拦截到匹配 rurl 的 Ajax 请求时，函数 function(options) 将被执行，并把执行结果作为响应数据返回。</p></li><li><p>Mock.mock( rurl, rtype, template )<br>记录数据模板。当拦截到匹配 rurl 和 rtype 的 Ajax 请求时，将根据数据模板 template 生成模拟数据，并作为响应数据返回。</p></li><li><p>Mock.mock( rurl, rtype, function(options) )<br>记录用于生成响应数据的函数。当拦截到匹配 rurl 和 rtype 的 Ajax 请求时，函数 function(options) 将被执行，并把执行结果作为响应数据返回。</p></li></ul><p><strong>参数的含义和默认值</strong>如下所示：</p><ul><li><strong>参数 rurl</strong>：可选。表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 /\/domain\/list.json/、’/domian/list.json’。</li><li><strong>参数 rtype</strong>：可选。表示需要拦截的 Ajax 请求类型。例如 GET、POST、PUT、DELETE 等。</li><li><strong>参数 template</strong>：可选。表示数据模板，可以是<strong>对象</strong>或<strong>字符串</strong>。例如 { ‘data|1-10’:[{}] }、‘@EMAIL’。</li><li><strong>参数 function</strong>(options)：可选。表示用于生成响应数据的函数。</li><li><strong>参数 options</strong>：指向本次请求的 Ajax 选项集。</li></ul><blockquote><p>从 1.0 开始，Mock.js 通过<strong>覆盖</strong>和<strong>模拟原生 XMLHttpRequest </strong>的行为来拦截 Ajax 请求，不再依赖于第三方 Ajax 工具库（例如 jQuery、Zepto 等）。</p></blockquote><h3 id="Mock-mockjax-library"><a href="#Mock-mockjax-library" class="headerlink" title="Mock.mockjax(library)"></a>Mock.mockjax(library)</h3><h2 id="Mock-setup"><a href="#Mock-setup" class="headerlink" title="Mock.setup()"></a>Mock.setup()</h2><h3 id="Mock-setup-settings"><a href="#Mock-setup-settings" class="headerlink" title="Mock.setup( settings )"></a>Mock.setup( settings )</h3><p>配置拦截 Ajax 请求时的行为。支持的配置项有：timeout。</p><p><strong>timeout</strong><br><strong>指定被拦截的 Ajax 请求的响应时间</strong>，单位是毫秒。值可以是正整数，例如 400，表示 400 毫秒 后才会返回响应内容；也可以是横杠 ‘-‘ 风格的字符串，例如 ‘200-600’，表示响应时间介于 200 和 600 毫秒之间。<strong>默认值是’10-100’</strong>。</p><blockquote><p>目前，接口 Mock.setup( settings ) 仅用于配置 Ajax 请求，将来可能用于配置 Mock 的其他行为。</p></blockquote><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/21/Mock(1)/">http://jaymo666.github.io/2017/09/21/Mock(1)/</a></p>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>REST</title>
      <link href="/2017/09/20/REST/"/>
      <content type="html"><![CDATA[<p>REST是一种设计API的模式<br><a id="more"></a><br>什么是Web API呢？</p><p>如果我们想要获取某个电商网站的某个商品，输入<code>http://localhost:3000/products/123</code>，就可以看到id为123的商品页面，但这个结果是HTML页面，它同时混合包含了Product的<strong>数据</strong>和Product的<strong>展示</strong>两个部分。对于用户来说，阅读起来没有问题，但是，<strong>如果机器读取，就很难从HTML中解析出Product的数据。</strong></p><p>如果一个URL返回的不是HTML，而是机器能直接解析的数据，这个URL就可以看成是一个Web API。比如，读取<code>http://localhost:3000/api/products/123</code>，如果能直接返回Product的数据，那么机器就可以直接读取。</p><p><strong>REST就是一种设计API的模式。</strong>最常用的数据格式是<code>JSON</code>。由于JSON能直接被JavaScript读取，所以，以JSON格式编写的<code>REST</code>风格的API具有简单、易读、易用的特点。</p><p>编写API有什么好处呢？<br><strong>由于API就是把Web App的功能全部封装了，</strong>所以，通过API操作数据，可以极大地把前端和后端的代码隔离，使得后端代码易于测试，前端代码编写更简单。</p><p>此外，如果我们把前端页面看作是一种用于展示的客户端，那么<strong>API就是为客户端提供数据、操作数据的接口</strong>。这种设计可以获得极高的扩展性。例如，当用户需要在手机上购买商品时，只需要开发针对iOS和Android的两个客户端，通过客户端访问API，就可以完成通过浏览器页面提供的功能，而后端代码基本无需改动。</p><p>当一个Web应用以API的形式对外提供功能时，整个应用的结构就扩展为：</p><p><img src="http://www.liaoxuefeng.com/files/attachments/001473591163887539f974f19544a10a1e89b8cf9f46048000/l" alt=""></p><p>把网页视为一种客户端，是REST架构可扩展的一个关键。</p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/20/REST/">http://jaymo666.github.io/2017/09/20/REST/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>REST</title>
      <link href="/2017/09/20/REST(1)/"/>
      <content type="html"><![CDATA[<p>REST是一种设计API的模式<br><a id="more"></a><br>什么是Web API呢？</p><p>如果我们想要获取某个电商网站的某个商品，输入<code>http://localhost:3000/products/123</code>，就可以看到id为123的商品页面，但这个结果是HTML页面，它同时混合包含了Product的<strong>数据</strong>和Product的<strong>展示</strong>两个部分。对于用户来说，阅读起来没有问题，但是，<strong>如果机器读取，就很难从HTML中解析出Product的数据。</strong></p><p>如果一个URL返回的不是HTML，而是机器能直接解析的数据，这个URL就可以看成是一个Web API。比如，读取<code>http://localhost:3000/api/products/123</code>，如果能直接返回Product的数据，那么机器就可以直接读取。</p><p><strong>REST就是一种设计API的模式。</strong>最常用的数据格式是<code>JSON</code>。由于JSON能直接被JavaScript读取，所以，以JSON格式编写的<code>REST</code>风格的API具有简单、易读、易用的特点。</p><p>编写API有什么好处呢？<br><strong>由于API就是把Web App的功能全部封装了，</strong>所以，通过API操作数据，可以极大地把前端和后端的代码隔离，使得后端代码易于测试，前端代码编写更简单。</p><p>此外，如果我们把前端页面看作是一种用于展示的客户端，那么<strong>API就是为客户端提供数据、操作数据的接口</strong>。这种设计可以获得极高的扩展性。例如，当用户需要在手机上购买商品时，只需要开发针对iOS和Android的两个客户端，通过客户端访问API，就可以完成通过浏览器页面提供的功能，而后端代码基本无需改动。</p><p>当一个Web应用以API的形式对外提供功能时，整个应用的结构就扩展为：</p><p><img src="http://www.liaoxuefeng.com/files/attachments/001473591163887539f974f19544a10a1e89b8cf9f46048000/l" alt=""></p><p>把网页视为一种客户端，是REST架构可扩展的一个关键。</p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/20/REST(1)/">http://jaymo666.github.io/2017/09/20/REST(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>R笔记</title>
      <link href="/2017/09/20/R%E7%AC%94%E8%AE%B0/"/>
      <content type="html"><![CDATA[<p>一门可视化语言。<br><a id="more"></a><br><a href="http://bayes.math.montana.edu/Rweb/Rnotes/R.html" target="_blank" rel="noopener">http://bayes.math.montana.edu/Rweb/Rnotes/R.html</a></p><p>前言：关于R<br>在R的官方教程里是这么给R下注解的:一个数据分析和图形显示的程序设计环境(A system for data analysis and visualization which is built based on S language.)。<br>R的源起<br>R是S语言的一种实现。S语言是由 AT&amp;T贝尔实验室开发的一种用来进行数据探索、统计分析、作图的解释型语言。最初S语言的实现版本主要是S-PLUS。S-PLUS是一个商业 软件，它基于S语言，并由MathSoft公司的统计科学部进一步完善。后来Auckland大学的Robert Gentleman 和 Ross Ihaka 及其他志愿人员开发了一个R系统。R的使用与S-PLUS有很多类似之处，两个软件有一定的兼容性。<br>R is free<br>R是用于统计分析、绘图的语言和操作环境。R是属于GNU系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。<br>R是一套完整的数据处理、计算和制图软件系统。其功能包括：数据存储和处理系统；数组运算工具（其向量、矩阵运算方面功能尤其强大）；完整连贯的统计分析工具；优秀的统计制图功能；简便而强大的编程语言：可操纵数据的输入和输入，可实现分支、循环，用户可自定义功能。<br>R是一个免费的自由软件，它有UNIX、LINUX、MacOS和WINDOWS版本，都是可以免费下载和使用的,在那儿可以下载到R的安装程序、各种外挂程序和文档。在R的安装程序中只包含了8个基础模块，其他外在模块可以通过CRAN获得。<br>R的特点<br>(1) 有效的数据处理和保存机制。<br>(2) 拥有一整套数组和矩阵的操作运算符。<br>(3) 一系列连贯而又完整的数据分析中间工具。<br>(4) 图形统计可以对数据直接进行分析和显示，可用于多种图形设备。<br>(5) 一种相当完善、简洁和高效的程序设计语言。它包括条件语句、循环语句、用户自定义的递归函数以及输入输出接口。<br>(6) R语言是彻底面向对象的统计编程语言。<br>(7) R语言和其它编程语言、数据库之间有很好的接口。<br>(8) R语言是自由软件，可以放心大胆地使用，但其功能却不比任何其它同类软件差。<br>(9) R语言具有丰富的网上资源<br>一   入门训练</p><ol><li>获取帮助<blockquote><p>help.start() 开启帮助文档<br>help(solve) 显示某命令的帮助信息，或者<br>?solve<br> 对于由特殊字符指定的功能，这些参数必须用单引号或双引号括起来，使之成为一个“字符串”,如<br>help(“[[“)<br> 与某个主题相关的例子通常可以用下面的命令得到<br>example(topic)</p></blockquote></li><li><p>命令简介<br> R对大小写是敏感的；名称不能以数字开始；<br> 基本的命令由表达式或者赋值语句组成。如果一个表达式被作为一条命令给出，它将被求值、打印而表达式的值并不被保存。一个赋值语句同样对表达式求值之后把表达式的值传给一个变量，不过并不会自动的被打印出来；<br> 命令由分号(;)来分隔，或者另起新行；<br> 基本命令可以由花括号(f和g)合并为一组复合表达式；<br> 注释几乎可以被放在任何地方，只要是以井号( # )开始，到行末结束；<br> 如果一个命令在行莫仍没有结束，R将会给出一个不同的提示符，默认的是‘+’。</p></li><li><p>命令文件的执行和输出转向到文件<br>如果命令存储于一个外部文件中，比如工作目录work中的commands.R，他们可以随时在R的任务中被执行</p><blockquote><p>source(“commands.R”)在Windows中Source也可以由File菜单执行。<br>函数sink，<br>sink(“record.lis”)<br>将把所有后续的输出由终端转向一个外部文件，record.lis。命令<br>sink()   将把信息重新恢复到终端上。</p></blockquote></li><li>数据的保持与对象的清除<br>R所创建、操作的实体是对象。对象可以是变量、数组、字符串、函数以及由这些元素组成的其它结构；<blockquote><p>objects()     用来显示目前存储在R中的对象的名字。而当前存储的所有对象的组合被称为workspace；<br>清除对象可以使用rm命令：<br>rm(x, y, z, ink, junk, temp, foo, bar)<br>所有在一个R任务中被创建的对象都可以在文件中被永久保存，并在其它的R任务中被使用。在每个R任务结束时用户都有机会保存当前有效的所有对象。如果用户这样做的话，对象将被写入当前目录一个名为.RData。当R被再次启动时R会从这个文件中再载入workspace。同时相关的命令记录也被载入。<br>所以，推荐大家在用R进行不同的分析时分别使用不同的工作目录。</p></blockquote></li><li>基本数据结构</li></ol><p>数值型(numeric）<br>1,1.2,3.1415926<br>复数型(complex)<br>1+2i<br>字符型(character)<br>‘A’/ “hello world!”<br>逻辑型(logical)<br>TRUE / FALSE</p><ol><li>基本数据对象</li></ol><p>向量(vector), 见下节<br>矩阵(matrix)：<br>更一般的说数组是向量在多维情况下的一般形式。事实上它们是可以被两个或更多的指标索引的向量，并且以特定的方式被打印出来。<br>因子(factors) 提供了一种处理分类数据的更简介的方式。<br>列表(list)：<br>是向量的一种一般形式，并不需要保证其中的元素都是相同的类型，而且其中的元素经常是向量和列表本身。<br>数据框(data frame)：<br>是一种与矩阵相似的结构，其中的列可以是不同的数据类型。可以把数据框看作一种数据”矩阵”，它的每行是一个观测单位，而且(可能)同时包含数值型和分类的变量。<br>函数( function)：<br>能够在R的workspace中存储的对象。我们可以通过函数来扩展R的功能。<br>二   简单操作，数值与向量<br>2.1 向量与赋值<br>R对命名了的数据结构进行操作。最简单的数据结构是数字向量；如，</p><blockquote><p>x &lt;- c(10.4, 5.6, 3.1, 6.4, 21.7)    c()是创建函数，赋值运算符是’&lt;-‘，与函数assign()等价<br>assign(“x”, c(10.4, 5.6, 3.1, 6.4, 21.7))  也可以写成：<br>c(10.4, 5.6, 3.1, 6.4, 21.7) -&gt; x<br>如果一个表达式被当作一个完整的命令，它的值将被打印到终端但不被储存。<br>单独输入x则会将值打印出来。也可以打印倒数：<br>1/x<br>y &lt;- c(x, 0, x)   也可以将向量作为元素。<br>2.2 向量运算<br>    操作是按照向量中的元素一个一个进行的。同一个表达式中的向量并不需要具有相同的长度。如果它们的长度不同,表达式的结果是一个与表达式中最长向量有相同长度的向量。表达式中较短的向量会根据它的长度被重复使用若干次(不一定是整数次)，直到与长度最长的向量相匹配。而常数很明显的将被不断重复。如，<br>v &lt;- 2<em>x + y + 1<br>常用运算有：<br>+，-，</em>，/，^（次方）；<br>log, exp, sin, cos, tan,sqrt等；<br>max和min的作用是选出所给向量中最大的或最小的元素；<br>range函数的值是一个长度为2的向量，即c(min(x),max(x))<br>length(x)返回了向量x中元素的个数，也就是x的长度。<br>sum(x)给出了x中所有元素的总和；<br>prod(x)给出x中所有元素的乘积；<br>mean(x)和var(x)，分别计算样本均值和样本方差，这两个函数分别相当于sum(x)/length(x)，sum((x-mean(x)) ^2)/(length(x) -1)。如果var()的参数是一个n<em>p的矩阵，那么函数的值是一个p</em>p的样本协方差矩阵，认为每行是一个p变量的样本向量。<br>sort(x)返回一个与x具有相同长度的向量，其中的元素按招升序排列。还有其他更灵活的排序功能(参见order()和sort.list())。<br>pmax和pmin将返回一个与最长的向量长度相等的向量，向量中的元素由参数中所有向量在相应位置的最大值(最小值)组成；<br>如果要使用复数，需要直接给出一个复数部分。因此sqrt(-17)将会返回NaN(无效数值)和一个警告，而sqrt(-17+0i)将按照复数进行运算。<br>2.3 生成序列<br>最简单的方法是用冒号‘：’，冒号具有最高运算优先级。例如1:30就是向量c(1,2,. . .,29,30)。30:1构造一个递减序列。<br>利用seq()函数构造序列：有五个参数，from, to, by, length, along<br>                                       from, to可以不写参数名，seq(2,10)就相当于2:10。<br>                                       by指定步长，默认为1，如seq(-5, 5, by=.2)即为c(-5.0, -4.8, -4.6, …, 4.6, 4.8, 5.0)<br>                                       length指定序列长度，如seq(length=51, from=-5, by=.2)，等同于seq(-5, 5, by=.2)<br>                                       along=vector只能单独使用，产生一个“1:length(vector)”序列。类似的函数是rep(),这个函数可以用多种复杂的方法来<br>                                           复制一个对象。最简单的形式是&gt; s5 &lt;- rep(x, times=5)<br>2.4 逻辑向量</p></blockquote><p>TRUE, FALSE, 和NA(not available), 前两个可以简写为T和F，但T/F并不是系统保留字，可以被用户覆盖，所以最好还是不要简写。<br>逻辑向量是由条件给出的，如下列语句令temp成为一个与x长度相同，相应位置根据是否与条件相符而由TRUE或FALSE组成的向量：</p><blockquote><p>temp <- x=""> 13<br>逻辑操作符包括&lt;, &lt;=, &gt;, &gt;=,完全相等==和不等于!=，与或非分别为&amp;, |, !。<br>在普通运算中，FALSE当做0而TRUE当做1。<br>2.5 缺失值<br>NA(not available): 一般来讲一个NA的任何操作都将返回NA。<br>     is.na(x)返回一个与x等长的逻辑向量，并且由相应位置的元素是否是NA来决定这个逻辑向量相应位置的元素是TRUE还是FALSE。<br>     x==NA是一个与x具有相同长度而其所有元素都是NA的向量。<br>NaN(Not a Number): 由数值运算产生，如0/0, Inf-Inf.<br>     is.na(x)对于NA和NaN值都返回TRUE，<br>     is.nan(x)只对NaN值返回TRUE。<br>2.6 字符向量</-></p></blockquote><p>字符串在输入时可以使用单引号(‘)或双以号(“);  在打印时用双引号(有时不用引号)。<br>R使用与C语言风格基本相同的转义符, 所以输入\打印的也是\, 输入” 打印引号”,  n: 换行, t: tab, b: 回格。<br>字符向量可以通过函数c()连接；<br>paste()可以接受任意个参数，并从它们中逐个取出字符并连成字符串，形成的字符串的个数与参数中最长字符串的长度相同。如果参数中包含数字的话，数字将被强制转化为字符串。在默认情况下，参数中的各字符串是被一个空格分隔的，不过通过参数sep=string 用户可以把它更改为其他字符串，包括空字符串。例如：</p><blockquote><p>labs &lt;- paste(c(“X”,”Y”), 1:10, sep=””)  使变量labs成为字符变量c(“X1”, “Y2”, “X3”, “Y4”, “X5”, “Y6”, “X7”, “Y8”, “X9”, “Y10”)<br>2.7 index vector—数据集子集的选择与修改</p></blockquote><p>任何结果为一个向量的表达式都可以通过追加索引向量(index vector)来选择其中的子集。<br>1 逻辑的向量。</p><blockquote><p>y <- x[!is.na(x)]="" 表示将向量x中的非na元素赋给y；="" (x+1)[(!is.na(x))="" &="" x="">0] -&gt; z     表示创建一个对象z，其中的元素由向量x+1中与x中的非缺失值和正数对应的向量组成。</-></p><ol><li>正整数的向量<br>x[6]    是x的第六个元素<br>x[1:10]       选取了x的前10个元素(假设x的长度不小于10)。<br>c(“x”,”y”)[rep(c(1,2,2,1), times=4)]     产生了一个字符向量，长度为16，由”x”, “y”, “y”, “x”重复4次而组成。</li><li>负整数的向量<br>y &lt;- x[-(1:5)]       表示向量y取向量x前5个元素以外的元素。</li><li>字符串的向量<br>只存在于拥有names属性并由它来区分向量中元素的向量。这种情况下一个由名称组成的子向量起到了和正整数的索引向量相同的效果。<br>fruit &lt;- c(5, 10, 1, 20)<br>names(fruit) &lt;- c(“orange”, “banana”, “apple”, “peach”)<br>lunch &lt;- fruit[c(“apple”,”orange”)]<br>子集的修改<br>x[is.na(x)] &lt;- 0    表示将向量x中所以NA元素用0来代替<br>y[y &lt; 0] &lt;- -y[y &lt; 0]      表示将向量(-y)中 与向量y的负元素对应位置的元素 赋值给 向量y中 与向量y负元素对应的元素。作用相当于：<br>y &lt;- abs(y)<br>三  对象，模式和属性<br>3.1 固有属性：模式和长度<br>对象是R所进行操作的实体，对象可以是向量、列表等，详见1.6.<br>对象的模式包括numeri，ccomplex，character，logical，list，function，expression等。可以用mode(object)查看。<br>对象的长度是对象的另一固有属性。可以用length(object)查看。<br>attribute(object)可以查看更深入的属性。<br>模式的转换<br>在允许的情况下(大多数情况都是允许的)，R可以完成各种模式的转换。例如：d&lt;-as.character(z)，将数值向量z&lt;-(0:9)转化为字符向量c(“0”, “1”, “2”, …, “9”)。as.integer(d)将d转化为数值向量。<br>R中很多形式为as.something()的函数，可以完成从一个模式向另一个模式的转化，或者是令对象取得它当前模式不具有的某些属性。<br>3.2 改变对象的长度<br>e &lt;- numeric()    产生一个numeric型的空向量e。character()等类似。此时长度为对象0。<br>此时新添加一个元素会使e的长度自动调整。<br>e[3] &lt;- 17    令e为一个长度为3的向量（此时，该向量的前两个元素都是NA）<br>缩短（截断）一个对象的长度，只需要一个赋值命令。因此，若alpha是一个长度为10的对象，下面的命令<br>alpha &lt;- alpha[2 * 1:5]<br>3.3 属性的获取和设置</li></ol></blockquote><p>函数attributes(object)将给出当前对象所具有的所有非基本属性（长度和模式属于基本属性）的一个列表。<br>函数attr(object,name)可以被用来选取一个指定的属性。除了为某些特殊的目的创建新属性这样特殊的环境下，这些函数很少被用到。<br>当函数attr()用在赋值语句左侧时，既可以是将对象与一种新的属性关联，也可以是对原有属性的更改。例如</p><blockquote><p>attr(z,”dim”) &lt;- c(10,10)         另R将z作为一个10X10的矩阵看待。<br>3.4 对象的类别<br>对象的一个特别属性，类别，被用来指定对象在R编程中的风格。比如：如果对象类别”data.frame”则会以特定方式处理。<br>unclass()可以去除对象的类别。<br>summary()可以查看对象的基本信息（min, max, mean, etc.）<br>四  有序因子和无序因子</p></blockquote><p>因子是一种向量对象，它给自己的组件指定了一个离散的分类（分组），它的组件由其他等长的向量组成。R提供了有序因子和无序因子。<br>通俗点说，因子就是将对象的值分成不同的组（levels）。<br>用函数factor()创建一个因子，levels按序排列(字母序或数值序)。<br>例如province&lt;-c(“四川”,”湖南”,”江苏”,”四川”,”四川”,”四川”,”湖南”,”江苏”,”湖南”,”江苏”)，为province创建因子：</p><blockquote><p>pf&lt;-factor(province)   创建province的因子pf<br>pf     打印出来<br> [1] 四川 湖南 江苏 四川 四川 四川 湖南 江苏 湖南 江苏<br>Levels: 湖南 江苏 四川<br>函数levels()可以用来观察因子中有多少不同的levels。<br>假如我们拥有这些省份考生的分数：<br>score&lt;-c(95,86,84,92,84,79,86,99,85,90)<br>函数tappley()可以用来计算各省的平均分数，函数tapply()的作用是对它第一个参数的组件中所包含的每个组应用一个参数三指定的函数。<br>smeans&lt;-tapply(score,pf,mean)<br>smeans<br>    湖南     江苏     四川<br>85.66667 91.00000 87.50000<br>再例如，下面命令会给出各组的length<br>tapply(score,pf,length)<br>湖南 江苏 四川<br>   3    3    4 </p></blockquote><p>函数ordered()可以创建有序因子</p><blockquote><p>ordered(province)<br> [1] 四川 湖南 江苏 四川 四川 四川 湖南 江苏 湖南 江苏<br>Levels: 湖南 &lt; 江苏 &lt; 四川</p></blockquote><p>五 数组和矩阵<br>5.1 数组<br>数组可以看成一个由递增下标表示的数据项的集合，例如数值。<br>数组的生成<br>如果一个向量需要在R中以数组的方式被处理，则必须含有一个维数向量作为它的dim属性。<br>维度向量由dim()指定，例如，z是一个由1500个元素组成的向量。下面的赋值语句</p><blockquote><p>dim(z) &lt;- c(3,5,100)        使它具有dim属性，并且将被当作一个3X5X100的数组进行处理。 c(3,5,100) 就是他的维度向量。<br>还可以用到像matrix()和array()这样的函数来赋值。比如<br>array(1:20, dim=c(4,5))<br>matrix(1:24, 3,4)<br>数据向量中的值被赋给数组中的值时，将遵循与FORTRAN相同的原则”主列顺序”，即第一个下标变化的最快，最后的下标变化最慢。<br>数组的运算<br>数组可以在算数表达式中使用，结果也是一个数组，这个数组由数据向量逐个元素的运算后组成，通常参与运算的对象应当具有相同的dim属性。<br>5.2 数组的索引和数组的子块</p></blockquote><p>数组中的单个元素可以通过下标来指定，下标由逗号分隔，写在括号内。<br>我们可以通过在下标的位置给出一个索引向量来指定一个数组的子块，不过如果在任何一个索引位置上给出空的索引向量，则相当于选取了这个下标的全部范围。<br>如a[2,,]，a[,3,]等<br>5.3 索引数组<br>除了索引向量，还可以使用索引数组来指定数组的某些元素。<br>例如：有4X5的数组a，若要得到a中的a[1,3], a[2,2] 和a[3,1]这三个元素，可以生成索引向量i，然后用a[i]得到它们。</p><blockquote><p>a &lt;- array(1:20,dim=c(4,5)) # Generate a 4 by 5 array.<br>i &lt;- array(c(1:3,3:1),dim=c(3,2))<br>i<br>[,1] [,2]<br>[1,] 1 3<br>[2,] 2 2<br>[3,] 3 1<br>a[i]<br>[1] 9 6 3<br>a[i] &lt;- 0   # 将这三个元素用0替换。<br>5.4 向量，数组的混合运算<br>表达式从左到右被扫描；<br>参与运算的任意对象如果大小不足，都将被重复使用直到与其他参与运算的对象等长；<br>当较短的向量和数组在运算中相遇时，所有的数组必须具有相同的dim属性，否则返回一个错误；<br>如果有任意参与运算的向量比参与运算的矩阵或数组长，将会产生错误；<br>如果数组结构正常声称，并且没有错误或者强制转换被应用于向量上，那么得到的结果与参与运算的数组具有相同的dim属性。<br>5.5 矩阵的运算<br>构建分区矩阵：cbind()和rbind()，cbind()按照水平方向，或者说按列的方式将矩阵连接到一起。rbind()按照垂直的方向，或者说按行的方式将矩阵连接到一起。</p></blockquote><p>外积：操作符是%o%:</p><blockquote><p>ab &lt;- a %o% b   或者<br>ab &lt;- outer(a, b, “<em>“)<br>其中的乘法操作可以由任意一个双变量的函数替代。<br>广义转置：函数t(A)，或aperm(A, c(2,1))；<br>获取行数/列数：nrow(A)和ncol(A)分别返回矩阵A的行数和列数。<br>矩阵乘法：操作符为%</em>%；<br>交叉乘积（cross product）：crossprod(X，Y)等同于t(X) %*% y，crossprod(X)等价于crossprod(X, X)；<br>diag(v)：如果v是向量，diag(v)返回一个由v的元素为对角元素的对角矩阵。<br>               如果v为矩阵，diag(v)返回一个由v主对角元素组成的向量。<br>               如果v只是一个数值，那么diag(v)是一个vXv的单位矩阵。</p></blockquote><p>特征值和特征向量：eigen(Sm)。这个函数的结果是由名为values和vectors的两部分组成的列表。如果只是需要特征值：eigen(Sm)$values<br>最小二乘拟合即QR分解：lsfit(), qr()。<br>强制转换为向量：as.vector()，或者直接c().<br>解线性方程和求矩阵的逆，奇异值分解与行列式见；<br>六  列表和数据帧<br>6.1 列表<br>列表是由称作组件的有序对象集合构成的对象。组件的模式或类型不一定相同。<br>形如Lst &lt;- list(name_1=object_1, . . ., name_m=object_m)的赋值将创建一个包含m个组件的列表，并根据参数中指定的名称为其命名。（其名称可以自由选取）。如果它们的名称被省略，组件将只是被编号。例如：</p><blockquote><p>Lst &lt;- list(name=”Fred”, wife=”Mary”, no.children=3,child.ages=c(4,7,9))<br>所使用的组件是被复制到新的列表中的，对原始对象没有影响。<br>组件总是被编号的，并且可以通过编号指定。<br>Lst[[1]] 即为”Fred”，也可以用 Lst$name，Lst[[“name”]]指定。如果Lst[[4]]是一个有下标的数组，Lst[[4]][1]就是它的第一项。<br>区分Lst[[1]]和Lst[1]，’[[…]]’是选择单个元素时使用的操作符，而’[…]’是一个一般的下标操作符。因此，前者代表列表Lst中的第一个对象；后者是列表Lst的子列表，仅包含列表的第一项。<br>组件的名称可以缩写，可缩写的程度是只要能令组件被唯一的识别就可以了。如：Lst$na等价于Lst$name， Lst$w等价于Lst$wife。<br>扩展列表<br>可以通过指定额外组件的方式。例如<br>Lst[5] &lt;- list(matrix=Mat)<br>连接列表<br>当连接函数c()的参数为列表时，其结果也是一个模式为列表的对象。由参数中的列表作为组件依次连接而成。<br>list.ABC &lt;- c(list.A, list.B, list.C)<br>6.2 数据帧</p></blockquote><p>数据帧是类别为”data.frame”的列表；<br>数据帧会被当作各列具有不同模式和属性的矩阵。<br>数据帧按照矩阵的方式显示，选取的行或列也按照矩阵的方式来索引。<br>创建数据帧<br>直接创建：那些满足对数据帧的列（组件）限制的对象可以通过函数data.frame来构建成为一个数据帧</p><blockquote><p>t &lt;- data.frame(home=statef, loot=income, shot=incomef)<br>强制转换：如果一个列表的组件与数据帧的限制一致，这个列表就可以通过函数as.data.frame()强制转化为一个数据帧。<br>外部文件：创建数据帧最简单的方法应当是使用read.table()函数从外部文件中读取整个数据帧。<br>数据帧和列表的限制<br>1 组件必须是向量（数值型，字符形，逻辑型），因子，数值矩阵，列表，或其他数据帧；<br>2 矩阵，列表，数据帧向新数据帧提供的变量数分别等于它们的列数，元素数和变量数；<br>3 数值向量，逻辑值和因子在数据帧中保持不变，字符向量将被强制转化为因子，其水平是字符向量中所出现的值；<br>4 数据帧中作为变量的向量结构必须具有相同的长度，而矩阵结构应当具有相同的行大小。</p></blockquote><p>挂接和卸载数据帧<br>当觉得使用’$’引用数据帧元素(如’t$home’)麻烦时，可以进行数据帧挂接</p><blockquote><p>attach(t)      这样可以直接引用数据帧内的元素，而无需’$’，前提是数据帧外没有同名的变量(如name)。<br>挂接后若要对数据帧元素进行赋值操作，仍需用’$’，否则视为赋值给数据帧外的元素。<br>赋值后必须要先卸载(detach)再重新挂接后，新值才可见。<br>detach(t)</p></blockquote><p>attach()是具有一般性的函数，即它不仅能够将目录和数据帧挂接在搜索路径上，还能挂接其他类别的对象。特别是模式为”list”的对象可以通过相同的方式挂接：</p><blockquote><p>attach(any.old.list)<br>任何被挂接的对象都可以用detach来卸载，通过指定位置编号或者指定名称这样的方式.<br>搜索路径<br>函数search()将显示目前的搜索路径，可以用来查看数据帧/列表的挂接状态。<br>ls()（或objects()）命令可以用来检查搜索路径任意位置上的内容。如：ls(), ls(2), ls(t)<br>R可以在搜索路径中包含至多20个项目,列表和数据帧只能在位置2或更靠后的位置上挂接。</p></blockquote><p>数据帧使用惯例</p><p>1 将每个独立的，适当定义的问题所包含的所有变量收入同一个数据帧中，并赋予合适的、易理解、易辨识的名称；<br>2 处理问题时，当相应的数据帧挂接于位置2，同时在第1层工作目录下存放操作的数值和临时变量；<br>3 在结束一次工作之前，将你认为对将来有参考价值的变量通过$标记的形式添加到数据帧里面，然后detach()；<br>4 最后，将工作目录下所有不需要的变量剔除，并且尽量将剩下多余的临时变量都清除干净。<br>这样我们可以很简单的在同一个目录下处理多个问题，而且对每个问题都可以使用x,y,z这样的变量名。<br>七  从文件中读取数据<br>7.1 函数read.table()<br>该函数可以直接将文件中完整的数据帧读入。此时文件要符合特定的格式：<br>1 第一行应当提供数据帧中每个变量的名称；<br>2 每一行(除变量名称行)应包含一个行标号和各变量的值。<br>3 若没有表头(变量名称行)，也没有行标号，只有变量值，则默认变量名称为”v1”,”v2”…<br>4 若有表头，但没有行标号，则可以指定参数header=TRUE.<br>7.2 函数scan()<br>该函数从键盘或文件中读取数据，并存入向量或列表中。</p><blockquote><p>inp &lt;- scan(file, what)<br>第一个参数是文件名,如“test.txt”，若为“”或空，则从键盘读入数据；<br>第二个参数用于确定读入数据的模式。  如：list(“”,0,0) 指定读入到列表中，列表有三项，且列表第一项是字符型，第二三项是数值型。若为0，则指定读入到一个数值向量中，若为“”则指定读入到字符向量中。<br>7.3 内置数据集的读取</p></blockquote><p>R本身提供超过50个数据集，同时在功能包（包括标准功能包）中附带更多的数据集。与S-Plus不同，这些数据即必须通过data函数载入。</p><blockquote><p>data()   #获得基本系统提供的数据集列表，然后通过形如<br>data(infert)    #来载入名为infert的数据集<br>从其他package中载入数据集<br>data(package=”nls”)      #查看nls中数据集<br>data(Puromycin, package=”nls”)     #读取nls中Puromycin数据集。<br>用library()挂接package后，它的数据集也自动包含到搜索路径中了。<br>library(nls)    #载入package nls<br>data()      #查看数据集<br>date(Puromycin)    #载入Puromycin数据集</p></blockquote><p>7.4  编辑数据<br>在使用一个数据帧或矩阵时，edit提供一个独立的工作表式编辑环境。</p><blockquote><p>xnew &lt;- edit(xold)       #对数据集xold进行编辑。并在完成时将改动后的对象赋值给xnew<br>xnew &lt;- edit(data.frame())        #可以通过工作表界面录入新数据。<br>fix()函数用于直接修改已有的对象，等价于  x&lt;-edit(x).<br>八 概率分布<br>8.1 R是一个统计表集合(略读)</p></blockquote><p>R提供了一套完整的统计表集合。函数可以对累积分布函数P(X&lt;=x)，概率密度函数，分位函数（对给定的q，求满足P(X&lt;=x) &gt; q的最小x）求值，并根据分布进行模拟。</p><p>对于所给的名称，加前缀’d’代表密度(density)，’p’代表CDF，’q’代表分位函数，’r’代表模拟（随即散布）。这几类函数的第一个参数是有规律的，形为dxxx的函数为x，pxxx的函数为q，qxxx的函数为p，rxxx的函数为n（rhyper和rwilcox是特例，他们的第一个参数为nn）。目前为止，非中心参数(non-centrality parameter)仅对CDF和少数几个其他函数有效，细节请参考在线帮助。<br>所有pxxx和qxxx的函数都具有逻辑参数lower.tail和log.p，而所有的dxxx函数都有参数log，这个是我们可以直接通过</p><ul><li>pxxx(t, …, lower.tail = FALSE, log.p = TRUE)<br>获取，比如说，累积失效函数（cumulative/integrated hazard function），H(t) =-log(1-F(t))，以及更精确的对数似然（通过dxxx(…, log = TRUE)）。<br>此外，对于来自正态分布，具有学生化样本区间的分布还有ptukey和qtukey这样的函数。下面是一些例子<blockquote><h2 id="2-tailed-p-value-for-t-distribution"><a href="#2-tailed-p-value-for-t-distribution" class="headerlink" title="2-tailed p-value for t distribution"></a>2-tailed p-value for t distribution</h2><p>2*pt(-2.43, df = 13)</p><h2 id="upper-1-point-for-an-F-2-7-distribution"><a href="#upper-1-point-for-an-F-2-7-distribution" class="headerlink" title="upper 1% point for an F(2, 7) distribution"></a>upper 1% point for an F(2, 7) distribution</h2><p>qf(0.99, 2, 7)<br>8.2 检测数据集的分布</p></blockquote></li></ul><p>函数summary和fivenum这两个函数可以给出摘要，后者只给出数值；<br>函数stem可以将数值统计结果以类似直方图的方式显示出来；<br>函数hist()可以绘制直方图；<br>函数density和line可以获得更漂亮的密度图；<br>功能包fun中的ecdf函数能绘制经验累积分布函数；<br>还可以进行拟合正态分布，覆盖拟合CDF；<br>还可以绘制Quantile-quantile (Q-Q)图有助于我们更细致的检测其分布形态；<br>8.3 单样本和两样本检验（略读）<br>九  语句组、循环和条件操作</p><p>R是一种表达式语言，也就是说其命令类型只有函数或表达式，并由它们返回一个结果。<br>语句组由花括号‘{ }’确定，此时结果是该组中最后一个能返回值的语句的结果。<br>条件语句</p><blockquote><p>if (expr_1) expr_2 else expr_3<br>其中条件表达式expr1必须返回一个逻辑值，操作符&amp;&amp;和||经常被用于条件部分。<br>&amp;和|与&amp;&amp;，||的区别在于，&amp;和|按照逐个元素的方式进行计算，&amp;&amp;和||对向量的第一个元素进行运算，只有在必需的时候才对第二个参数求值。<br>if/else结构的向量版本是函数ifelse，其形式为ifelse (condition,a,b)，产生函数结果的规则是：如果condition[i]为真，对应a[i]元素；反之对应的是b[i]元素。根据这个原则函数返回一个由a,b中相应元素组成的向量，向量长度与其最长的参数等长。<br>循环语句<br>for (name in expr_1) expr_2<br>其中name是循环变量，expr1是一个向量表达式（通常是1:20这样的序列），而expr2经常是一个表达式语句组，expr2随着name依次取expr1结果向量的值而被多次重复运行。<br>repeat(expr)<br>while(condition) expr</p></blockquote><p>break语句可以用来中断任何循环，可能是非正常的中断。而且这是中止repeat循环的唯一方式。<br>next语句可以中止一个特定的循环，跳至下一个.<br>十 编写自己的函数<br>10.1 函数的定义</p><blockquote><p>name &lt;- function(arg_1, arg_2, …) expression<br>expression是一个R表达式（通常是表达式语句组），并使用参数arg_i来计算出一个数值，表达式的值就是函数的返回值。<br>函数调用的形式通常都是name(expr1,expr2,…)<br>10.2 定义新的二元操作符<br>可以将函数定义为新的二元操作符：<br>“%!%” &lt;- function(X, y) { … }<br>正如矩阵乘法运算符，%*%，和矩阵外积运算符%o%<br>10.3 指定参数和默认值</p></blockquote><p>如果被调用函数的参数按照”name = obj”的形式给出，那么参数的次序可以是任意的。<br>而且，参数序列可以在开始依次序给出，而将指定名称的参数置于后面。<br>因此，如果由一个函数fun1被定义为</p><blockquote><p>fun1 &lt;- function(data, data.frame, graph, limit) {<br>[function body omitted]<br>}<br>那么函数可以有多种等价的使用方法，例如<br>ans &lt;- fun1(d, df, TRUE, 20)<br>ans &lt;- fun1(d, df, graph=TRUE, limit=20)<br>ans &lt;- fun1(data=d, limit=20, graph=TRUE, data.frame=df)<br>默认值 ：在很多情况下，参数都会被赋予一个普遍适用的默认值。<br>fun1 &lt;- function(data, data.frame, graph=TRUE, limit=20) { … }<br>则函数可以这样被调用<br>ans &lt;- fun1(d, df)<br>此时与上面三种情况等价，也可以这样调用<br>ans &lt;- fun1(d, df, limit=10)<br>此时改变了一个默认值。<br>NOTE：参数可以是任意表达式，甚至可以是包含其他参数的表达式；<br>10.4 额外参数“…”</p></blockquote><p>当需要将一个函数的参数传递给另一个函数时，可以通过包含一个额外的参数”…”实现。<br>fun1 &lt;- function(data, data.frame, graph=TRUE, limit=20, …) {<br>[omitted statements]<br>if (graph)<br>par(pch=”*”, …)<br>[more omissions]<br>}<br>10.5 全局变量和局部变量<br>函数内的赋值都是局部变量，退出函数就丢失了。<br>如果要在函数内进行永久赋值（定义全局变量），需要用到“超赋值”操作符, &lt;&lt;-或者函数assign()。<br>10.6 一些高级示例<br>区组设计的效率因子 (E±ciency factors)<br>删除打印数组中的所有名称<br>递归的数值积分<br>10.7 范畴（Scope）</p><p>函数主体内出现的标识(symbol)可以被分为3类；正式参数、局部变量和自由变量。<br>正式参数就是出现在函数参数列表中的参数，他们的值由实际的函数参数与正式参数的绑定（binding）过程决定。<br>局部变量是在参数主体中，由表达式求值过程决定的变量。<br>自由变量为既不是正式参数又不是局部变量的变量。赋值之后自由变量成为局部变量。</p><p>在R中，自由变量的值由函数被创建的环境中与其同名的第一个变量值决定（我理解为最近的同名变量），这种方式被称为词汇式范畴(lexical scope)。<br>而在S中，该值由同名的全局变量决定。<br>例如下面的函数cube，在R中cube（2）=8，在S中报错为sq()找不到n。<br>cube &lt;- function(n) {<br>sq &lt;- function() n<em>n<br>n</em>sq()<br>}<br>一个银行账户的例子，详见《R语言笔记》。<br>10.8 定制环境<br>详见《R语言笔记》。<br>10.9 类别，通用函数和对象定位</p><p>一个对象的类别(class)决定了他会如何被通用函数(generic function)处理。<br>如果参数本身没有任何类别属性，或者其类别在特定问题中并不满足通用函数的要求，通常会有一个默认的动作被执行。<br>类别机制使用户可以为特定的目的设计和编写通用函数。<br>使用&gt; methods(class=”data.frame”)可以查看数据帧的通用函数。<br>使用&gt; methods(plot)可以查看plot函数能处理的类别。<br>十一   R的统计模型<br>待阅。</p><p>十二 图形过程<br>在Windows下用window()命令可以打开图形窗口。<br>12.1 高级绘图命令</p><pre><code>高级绘图函数，由函数参数提供数据生成一幅完整的图形。其中适当的坐标轴，标签和标题都自动生成了（除非你另外指定了）。高级绘图命令每次都生成一幅新的图形，清除当前的图形（如果需要的话）。</code></pre><p>1  plot()函数</p><p>这是一个通用函数：生成图形的类型取决于第一个参数的类型或类别(class)。<br>plot(x,y)  plot(xy)：<br>如果x，y是向量，plot(x,y)生成一幅y对x的散点图。用包含两个元素x，y的一个列表或一个两列的矩阵作为一个参数（第二种形式那样的）也能达成相同的效果。<br>plot(x)：<br>如果x是一个时间序列，这个命令生成一个时间序列图，如果x是一个数值型向量，则生成一个向量值对它们向量索引的土，而如果x是一个复向量，则生成一个向量中元素的虚部对实部的图。<br>plot(f)   plot(f,y)：<br>f是一个因子对象，y是一个数值型向量。第一种形式生成一个f的条形图；第二种形式生成y对应于f各个水平的箱线图。<br>plot(df)   plot( expr)    plot(y expr)：<br>df是一个数据帧，y是任意对象，expr是由对象名称组成的列表，分隔符’+’(例如，a + b + c)。前两种形式生成分布式的图形，第一种是数据帧中的变量，第二种是一系列被命名的对象。第三种形式生成y对expr中每个对象的图。<br>2 显示多元数据</p><p>如果X是一个数值矩阵或数据帧，下面的命令</p><blockquote><p>pairs(X)<br>生成一个配对的散点图矩阵，矩阵由X中的每列的列变量对其他各列列变量的散点图组成，得到的矩阵中每个散点图行、列长度都是固定的。</p></blockquote><p>当问题涉及到三、四个变量时，使用coplot更好些。如果a和b是数值向量，c是数值向量或因子对象（全都是相同长度的），下面的命令</p><blockquote><p>coplot(a ~ b | c)<br>对应c的某些给定值生成数个a对b的散点图。当c是一个因子时，这个命令也就是对c的每个水平生成a对b的散点图。当c是数值向量的时候，这个数值向量被分为一系列的条件区间（conditioning intervals），对应c的每个区间生成一个a对b的散点图。区间的数量和位置可以通过coplot()的参数given.values来控制，函数co.intervals()也可以用来选择区间。我们也可以使用两个给定变量通过命令<br>coplot(a ~ b | c+d)<br>对c和d的每个联合条件区间生成a对b的散点图。</p></blockquote><p>函数coplot()和pairs()都可以使用参数panel=，这个参数可以用来定制我们得到的图形类型。默认的是points()函数，生成一个散点图，不过通过在参数panel=中提供某些其它的低级图形函数，我们可以生成需要的各种图形。一个很有用的函数例子是panel.smooth()。<br>3 显示图形</p><p>qqnorm(x)   qqline(x)    qqplot(x,y)<br>分布比较图。第一种形式生成向量x对期望正态分数（一个正态记分图），第二个在上面的图上添加一条穿过分布分位点和数据分位点的直线。第三个命令生成x的分位点对y分位点图，用于分别比较它们的分布。<br>hist(x)     hist(x,nclass=n)       hist(x,breaks=b, . . . )<br>生成数值变量x的直方图。通常会自动选定一个合理的类别数，不过可以通过nclass=参数来指定一个推荐值。或者通过参数breaks=来指定分界点。如果给定了probability=TRUE参数，那么条形图代表相对频数而不是累计数。<br>dotchart(x, . . . )<br>创建一个x中数据的点图(dotchart)。点图中y轴给出x中数据的标签，x轴给出它们的值。它允许对落入某一特定区间的所有数据项方便的进行可视化选择。<br>image(x,y,z, . . . )     contour(x,y,z, . . . )    persp(x,y,z, . . . )<br>生成三个变量的图。函数image是用不同的颜色绘制一些矩形方格来展示z的值，函数contour通过绘制等高线来展示z的值，函数persp绘制一个3D面。<br>4 参数配置</p><p>add=TRUE      强制函数按照低级图形函数的方式操作，将图形置于当前图形上（仅对某些函数有效）。<br>axes=FALSE       暂时禁止坐标轴的生成|以便使用axis()函数添加你自己定制的坐标轴。默认情况是axes=TRUE，即包含坐标轴。<br>log=”x”   log=”y”   log=”xy”      令x,y或者两者全都对数化。这个参数对许多函数都有效，不过不是全部。<br>type=          参数type=控制所生成图形的类型：<br>        type=”p” 绘制单独的点（默认值）<br>        type=”l” 绘制线<br>        type=”b” 绘制由线连接的点（both）<br>        type=”o” 将点绘在线上<br>        type=”h” 绘制从点到零轴的垂线（high-density）<br>        type=”s” 阶梯式图。第一种形式中，点由垂线的顶部定义；第二种形式里用底部定义。<br>        type=”n” 不绘制。不过坐标轴是绘出的（默认情况）而且要根据数据绘出坐标系统。用来给后续的低级图形函数创建图形作基础。<br>xlab=string    ylab=string          x轴或y轴的标签。使用这些参数来改变默认的标签，通常的默认值是调用高级绘图函数时所使用对象的名称。<br>main=string          图表标题，位于图形的顶部，大字体显示。<br>sub=string         子标题，位于x轴下面，用较小的字体显示。<br>12.2   低级绘图命令</p><p>有些时候高级绘图函数并不能很精确的生成我们想要的图形。这种情况下，我们可以通过低级绘图命令在当前图形上添加信息（例如，点、线或文本）。<br>points(x,y)    lines(x,y)<br>在当前图形上添加点或线。函数plot()的参数type=也可以用于这些函数（默认的是”p”代表points()和”l”代表lines()）。<br>text(x,y,labels, . . . )<br>给定点坐标x,y，在该点添加文本。通常labels是一个整数或字符向量，其中labels[i]出现在点(x[i],y[i])。默认值是1:length(x)。<br>Note： 这个函数通常用于这样的序列中</p><blockquote><p>plot(x, y, type=”n”); text(x, y, names)<br>图形参数type=”n”阻止了点的生成，但是建立了坐标轴，由函数text()提供字符向量names所指定的特定字符。</p></blockquote><p>abline(a, b)   abline(h=y)   abline(v=x)    abline(lm.obj)<br>在当前图上添加一条斜率为b，截距为a的直线。h=y在图形指定的高度上绘制一条贯穿图形的水平线，同样的，v=x在x轴的指定位置绘制一条贯穿的垂线。而lm.obj是一个包含coefficients组件的列表，该组件的长度为2，分别当作截距和斜率。<br>polygon(x, y, . . . )<br>绘制一个多边形，其顶点由(x,y)指定。同时还（可选的）可以加上阴影线，如果图形设备允许的话还可以将多边形填充。<br>legend(x, y, legend, . . . )<br>这当前图形的指定位置添加图例。绘制的字符，线条类型，颜色等等由字符向量legend指定。除此之外至少还要给出一个参数v，与绘图单元的相应值，分别有：<br>legend( , fill=v)填充方框的颜色<br>legend( , col=v)绘制点线的颜色<br>legend( , lty=v)线条类型<br>legend( , lwd=v)线条宽度<br>legend( , pch=v)绘制字符(字符向量)</p><p>title(main,sub)<br>在当前图形的顶部用大字题添加一个标题main，在底部用较小的字体添加子标题sub。<br>axis(side, . . . )<br>在当前图形的指定边上添加坐标，在哪个边上由第一个参数指定（1到4，从底部按照顺时针顺序）。其他参数控制坐标的位置|在图形内或图形外，以及标记的位置和标签。适合在调用参数为axes=FALSE的函数plot()后添加定制的坐标轴。<br>低级绘图函数通常都需要一些位置信息（例如，x,y坐标）来决定在哪里添加新的元素。坐标以用户坐标(user coordinates)的形式给出，这个坐标系是根据所提供的数据由之前的高级绘图语句定义的。需要x,y参数的地方还可以选用一个单独的参数，即一个由名为x,y的元素组成的列表。相似的，一个两列的矩阵也可以。像locator()（后面会提到）这样的函数也可以按照这种方式交互的指定图形中的位置。<br>添加数学注释<br>某些情况下需要在图形中加入数学符号或公式。在R中可以通过在text, mtext,axis或title中指定一个表达式来实现。例如，下面的代码绘制了二项概率函数的公式：</p><blockquote><p>text(x, y, expression_r(paste(bgroup(“(“, atop(n, x), “)”),p^x, q^{n-x})))<br>更多的信息，包括其特性的一个完整列表可以在R中通过下面的命令得到：<br>help(plotmath)<br>example(plotmath)<br>添加Hershey矢量字体<br>help(Hershey)<br>example(Hershey)<br>12.3 图形的交互<br>R提供了函数，使用户可以通过鼠标从图形中释放信息或添加信息。</p></blockquote><p>locator(n,type)<br>等待用户使用鼠标左键在当前图形上选择位置。直到n(默认是512)个点都选完或者点击了鼠标另一个键（Unix,Windows)，在Mac下用鼠标点击图形窗口外的部分也可以结束。参数type的效果和在高级绘图函数中使用时是一样的，即在选择的点绘制指定的图形。默认情况是不绘制图形。函数locator()将所选点的坐标返回到一个列表中，列表包含x,y两个组件。<br>通常locator()在调用的时候并不带参数。这个功能在为图例或标签这样的图形元素选择位置时比较有用，尤其是这些位置不好通过计算得到的时候。举个例子，如果要在一个野点附近添加一些信息，可以使用下面的命令</p><blockquote><p>text(locator(1), “Outlier”, adj=0)</p></blockquote><p>identify(x, y, labels)<br>允许用户在x,y（使用鼠标左键）定义的点附近绘制相应的labels的组件（如果没有给出labels就给出该点的序号），突显该点。当鼠标的另一个键被点击时（Unix,Windows）返回被选点的序号，在Mac下通过点击图形窗口外来实现这个效果。<br>有时我们更想确定图形中的点，而非它们的位置。例如，我们可能希望从图示中选出某些感兴趣的观测点，然后进行某些操作。通过两个数值向量x,y给定一系列坐标(x; y)，我们可以使用identify()函数：</p><blockquote><p>plot(x,y) &gt; identify(x,y)<br>函数identify()本身不绘图，但是允许用户移动鼠标，在某点附近点击左键。离鼠标指针最近的点将被突显，并标出其序号（也就是它在向量x/y中的位置）。或者使用identify()的labels参数，把某些信息（例如案例名称）作为突显的标志；或者通过plot=FALSE参数取消所有突显标志。当选点的过程结束后，identify()返回所选点的序号；用户可以使用这些序号从x和y中释放所选的点。<br>12.4 使用图形参数</p></blockquote><p>通过图形参数可以定制图形显示的几乎所有方面。R包含大量的图形参数，可以控制的包括线条类型，颜色，图标排列，文本对齐等等。<br>1 持续性变更 (Permanent changes): par()函数</p><p>通过par()函数设定图形参数的值会持续性的更改参数的值，也就是说这之后（在当前设备上）所有对图形函数的调用都受到新值的影响。<br>函数par()用于存取和修改当前图形设备的图形参数列表。<br>par()不带任何参数，返回当前设备所有图形参数和它们的值的列表。<br>par(c(“col”,”lty”))<br>参数为一个字符向量，仅返回参数中指定的图形参数（也是作为一个列表）。<br>par(col=4, lty=2)<br>带指定参数（或一个列表型参数），设定指定图形参数的值，并将参数的原始值作为一个列表返回。<br>所以如果想设定参数绘制一些图形后再恢复成原来的设定，可以这么做：</p><blockquote><p>oldpar &lt;- par(col=4, lty=2)<br>. . . plotting commands . . .<br>par(oldpar)<br>2 临时性变更：图形函数的参数</p></blockquote><p>图形参数也可以作为（几乎）所有图形函数的命名参数。这种方式的效果和用于par()函数的效果是一样的，只不过这种改变只在函数调用的区间内有效。比如：</p><blockquote><p>plot(x, y, pch=”+”)<br>生成一个以加号作为绘图符号的散点图，而不改变后续图形的默认的绘图符号。<br>3 图形参数列表<br>A  图形元素<br>R图表由点、线、文本和多边形（填充区）组成。下面的图形参数控制了图形元素的绘制：<br>pch=”+” 用来绘点的字符。这个默认值随不同的图形驱动是不同的，不过通常都是’±’。除非使用”.”作为绘图字符，否则绘制的点都会比适当的位置高一点或者低一点，而不是恰好在指定位置。<br>pch=4当给定一个0到18的整数时，会生成一个特殊的绘图符号。通过下面的命令可以看这些符号都有什么。<br>legend(locator(1), as.character(0:18), pch=0:18)<br>lty=2 线条类型。并不是所有图形设备都支持多种线条类型（在那些支持的设<br>备上也不全一样），不过线条类型1始终是实线，2及以上的是点、划线或者它们的组合。<br>lwd=2 线条宽度。所需的线条宽度，是”标准”线条宽度的倍数。对line()等函数绘制的线条和坐标轴都有效果。<br>col=2 点、线、文本、填充区和图像使用的颜色。每种图形元素都有其可用的颜色列表，这个参数的值就是颜色在列表中的序号。显然，这个参数值对有限的一类设备有效。<br>font=2 指定文本所使用字体的一个整数。如果可能的话，设备驱动会把1对应普通文本，2对应粗体，3对应斜体，4对应粗斜体。<br>font.axis   font.lab    font.main   font.sub 这几个参数分别指定坐标轴注释，x,y轴的标签，主、副标题所用的字体。<br>adj=-0.1 文本对齐和绘图位置有关。0代表左对齐，1代表右对齐，0.5代表水平的中间位置。当前的值使会图位置到左端距离的比例，所以-0.1在文本和绘图位置之间留10%的空白。<br>cex=1.5 字符缩放。这个值是所需文本字符（包括绘图字符）的大小，与默认文本大小相关。<br>B  坐标轴和标记<br>很多R的高级图形都有坐标轴，你可以使用低级图形函数axis()自己创建坐标轴。坐标轴包含三个主要组件：轴线axis line（线条类型由参数lty控制），标记tick mark（沿着轴线划分单元），标号tick label（用来标出这些单元）。这些组件可以用下面这些参数定制。<br>lab=c(5,7,12)前两个数字分别是x和y轴上所要划分的区间数。第三个数字是坐标轴标签的长度，用字符数来衡量（包括小数点）。参数的值如果选得太小可能导致所有标号都聚在一起。<br>las=1 坐标轴标签的方向。0代表总是和坐标轴平行，1代表总是水平的，2代表总是垂直于坐标轴。<br>mgp=c(3,1,0)坐标轴组件的位置。第一个组件是坐标轴标签到坐标轴的距离，单位是文本行(text lines)。第二个组件是到标号的距离，最后一个是轴的巍直到轴线的距离（一般都是0）。正数代表绘图区域外，负数代表区域内。<br>tck=0.01 标号的长度，绘图区域大小的一个分数作单位。当tck比较小时（小于0.5），就强制x和y轴上的标记为相同大小。tck=1就是生成网格线。取负值时标记画向绘图区域外。内部标记可以使用tck=0.01和mgp=c(1,-1.5,0)。<br>xaxs=”s”   yaxs=”d” 分别是x、y轴的类型。如果是s(standard)或e(extended)类型，那最大和最小的标记都始终在数据区域之外。如果有某个点离边界非常近，那么扩展型(extended)的轴会稍稍扩展一下。这种类型的轴有时会在边界附近留出大片空白。而i(internal)或r(默认值)类型的轴，标记始终在数据区域内，不过r类型会在边界留出少量空白。<br>如果这个参数设为d，就锁定当前轴，对之后绘制的所有图形都用这个轴（直到参数被重新设定为其他的那几个值）。这个参数适用于生成一系列固定尺度的图。<br>C  图边缘（Figure margins）<br>在R中一个单独图形，图（figure），包含一个绘图区(plot region)，以及环绕着这个区域的边缘（其中可能含有坐标轴标签、标题等等），（通常）这两部分以轴为边界。<br>一个典型的图是</p></blockquote><p>控制图的样式的图形参数包括：<br>mai=c(1,0.5,0.5,0)分别是底部，左侧，顶部，右侧的宽度，单位是英寸。<br>mar=c(4,2,2,1)与mai相似，只是单位是文本行(text lines)。<br>由于更改一个就会改变另一个的值，所以在这个意义上，mai和mar是等价的。这个参数的默认值通常都太大了；右侧边缘很少用到，如果没标题，顶部边缘也不需要，左侧和底部的边缘应当足够大，以容纳坐标轴和标号。此外，默认值并没有考虑到设备表面的大小：比如，使用postscript()驱动，height=4参数时，除非用mar，mai另外设定，否则图的边缘就要占上大约50%。使用多图环境时（后面会提到）。边缘会减少一半，不过这在多图共用一页的时候可能还不够。<br>D 多图环境<br>R允许在一页上创建一个n£m的图的阵列。每个图由自己的边缘，图的阵列还有一个可选的外部边缘，如下图所示。</p><p>与多图环境相关的图形参数有：<br>mfcol=c(3, 2)    mfrow=c(2, 4)<br>   设定多图阵列的大小。第一个值是行数，第二个值是列数。这两个参数唯一的区别是mfcol把图按列排入，mfrow把图按行排入。上图所示的版式可用mfrow=c(3,2)创建；上图显示的是绘制四幅图后的情况。<br>mfg=c(2, 2, 3, 2)<br>    当前图在多图环境下的位置。前两个数字是当前图的行、列数；后两个是其在多图阵列中的行列数。这个参数用来在多图阵列中跳转。你甚至可以在后两个数中使用和真值(true value)不同的值，在同一页上得到大小不同的图。<br>fig=c(4, 9, 1, 4)/10<br>    当前图在页面的位置，取值分别是左下角到左边界，右边界，下、上边界的距离与对应边的百分比数。给出的例子是一个页面右下角的图。这个参数可以设定图在页面的绝对位置。<br>oma=c(2, 0, 3, 0)   omi=(0, 0, 0.8, 0)<br>       外部边缘的大小。与mar和mai相似，第一个用文本行作单位，第二个以英寸作单位，从下方开始按照顺时针顺序指定。<br>外部边缘对页标题这类东西很有用。文本可以通过带outer=TRUE参数的mtext()函数加入外部边缘。默认情况下是没有外部边缘的因此必须通过oma或omi指定。<br>函数split.screen()和layout()可以对多个图形作更复杂的排列。<br>12.6 设备驱动</p><p>R几乎可以在任何一种类型的显示器和打印设备上生成（不同质量的）图形。不过，在这之前，需要告诉R要处理的是哪一种设备。这通过启动一个设备驱动来完成。<br>设备驱动通过调用设备驱动函数来启动。<br>某些常用的设备驱动有：<br>X11()[Unix] 使用X11视窗系统<br>windows()[Windows]   使用 Windows 视窗系统<br>postscript()在PostScript打印机上打印或者创建PostScript图形文件<br>pictex()生成一个LATEX文件<br>当一个设备使用完之后，可以通过下面的命令终止设备驱动</p><blockquote><p>dev.off()<br>这个命令可以确保设备已经结束；例如，在某些硬拷贝的设备中，这个命令可以保证每页都已经完成，并且都被传送到打印机了。<br>PostScript文档<br>通过给postscript()函数带上file参数，我们可以把图形以PostScript格式存储到文件中。如果没有给出horizontal=FALSE参数，图形是横向的，你可以通过width和height参数控制图形的大小（图形会自动适应）。例如，命令<br>postscript(“file.ps”, horizontal=FALSE, height=5, pointsize=10)<br>为一个五英寸的图生成一个包含PostScript代码的文件，可以放在文当中。如果命令中的指定的文件名已经存在，将会被覆盖。<br>多重图形设备<br>每个对设备驱动的新调用都会打开一个新的图形设备，在设备列表中加入新的一项。这个设备就成为当前设备，图形输出就传送到这个设备。<br>dev.list()      返回所有活动中设备的序号和名称。在列表位置1的设备始终是空设备(null device)，这个设备不接收任何图形命令。<br>dev.next()    dev.prev()     分别返回当前设备的后一个和前一个设备的序号和名称。<br>dev.set(which=k)     用来把当前设备更改为设备列表中位置k的那个。返回设备的序号和标签。<br>dev.off(k)    终止图形列表位置k的那个图形设备。对于某些设备，比如postscript，这个命令会立刻打印文件或者正常结束文件，具体怎样处理取决于设备是怎样初始化的。<br>dev.copy(device,. . . ,which=k)      dev.print(device,. . . ,which=k)<br>建立一个设备k的拷贝。其中device是一个设备函数，例如postscript，如果需要的话可以在’. . . ‘中指定其它的参数，dev.print效果相似，不过复制的设备会立刻关闭，所以打印硬拷贝这样的终止操作也会被立即执行。<br>graphics.off()      终止列表中的所有图形设备，空设备除外。</p></blockquote><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/20/R笔记/">http://jaymo666.github.io/2017/09/20/R笔记/</a></p>]]></content>
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初级 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>J微信时代，博客阅读</title>
      <link href="/2017/09/20/%E5%BE%AE%E4%BF%A1%E6%97%B6%E4%BB%A3%EF%BC%8C%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB/"/>
      <content type="html"><![CDATA[<p>博客沒有消失，只是变成了知乎，微博了而已<br><a id="more"></a><br><strong>先来看一下博客的定义：</strong><br>博客，英文名为Blogger,为WebLog的混成词。它的正式名称为网络日记，是一种通常由<code>个人管理</code>、<code>不定期</code>张贴新的文章的网站。许多博客专注在<code>特定的课题</code>上提供评论或新闻，其他则被作为<code>个人的日记</code>。比较著名的有新浪、网易等博客。</p><p>随着互联网的发展，曾经的博客渐渐的变得无人问津。</p><p><strong>博客是否会退出历史舞台？<br>或者博客未来可能会变什么样?</strong> </p><blockquote><p>很多人批评「碎片化阅读」，我却觉得碎片化阅读是社会的一个救星。微信的一个巨大功劳，是将阅读重新送回日常生活，提供了碎片化阅读的最好机会。因为人们此前根本连碎片化的阅读都逐渐失去了。我看到朋友圈所有人都在转各种文章，我的一些从不阅读的亲友，如今开始阅读一些短小的内容。这些阅读都是微信重新送回来的。</p></blockquote><p>我们反对的是碎片化阅读，不是利用碎片化时间来阅读。<br>利用零散时间阅读，这是一个可以充分利用时间的表现。我们反对的碎片化阅读指的是浮浅和无视语境的阅读。这和长短无关，和读者有没有整体性的视角有关。</p><p>而博客给了我们记录自己的生活，学习，常常都是很用心写出来的文章。是看了某部电影的感受，学习了某个小技术的总结或应用，是生活的记录，长长的文字，是我们的经历。</p><p>但我们过十年二十年以后，看看自己的博客（希望还在），毕竟是自己的故事，当时的所见所感，不论发自肺腑，大体是暗合心境的，我们的记录翻开的时候就是现在的我与过去的我的相遇，相视一笑。</p><p>随着微博，语音记录等新事物的出现，博客面临着巨大的挑战。据研究报告显示，现今博客用户数量大幅减少，但趋于平稳。也就是说有一批博客的忠实用户存在着。年轻人从16到20出头的年轻人几乎不使用博客。其主要用户是那些30岁左右至40岁左右的人。博客是否会消失主要取决于它自身如何演化。如果把知乎这样的算作博客的话，那这个演化其实已经开始了。博客不会消失，只是不知道变了身的博客对你来说是不是还叫博客而已。</p><p><strong>所以博客沒有消失，只是变成了知乎，微博了而已。</strong></p><!--PC和WAP自适应版--><p><div id="SOHUCS"></div> </p><script type="text/javascript"> (function(){ var appid = 'cysmzRdbl'; var conf = 'prod_7c789e58c2fd9306e64aff79a862b4df'; var width = window.innerWidth || document.documentElement.clientWidth; if (width < 960) { window.document.write('<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '"><\/script>'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName("head")[0]||document.head||document.documentElement;var b=document.createElement("script");b.setAttribute("type","text/javascript");b.setAttribute("charset","UTF-8");b.setAttribute("src",d);if(typeof a==="function"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e==="loaded"||e==="complete"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs("https://changyan.sohu.com/upload/changyan.js",function(){window.changyan.api.config({appid:appid,conf:conf})}); } })(); </script><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/20/微信时代，博客阅读/">http://jaymo666.github.io/2017/09/20/微信时代，博客阅读/</a></p>]]></content>
      
      <categories>
          
          <category> 感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 感想 </tag>
            
            <tag> 写作 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-cli 脚手架总结</title>
      <link href="/2017/09/20/vue-cli%20%E8%84%9A%E6%89%8B%E6%9E%B6%E6%80%BB%E7%BB%93(1)/"/>
      <content type="html"><![CDATA[<p>工地上，脚手架是帮助工人作业搭建的架子。<strong> vue-cli 可以帮助我们写好 vuejs 代码的工具</strong><br><a id="more"></a></p><h2 id="vue-cli-介绍"><a href="#vue-cli-介绍" class="headerlink" title="vue-cli 介绍"></a>vue-cli 介绍</h2><p>工地上，脚手架是帮助工人作业搭建的架子。<strong> vue-cli 可以帮助我们写好 vuejs 代码的工具</strong>，vue-cli 可以做什么：</p><p>1、目录结构<br>2、本地调试<br>3、代码部署<br>4、热更新<br>5、单元测试 （ESlint）</p><blockquote><p>vue-cli 的脚手架项目模板有browserify 和 webpack , 现在自己在用的是webpack , 官网给出了两个模板： webpack-simple 和 webpack 两种。两种的区别在于webpack-simple 没有包括Eslint 检查功能等等功能，普通项目基本用webpack-simple 就足够了.</p></blockquote><h2 id="搭建官方项目模板步骤："><a href="#搭建官方项目模板步骤：" class="headerlink" title="搭建官方项目模板步骤："></a>搭建官方项目模板步骤：</h2><ul><li>$ npm install -g vue-cli</li><li>$ vue init <template-name> <project-name>（例如：$ vue init webpack my-project）</project-name></template-name></li><li>我们还需要把项目的依赖下载下来。使用命令:  cd youdemoname 然后执行<code>npm install</code> 就可以了，这个时候你的项目中有多了一个node_modules 目录</li><li>使用”<code>npm run dev</code>“ 命令来运行项目 “<code>npm-run-bulid</code>“ 来执行发布，会自动生成dist文件</li><li>默认情况下，浏览器打开 <a href="http://localhost:8080，就可以看到脚手架项目初始化的效果了。" target="_blank" rel="noopener">http://localhost:8080，就可以看到脚手架项目初始化的效果了。</a></li></ul><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/20/vue-cli">http://jaymo666.github.io/2017/09/20/vue-cli</a> 脚手架总结(1)/</p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-cli 脚手架总结</title>
      <link href="/2017/09/20/vue-cli%20%E8%84%9A%E6%89%8B%E6%9E%B6%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>工地上，脚手架是帮助工人作业搭建的架子。<strong> vue-cli 可以帮助我们写好 vuejs 代码的工具</strong><br><a id="more"></a></p><h2 id="vue-cli-介绍"><a href="#vue-cli-介绍" class="headerlink" title="vue-cli 介绍"></a>vue-cli 介绍</h2><p>工地上，脚手架是帮助工人作业搭建的架子。<strong> vue-cli 可以帮助我们写好 vuejs 代码的工具</strong>，vue-cli 可以做什么：</p><p>1、目录结构<br>2、本地调试<br>3、代码部署<br>4、热更新<br>5、单元测试 （ESlint）</p><blockquote><p>vue-cli 的脚手架项目模板有browserify 和 webpack , 现在自己在用的是webpack , 官网给出了两个模板： webpack-simple 和 webpack 两种。两种的区别在于webpack-simple 没有包括Eslint 检查功能等等功能，普通项目基本用webpack-simple 就足够了.</p></blockquote><h2 id="搭建官方项目模板步骤："><a href="#搭建官方项目模板步骤：" class="headerlink" title="搭建官方项目模板步骤："></a>搭建官方项目模板步骤：</h2><ul><li>$ npm install -g vue-cli</li><li>$ vue init <template-name> <project-name>（例如：$ vue init webpack my-project）</project-name></template-name></li><li>我们还需要把项目的依赖下载下来。使用命令:  cd youdemoname 然后执行<code>npm install</code> 就可以了，这个时候你的项目中有多了一个node_modules 目录</li><li>使用”<code>npm run dev</code>“ 命令来运行项目 “<code>npm-run-bulid</code>“ 来执行发布，会自动生成dist文件</li><li>默认情况下，浏览器打开 <a href="http://localhost:8080，就可以看到脚手架项目初始化的效果了。" target="_blank" rel="noopener">http://localhost:8080，就可以看到脚手架项目初始化的效果了。</a></li></ul><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/20/vue-cli">http://jaymo666.github.io/2017/09/20/vue-cli</a> 脚手架总结/</p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 初级 </tag>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>J微信时代，博客阅读</title>
      <link href="/2017/09/20/%E5%BE%AE%E4%BF%A1%E6%97%B6%E4%BB%A3%EF%BC%8C%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB(1)/"/>
      <content type="html"><![CDATA[<p>博客沒有消失，只是变成了知乎，微博了而已<br><a id="more"></a><br><strong>先来看一下博客的定义：</strong><br>博客，英文名为Blogger,为WebLog的混成词。它的正式名称为网络日记，是一种通常由<code>个人管理</code>、<code>不定期</code>张贴新的文章的网站。许多博客专注在<code>特定的课题</code>上提供评论或新闻，其他则被作为<code>个人的日记</code>。比较著名的有新浪、网易等博客。</p><p>随着互联网的发展，曾经的博客渐渐的变得无人问津。</p><p><strong>博客是否会退出历史舞台？<br>或者博客未来可能会变什么样?</strong> </p><blockquote><p>很多人批评「碎片化阅读」，我却觉得碎片化阅读是社会的一个救星。微信的一个巨大功劳，是将阅读重新送回日常生活，提供了碎片化阅读的最好机会。因为人们此前根本连碎片化的阅读都逐渐失去了。我看到朋友圈所有人都在转各种文章，我的一些从不阅读的亲友，如今开始阅读一些短小的内容。这些阅读都是微信重新送回来的。</p></blockquote><p>我们反对的是碎片化阅读，不是利用碎片化时间来阅读。<br>利用零散时间阅读，这是一个可以充分利用时间的表现。我们反对的碎片化阅读指的是浮浅和无视语境的阅读。这和长短无关，和读者有没有整体性的视角有关。</p><p>而博客给了我们记录自己的生活，学习，常常都是很用心写出来的文章。是看了某部电影的感受，学习了某个小技术的总结或应用，是生活的记录，长长的文字，是我们的经历。</p><p>但我们过十年二十年以后，看看自己的博客（希望还在），毕竟是自己的故事，当时的所见所感，不论发自肺腑，大体是暗合心境的，我们的记录翻开的时候就是现在的我与过去的我的相遇，相视一笑。</p><p>随着微博，语音记录等新事物的出现，博客面临着巨大的挑战。据研究报告显示，现今博客用户数量大幅减少，但趋于平稳。也就是说有一批博客的忠实用户存在着。年轻人从16到20出头的年轻人几乎不使用博客。其主要用户是那些30岁左右至40岁左右的人。博客是否会消失主要取决于它自身如何演化。如果把知乎这样的算作博客的话，那这个演化其实已经开始了。博客不会消失，只是不知道变了身的博客对你来说是不是还叫博客而已。</p><p><strong>所以博客沒有消失，只是变成了知乎，微博了而已。</strong></p><!--PC和WAP自适应版--><p><div id="SOHUCS"></div> </p><script type="text/javascript"> (function(){ var appid = 'cysmzRdbl'; var conf = 'prod_7c789e58c2fd9306e64aff79a862b4df'; var width = window.innerWidth || document.documentElement.clientWidth; if (width < 960) { window.document.write('<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '"><\/script>'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName("head")[0]||document.head||document.documentElement;var b=document.createElement("script");b.setAttribute("type","text/javascript");b.setAttribute("charset","UTF-8");b.setAttribute("src",d);if(typeof a==="function"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e==="loaded"||e==="complete"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs("https://changyan.sohu.com/upload/changyan.js",function(){window.changyan.api.config({appid:appid,conf:conf})}); } })(); </script><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/20/微信时代，博客阅读(1)/">http://jaymo666.github.io/2017/09/20/微信时代，博客阅读(1)/</a></p>]]></content>
      
      <categories>
          
          <category> 感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 感想 </tag>
            
            <tag> 写作 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>R笔记</title>
      <link href="/2017/09/20/R%E7%AC%94%E8%AE%B0(1)/"/>
      <content type="html"><![CDATA[<p>一门可视化语言。<br><a id="more"></a><br><a href="http://bayes.math.montana.edu/Rweb/Rnotes/R.html" target="_blank" rel="noopener">http://bayes.math.montana.edu/Rweb/Rnotes/R.html</a></p><p>前言：关于R<br>在R的官方教程里是这么给R下注解的:一个数据分析和图形显示的程序设计环境(A system for data analysis and visualization which is built based on S language.)。<br>R的源起<br>R是S语言的一种实现。S语言是由 AT&amp;T贝尔实验室开发的一种用来进行数据探索、统计分析、作图的解释型语言。最初S语言的实现版本主要是S-PLUS。S-PLUS是一个商业 软件，它基于S语言，并由MathSoft公司的统计科学部进一步完善。后来Auckland大学的Robert Gentleman 和 Ross Ihaka 及其他志愿人员开发了一个R系统。R的使用与S-PLUS有很多类似之处，两个软件有一定的兼容性。<br>R is free<br>R是用于统计分析、绘图的语言和操作环境。R是属于GNU系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。<br>R是一套完整的数据处理、计算和制图软件系统。其功能包括：数据存储和处理系统；数组运算工具（其向量、矩阵运算方面功能尤其强大）；完整连贯的统计分析工具；优秀的统计制图功能；简便而强大的编程语言：可操纵数据的输入和输入，可实现分支、循环，用户可自定义功能。<br>R是一个免费的自由软件，它有UNIX、LINUX、MacOS和WINDOWS版本，都是可以免费下载和使用的,在那儿可以下载到R的安装程序、各种外挂程序和文档。在R的安装程序中只包含了8个基础模块，其他外在模块可以通过CRAN获得。<br>R的特点<br>(1) 有效的数据处理和保存机制。<br>(2) 拥有一整套数组和矩阵的操作运算符。<br>(3) 一系列连贯而又完整的数据分析中间工具。<br>(4) 图形统计可以对数据直接进行分析和显示，可用于多种图形设备。<br>(5) 一种相当完善、简洁和高效的程序设计语言。它包括条件语句、循环语句、用户自定义的递归函数以及输入输出接口。<br>(6) R语言是彻底面向对象的统计编程语言。<br>(7) R语言和其它编程语言、数据库之间有很好的接口。<br>(8) R语言是自由软件，可以放心大胆地使用，但其功能却不比任何其它同类软件差。<br>(9) R语言具有丰富的网上资源<br>一   入门训练</p><ol><li>获取帮助<blockquote><p>help.start() 开启帮助文档<br>help(solve) 显示某命令的帮助信息，或者<br>?solve<br> 对于由特殊字符指定的功能，这些参数必须用单引号或双引号括起来，使之成为一个“字符串”,如<br>help(“[[“)<br> 与某个主题相关的例子通常可以用下面的命令得到<br>example(topic)</p></blockquote></li><li><p>命令简介<br> R对大小写是敏感的；名称不能以数字开始；<br> 基本的命令由表达式或者赋值语句组成。如果一个表达式被作为一条命令给出，它将被求值、打印而表达式的值并不被保存。一个赋值语句同样对表达式求值之后把表达式的值传给一个变量，不过并不会自动的被打印出来；<br> 命令由分号(;)来分隔，或者另起新行；<br> 基本命令可以由花括号(f和g)合并为一组复合表达式；<br> 注释几乎可以被放在任何地方，只要是以井号( # )开始，到行末结束；<br> 如果一个命令在行莫仍没有结束，R将会给出一个不同的提示符，默认的是‘+’。</p></li><li><p>命令文件的执行和输出转向到文件<br>如果命令存储于一个外部文件中，比如工作目录work中的commands.R，他们可以随时在R的任务中被执行</p><blockquote><p>source(“commands.R”)在Windows中Source也可以由File菜单执行。<br>函数sink，<br>sink(“record.lis”)<br>将把所有后续的输出由终端转向一个外部文件，record.lis。命令<br>sink()   将把信息重新恢复到终端上。</p></blockquote></li><li>数据的保持与对象的清除<br>R所创建、操作的实体是对象。对象可以是变量、数组、字符串、函数以及由这些元素组成的其它结构；<blockquote><p>objects()     用来显示目前存储在R中的对象的名字。而当前存储的所有对象的组合被称为workspace；<br>清除对象可以使用rm命令：<br>rm(x, y, z, ink, junk, temp, foo, bar)<br>所有在一个R任务中被创建的对象都可以在文件中被永久保存，并在其它的R任务中被使用。在每个R任务结束时用户都有机会保存当前有效的所有对象。如果用户这样做的话，对象将被写入当前目录一个名为.RData。当R被再次启动时R会从这个文件中再载入workspace。同时相关的命令记录也被载入。<br>所以，推荐大家在用R进行不同的分析时分别使用不同的工作目录。</p></blockquote></li><li>基本数据结构</li></ol><p>数值型(numeric）<br>1,1.2,3.1415926<br>复数型(complex)<br>1+2i<br>字符型(character)<br>‘A’/ “hello world!”<br>逻辑型(logical)<br>TRUE / FALSE</p><ol><li>基本数据对象</li></ol><p>向量(vector), 见下节<br>矩阵(matrix)：<br>更一般的说数组是向量在多维情况下的一般形式。事实上它们是可以被两个或更多的指标索引的向量，并且以特定的方式被打印出来。<br>因子(factors) 提供了一种处理分类数据的更简介的方式。<br>列表(list)：<br>是向量的一种一般形式，并不需要保证其中的元素都是相同的类型，而且其中的元素经常是向量和列表本身。<br>数据框(data frame)：<br>是一种与矩阵相似的结构，其中的列可以是不同的数据类型。可以把数据框看作一种数据”矩阵”，它的每行是一个观测单位，而且(可能)同时包含数值型和分类的变量。<br>函数( function)：<br>能够在R的workspace中存储的对象。我们可以通过函数来扩展R的功能。<br>二   简单操作，数值与向量<br>2.1 向量与赋值<br>R对命名了的数据结构进行操作。最简单的数据结构是数字向量；如，</p><blockquote><p>x &lt;- c(10.4, 5.6, 3.1, 6.4, 21.7)    c()是创建函数，赋值运算符是’&lt;-‘，与函数assign()等价<br>assign(“x”, c(10.4, 5.6, 3.1, 6.4, 21.7))  也可以写成：<br>c(10.4, 5.6, 3.1, 6.4, 21.7) -&gt; x<br>如果一个表达式被当作一个完整的命令，它的值将被打印到终端但不被储存。<br>单独输入x则会将值打印出来。也可以打印倒数：<br>1/x<br>y &lt;- c(x, 0, x)   也可以将向量作为元素。<br>2.2 向量运算<br>    操作是按照向量中的元素一个一个进行的。同一个表达式中的向量并不需要具有相同的长度。如果它们的长度不同,表达式的结果是一个与表达式中最长向量有相同长度的向量。表达式中较短的向量会根据它的长度被重复使用若干次(不一定是整数次)，直到与长度最长的向量相匹配。而常数很明显的将被不断重复。如，<br>v &lt;- 2<em>x + y + 1<br>常用运算有：<br>+，-，</em>，/，^（次方）；<br>log, exp, sin, cos, tan,sqrt等；<br>max和min的作用是选出所给向量中最大的或最小的元素；<br>range函数的值是一个长度为2的向量，即c(min(x),max(x))<br>length(x)返回了向量x中元素的个数，也就是x的长度。<br>sum(x)给出了x中所有元素的总和；<br>prod(x)给出x中所有元素的乘积；<br>mean(x)和var(x)，分别计算样本均值和样本方差，这两个函数分别相当于sum(x)/length(x)，sum((x-mean(x)) ^2)/(length(x) -1)。如果var()的参数是一个n<em>p的矩阵，那么函数的值是一个p</em>p的样本协方差矩阵，认为每行是一个p变量的样本向量。<br>sort(x)返回一个与x具有相同长度的向量，其中的元素按招升序排列。还有其他更灵活的排序功能(参见order()和sort.list())。<br>pmax和pmin将返回一个与最长的向量长度相等的向量，向量中的元素由参数中所有向量在相应位置的最大值(最小值)组成；<br>如果要使用复数，需要直接给出一个复数部分。因此sqrt(-17)将会返回NaN(无效数值)和一个警告，而sqrt(-17+0i)将按照复数进行运算。<br>2.3 生成序列<br>最简单的方法是用冒号‘：’，冒号具有最高运算优先级。例如1:30就是向量c(1,2,. . .,29,30)。30:1构造一个递减序列。<br>利用seq()函数构造序列：有五个参数，from, to, by, length, along<br>                                       from, to可以不写参数名，seq(2,10)就相当于2:10。<br>                                       by指定步长，默认为1，如seq(-5, 5, by=.2)即为c(-5.0, -4.8, -4.6, …, 4.6, 4.8, 5.0)<br>                                       length指定序列长度，如seq(length=51, from=-5, by=.2)，等同于seq(-5, 5, by=.2)<br>                                       along=vector只能单独使用，产生一个“1:length(vector)”序列。类似的函数是rep(),这个函数可以用多种复杂的方法来<br>                                           复制一个对象。最简单的形式是&gt; s5 &lt;- rep(x, times=5)<br>2.4 逻辑向量</p></blockquote><p>TRUE, FALSE, 和NA(not available), 前两个可以简写为T和F，但T/F并不是系统保留字，可以被用户覆盖，所以最好还是不要简写。<br>逻辑向量是由条件给出的，如下列语句令temp成为一个与x长度相同，相应位置根据是否与条件相符而由TRUE或FALSE组成的向量：</p><blockquote><p>temp <- x=""> 13<br>逻辑操作符包括&lt;, &lt;=, &gt;, &gt;=,完全相等==和不等于!=，与或非分别为&amp;, |, !。<br>在普通运算中，FALSE当做0而TRUE当做1。<br>2.5 缺失值<br>NA(not available): 一般来讲一个NA的任何操作都将返回NA。<br>     is.na(x)返回一个与x等长的逻辑向量，并且由相应位置的元素是否是NA来决定这个逻辑向量相应位置的元素是TRUE还是FALSE。<br>     x==NA是一个与x具有相同长度而其所有元素都是NA的向量。<br>NaN(Not a Number): 由数值运算产生，如0/0, Inf-Inf.<br>     is.na(x)对于NA和NaN值都返回TRUE，<br>     is.nan(x)只对NaN值返回TRUE。<br>2.6 字符向量</-></p></blockquote><p>字符串在输入时可以使用单引号(‘)或双以号(“);  在打印时用双引号(有时不用引号)。<br>R使用与C语言风格基本相同的转义符, 所以输入\打印的也是\, 输入” 打印引号”,  n: 换行, t: tab, b: 回格。<br>字符向量可以通过函数c()连接；<br>paste()可以接受任意个参数，并从它们中逐个取出字符并连成字符串，形成的字符串的个数与参数中最长字符串的长度相同。如果参数中包含数字的话，数字将被强制转化为字符串。在默认情况下，参数中的各字符串是被一个空格分隔的，不过通过参数sep=string 用户可以把它更改为其他字符串，包括空字符串。例如：</p><blockquote><p>labs &lt;- paste(c(“X”,”Y”), 1:10, sep=””)  使变量labs成为字符变量c(“X1”, “Y2”, “X3”, “Y4”, “X5”, “Y6”, “X7”, “Y8”, “X9”, “Y10”)<br>2.7 index vector—数据集子集的选择与修改</p></blockquote><p>任何结果为一个向量的表达式都可以通过追加索引向量(index vector)来选择其中的子集。<br>1 逻辑的向量。</p><blockquote><p>y <- x[!is.na(x)]="" 表示将向量x中的非na元素赋给y；="" (x+1)[(!is.na(x))="" &="" x="">0] -&gt; z     表示创建一个对象z，其中的元素由向量x+1中与x中的非缺失值和正数对应的向量组成。</-></p><ol><li>正整数的向量<br>x[6]    是x的第六个元素<br>x[1:10]       选取了x的前10个元素(假设x的长度不小于10)。<br>c(“x”,”y”)[rep(c(1,2,2,1), times=4)]     产生了一个字符向量，长度为16，由”x”, “y”, “y”, “x”重复4次而组成。</li><li>负整数的向量<br>y &lt;- x[-(1:5)]       表示向量y取向量x前5个元素以外的元素。</li><li>字符串的向量<br>只存在于拥有names属性并由它来区分向量中元素的向量。这种情况下一个由名称组成的子向量起到了和正整数的索引向量相同的效果。<br>fruit &lt;- c(5, 10, 1, 20)<br>names(fruit) &lt;- c(“orange”, “banana”, “apple”, “peach”)<br>lunch &lt;- fruit[c(“apple”,”orange”)]<br>子集的修改<br>x[is.na(x)] &lt;- 0    表示将向量x中所以NA元素用0来代替<br>y[y &lt; 0] &lt;- -y[y &lt; 0]      表示将向量(-y)中 与向量y的负元素对应位置的元素 赋值给 向量y中 与向量y负元素对应的元素。作用相当于：<br>y &lt;- abs(y)<br>三  对象，模式和属性<br>3.1 固有属性：模式和长度<br>对象是R所进行操作的实体，对象可以是向量、列表等，详见1.6.<br>对象的模式包括numeri，ccomplex，character，logical，list，function，expression等。可以用mode(object)查看。<br>对象的长度是对象的另一固有属性。可以用length(object)查看。<br>attribute(object)可以查看更深入的属性。<br>模式的转换<br>在允许的情况下(大多数情况都是允许的)，R可以完成各种模式的转换。例如：d&lt;-as.character(z)，将数值向量z&lt;-(0:9)转化为字符向量c(“0”, “1”, “2”, …, “9”)。as.integer(d)将d转化为数值向量。<br>R中很多形式为as.something()的函数，可以完成从一个模式向另一个模式的转化，或者是令对象取得它当前模式不具有的某些属性。<br>3.2 改变对象的长度<br>e &lt;- numeric()    产生一个numeric型的空向量e。character()等类似。此时长度为对象0。<br>此时新添加一个元素会使e的长度自动调整。<br>e[3] &lt;- 17    令e为一个长度为3的向量（此时，该向量的前两个元素都是NA）<br>缩短（截断）一个对象的长度，只需要一个赋值命令。因此，若alpha是一个长度为10的对象，下面的命令<br>alpha &lt;- alpha[2 * 1:5]<br>3.3 属性的获取和设置</li></ol></blockquote><p>函数attributes(object)将给出当前对象所具有的所有非基本属性（长度和模式属于基本属性）的一个列表。<br>函数attr(object,name)可以被用来选取一个指定的属性。除了为某些特殊的目的创建新属性这样特殊的环境下，这些函数很少被用到。<br>当函数attr()用在赋值语句左侧时，既可以是将对象与一种新的属性关联，也可以是对原有属性的更改。例如</p><blockquote><p>attr(z,”dim”) &lt;- c(10,10)         另R将z作为一个10X10的矩阵看待。<br>3.4 对象的类别<br>对象的一个特别属性，类别，被用来指定对象在R编程中的风格。比如：如果对象类别”data.frame”则会以特定方式处理。<br>unclass()可以去除对象的类别。<br>summary()可以查看对象的基本信息（min, max, mean, etc.）<br>四  有序因子和无序因子</p></blockquote><p>因子是一种向量对象，它给自己的组件指定了一个离散的分类（分组），它的组件由其他等长的向量组成。R提供了有序因子和无序因子。<br>通俗点说，因子就是将对象的值分成不同的组（levels）。<br>用函数factor()创建一个因子，levels按序排列(字母序或数值序)。<br>例如province&lt;-c(“四川”,”湖南”,”江苏”,”四川”,”四川”,”四川”,”湖南”,”江苏”,”湖南”,”江苏”)，为province创建因子：</p><blockquote><p>pf&lt;-factor(province)   创建province的因子pf<br>pf     打印出来<br> [1] 四川 湖南 江苏 四川 四川 四川 湖南 江苏 湖南 江苏<br>Levels: 湖南 江苏 四川<br>函数levels()可以用来观察因子中有多少不同的levels。<br>假如我们拥有这些省份考生的分数：<br>score&lt;-c(95,86,84,92,84,79,86,99,85,90)<br>函数tappley()可以用来计算各省的平均分数，函数tapply()的作用是对它第一个参数的组件中所包含的每个组应用一个参数三指定的函数。<br>smeans&lt;-tapply(score,pf,mean)<br>smeans<br>    湖南     江苏     四川<br>85.66667 91.00000 87.50000<br>再例如，下面命令会给出各组的length<br>tapply(score,pf,length)<br>湖南 江苏 四川<br>   3    3    4 </p></blockquote><p>函数ordered()可以创建有序因子</p><blockquote><p>ordered(province)<br> [1] 四川 湖南 江苏 四川 四川 四川 湖南 江苏 湖南 江苏<br>Levels: 湖南 &lt; 江苏 &lt; 四川</p></blockquote><p>五 数组和矩阵<br>5.1 数组<br>数组可以看成一个由递增下标表示的数据项的集合，例如数值。<br>数组的生成<br>如果一个向量需要在R中以数组的方式被处理，则必须含有一个维数向量作为它的dim属性。<br>维度向量由dim()指定，例如，z是一个由1500个元素组成的向量。下面的赋值语句</p><blockquote><p>dim(z) &lt;- c(3,5,100)        使它具有dim属性，并且将被当作一个3X5X100的数组进行处理。 c(3,5,100) 就是他的维度向量。<br>还可以用到像matrix()和array()这样的函数来赋值。比如<br>array(1:20, dim=c(4,5))<br>matrix(1:24, 3,4)<br>数据向量中的值被赋给数组中的值时，将遵循与FORTRAN相同的原则”主列顺序”，即第一个下标变化的最快，最后的下标变化最慢。<br>数组的运算<br>数组可以在算数表达式中使用，结果也是一个数组，这个数组由数据向量逐个元素的运算后组成，通常参与运算的对象应当具有相同的dim属性。<br>5.2 数组的索引和数组的子块</p></blockquote><p>数组中的单个元素可以通过下标来指定，下标由逗号分隔，写在括号内。<br>我们可以通过在下标的位置给出一个索引向量来指定一个数组的子块，不过如果在任何一个索引位置上给出空的索引向量，则相当于选取了这个下标的全部范围。<br>如a[2,,]，a[,3,]等<br>5.3 索引数组<br>除了索引向量，还可以使用索引数组来指定数组的某些元素。<br>例如：有4X5的数组a，若要得到a中的a[1,3], a[2,2] 和a[3,1]这三个元素，可以生成索引向量i，然后用a[i]得到它们。</p><blockquote><p>a &lt;- array(1:20,dim=c(4,5)) # Generate a 4 by 5 array.<br>i &lt;- array(c(1:3,3:1),dim=c(3,2))<br>i<br>[,1] [,2]<br>[1,] 1 3<br>[2,] 2 2<br>[3,] 3 1<br>a[i]<br>[1] 9 6 3<br>a[i] &lt;- 0   # 将这三个元素用0替换。<br>5.4 向量，数组的混合运算<br>表达式从左到右被扫描；<br>参与运算的任意对象如果大小不足，都将被重复使用直到与其他参与运算的对象等长；<br>当较短的向量和数组在运算中相遇时，所有的数组必须具有相同的dim属性，否则返回一个错误；<br>如果有任意参与运算的向量比参与运算的矩阵或数组长，将会产生错误；<br>如果数组结构正常声称，并且没有错误或者强制转换被应用于向量上，那么得到的结果与参与运算的数组具有相同的dim属性。<br>5.5 矩阵的运算<br>构建分区矩阵：cbind()和rbind()，cbind()按照水平方向，或者说按列的方式将矩阵连接到一起。rbind()按照垂直的方向，或者说按行的方式将矩阵连接到一起。</p></blockquote><p>外积：操作符是%o%:</p><blockquote><p>ab &lt;- a %o% b   或者<br>ab &lt;- outer(a, b, “<em>“)<br>其中的乘法操作可以由任意一个双变量的函数替代。<br>广义转置：函数t(A)，或aperm(A, c(2,1))；<br>获取行数/列数：nrow(A)和ncol(A)分别返回矩阵A的行数和列数。<br>矩阵乘法：操作符为%</em>%；<br>交叉乘积（cross product）：crossprod(X，Y)等同于t(X) %*% y，crossprod(X)等价于crossprod(X, X)；<br>diag(v)：如果v是向量，diag(v)返回一个由v的元素为对角元素的对角矩阵。<br>               如果v为矩阵，diag(v)返回一个由v主对角元素组成的向量。<br>               如果v只是一个数值，那么diag(v)是一个vXv的单位矩阵。</p></blockquote><p>特征值和特征向量：eigen(Sm)。这个函数的结果是由名为values和vectors的两部分组成的列表。如果只是需要特征值：eigen(Sm)$values<br>最小二乘拟合即QR分解：lsfit(), qr()。<br>强制转换为向量：as.vector()，或者直接c().<br>解线性方程和求矩阵的逆，奇异值分解与行列式见；<br>六  列表和数据帧<br>6.1 列表<br>列表是由称作组件的有序对象集合构成的对象。组件的模式或类型不一定相同。<br>形如Lst &lt;- list(name_1=object_1, . . ., name_m=object_m)的赋值将创建一个包含m个组件的列表，并根据参数中指定的名称为其命名。（其名称可以自由选取）。如果它们的名称被省略，组件将只是被编号。例如：</p><blockquote><p>Lst &lt;- list(name=”Fred”, wife=”Mary”, no.children=3,child.ages=c(4,7,9))<br>所使用的组件是被复制到新的列表中的，对原始对象没有影响。<br>组件总是被编号的，并且可以通过编号指定。<br>Lst[[1]] 即为”Fred”，也可以用 Lst$name，Lst[[“name”]]指定。如果Lst[[4]]是一个有下标的数组，Lst[[4]][1]就是它的第一项。<br>区分Lst[[1]]和Lst[1]，’[[…]]’是选择单个元素时使用的操作符，而’[…]’是一个一般的下标操作符。因此，前者代表列表Lst中的第一个对象；后者是列表Lst的子列表，仅包含列表的第一项。<br>组件的名称可以缩写，可缩写的程度是只要能令组件被唯一的识别就可以了。如：Lst$na等价于Lst$name， Lst$w等价于Lst$wife。<br>扩展列表<br>可以通过指定额外组件的方式。例如<br>Lst[5] &lt;- list(matrix=Mat)<br>连接列表<br>当连接函数c()的参数为列表时，其结果也是一个模式为列表的对象。由参数中的列表作为组件依次连接而成。<br>list.ABC &lt;- c(list.A, list.B, list.C)<br>6.2 数据帧</p></blockquote><p>数据帧是类别为”data.frame”的列表；<br>数据帧会被当作各列具有不同模式和属性的矩阵。<br>数据帧按照矩阵的方式显示，选取的行或列也按照矩阵的方式来索引。<br>创建数据帧<br>直接创建：那些满足对数据帧的列（组件）限制的对象可以通过函数data.frame来构建成为一个数据帧</p><blockquote><p>t &lt;- data.frame(home=statef, loot=income, shot=incomef)<br>强制转换：如果一个列表的组件与数据帧的限制一致，这个列表就可以通过函数as.data.frame()强制转化为一个数据帧。<br>外部文件：创建数据帧最简单的方法应当是使用read.table()函数从外部文件中读取整个数据帧。<br>数据帧和列表的限制<br>1 组件必须是向量（数值型，字符形，逻辑型），因子，数值矩阵，列表，或其他数据帧；<br>2 矩阵，列表，数据帧向新数据帧提供的变量数分别等于它们的列数，元素数和变量数；<br>3 数值向量，逻辑值和因子在数据帧中保持不变，字符向量将被强制转化为因子，其水平是字符向量中所出现的值；<br>4 数据帧中作为变量的向量结构必须具有相同的长度，而矩阵结构应当具有相同的行大小。</p></blockquote><p>挂接和卸载数据帧<br>当觉得使用’$’引用数据帧元素(如’t$home’)麻烦时，可以进行数据帧挂接</p><blockquote><p>attach(t)      这样可以直接引用数据帧内的元素，而无需’$’，前提是数据帧外没有同名的变量(如name)。<br>挂接后若要对数据帧元素进行赋值操作，仍需用’$’，否则视为赋值给数据帧外的元素。<br>赋值后必须要先卸载(detach)再重新挂接后，新值才可见。<br>detach(t)</p></blockquote><p>attach()是具有一般性的函数，即它不仅能够将目录和数据帧挂接在搜索路径上，还能挂接其他类别的对象。特别是模式为”list”的对象可以通过相同的方式挂接：</p><blockquote><p>attach(any.old.list)<br>任何被挂接的对象都可以用detach来卸载，通过指定位置编号或者指定名称这样的方式.<br>搜索路径<br>函数search()将显示目前的搜索路径，可以用来查看数据帧/列表的挂接状态。<br>ls()（或objects()）命令可以用来检查搜索路径任意位置上的内容。如：ls(), ls(2), ls(t)<br>R可以在搜索路径中包含至多20个项目,列表和数据帧只能在位置2或更靠后的位置上挂接。</p></blockquote><p>数据帧使用惯例</p><p>1 将每个独立的，适当定义的问题所包含的所有变量收入同一个数据帧中，并赋予合适的、易理解、易辨识的名称；<br>2 处理问题时，当相应的数据帧挂接于位置2，同时在第1层工作目录下存放操作的数值和临时变量；<br>3 在结束一次工作之前，将你认为对将来有参考价值的变量通过$标记的形式添加到数据帧里面，然后detach()；<br>4 最后，将工作目录下所有不需要的变量剔除，并且尽量将剩下多余的临时变量都清除干净。<br>这样我们可以很简单的在同一个目录下处理多个问题，而且对每个问题都可以使用x,y,z这样的变量名。<br>七  从文件中读取数据<br>7.1 函数read.table()<br>该函数可以直接将文件中完整的数据帧读入。此时文件要符合特定的格式：<br>1 第一行应当提供数据帧中每个变量的名称；<br>2 每一行(除变量名称行)应包含一个行标号和各变量的值。<br>3 若没有表头(变量名称行)，也没有行标号，只有变量值，则默认变量名称为”v1”,”v2”…<br>4 若有表头，但没有行标号，则可以指定参数header=TRUE.<br>7.2 函数scan()<br>该函数从键盘或文件中读取数据，并存入向量或列表中。</p><blockquote><p>inp &lt;- scan(file, what)<br>第一个参数是文件名,如“test.txt”，若为“”或空，则从键盘读入数据；<br>第二个参数用于确定读入数据的模式。  如：list(“”,0,0) 指定读入到列表中，列表有三项，且列表第一项是字符型，第二三项是数值型。若为0，则指定读入到一个数值向量中，若为“”则指定读入到字符向量中。<br>7.3 内置数据集的读取</p></blockquote><p>R本身提供超过50个数据集，同时在功能包（包括标准功能包）中附带更多的数据集。与S-Plus不同，这些数据即必须通过data函数载入。</p><blockquote><p>data()   #获得基本系统提供的数据集列表，然后通过形如<br>data(infert)    #来载入名为infert的数据集<br>从其他package中载入数据集<br>data(package=”nls”)      #查看nls中数据集<br>data(Puromycin, package=”nls”)     #读取nls中Puromycin数据集。<br>用library()挂接package后，它的数据集也自动包含到搜索路径中了。<br>library(nls)    #载入package nls<br>data()      #查看数据集<br>date(Puromycin)    #载入Puromycin数据集</p></blockquote><p>7.4  编辑数据<br>在使用一个数据帧或矩阵时，edit提供一个独立的工作表式编辑环境。</p><blockquote><p>xnew &lt;- edit(xold)       #对数据集xold进行编辑。并在完成时将改动后的对象赋值给xnew<br>xnew &lt;- edit(data.frame())        #可以通过工作表界面录入新数据。<br>fix()函数用于直接修改已有的对象，等价于  x&lt;-edit(x).<br>八 概率分布<br>8.1 R是一个统计表集合(略读)</p></blockquote><p>R提供了一套完整的统计表集合。函数可以对累积分布函数P(X&lt;=x)，概率密度函数，分位函数（对给定的q，求满足P(X&lt;=x) &gt; q的最小x）求值，并根据分布进行模拟。</p><p>对于所给的名称，加前缀’d’代表密度(density)，’p’代表CDF，’q’代表分位函数，’r’代表模拟（随即散布）。这几类函数的第一个参数是有规律的，形为dxxx的函数为x，pxxx的函数为q，qxxx的函数为p，rxxx的函数为n（rhyper和rwilcox是特例，他们的第一个参数为nn）。目前为止，非中心参数(non-centrality parameter)仅对CDF和少数几个其他函数有效，细节请参考在线帮助。<br>所有pxxx和qxxx的函数都具有逻辑参数lower.tail和log.p，而所有的dxxx函数都有参数log，这个是我们可以直接通过</p><ul><li>pxxx(t, …, lower.tail = FALSE, log.p = TRUE)<br>获取，比如说，累积失效函数（cumulative/integrated hazard function），H(t) =-log(1-F(t))，以及更精确的对数似然（通过dxxx(…, log = TRUE)）。<br>此外，对于来自正态分布，具有学生化样本区间的分布还有ptukey和qtukey这样的函数。下面是一些例子<blockquote><h2 id="2-tailed-p-value-for-t-distribution"><a href="#2-tailed-p-value-for-t-distribution" class="headerlink" title="2-tailed p-value for t distribution"></a>2-tailed p-value for t distribution</h2><p>2*pt(-2.43, df = 13)</p><h2 id="upper-1-point-for-an-F-2-7-distribution"><a href="#upper-1-point-for-an-F-2-7-distribution" class="headerlink" title="upper 1% point for an F(2, 7) distribution"></a>upper 1% point for an F(2, 7) distribution</h2><p>qf(0.99, 2, 7)<br>8.2 检测数据集的分布</p></blockquote></li></ul><p>函数summary和fivenum这两个函数可以给出摘要，后者只给出数值；<br>函数stem可以将数值统计结果以类似直方图的方式显示出来；<br>函数hist()可以绘制直方图；<br>函数density和line可以获得更漂亮的密度图；<br>功能包fun中的ecdf函数能绘制经验累积分布函数；<br>还可以进行拟合正态分布，覆盖拟合CDF；<br>还可以绘制Quantile-quantile (Q-Q)图有助于我们更细致的检测其分布形态；<br>8.3 单样本和两样本检验（略读）<br>九  语句组、循环和条件操作</p><p>R是一种表达式语言，也就是说其命令类型只有函数或表达式，并由它们返回一个结果。<br>语句组由花括号‘{ }’确定，此时结果是该组中最后一个能返回值的语句的结果。<br>条件语句</p><blockquote><p>if (expr_1) expr_2 else expr_3<br>其中条件表达式expr1必须返回一个逻辑值，操作符&amp;&amp;和||经常被用于条件部分。<br>&amp;和|与&amp;&amp;，||的区别在于，&amp;和|按照逐个元素的方式进行计算，&amp;&amp;和||对向量的第一个元素进行运算，只有在必需的时候才对第二个参数求值。<br>if/else结构的向量版本是函数ifelse，其形式为ifelse (condition,a,b)，产生函数结果的规则是：如果condition[i]为真，对应a[i]元素；反之对应的是b[i]元素。根据这个原则函数返回一个由a,b中相应元素组成的向量，向量长度与其最长的参数等长。<br>循环语句<br>for (name in expr_1) expr_2<br>其中name是循环变量，expr1是一个向量表达式（通常是1:20这样的序列），而expr2经常是一个表达式语句组，expr2随着name依次取expr1结果向量的值而被多次重复运行。<br>repeat(expr)<br>while(condition) expr</p></blockquote><p>break语句可以用来中断任何循环，可能是非正常的中断。而且这是中止repeat循环的唯一方式。<br>next语句可以中止一个特定的循环，跳至下一个.<br>十 编写自己的函数<br>10.1 函数的定义</p><blockquote><p>name &lt;- function(arg_1, arg_2, …) expression<br>expression是一个R表达式（通常是表达式语句组），并使用参数arg_i来计算出一个数值，表达式的值就是函数的返回值。<br>函数调用的形式通常都是name(expr1,expr2,…)<br>10.2 定义新的二元操作符<br>可以将函数定义为新的二元操作符：<br>“%!%” &lt;- function(X, y) { … }<br>正如矩阵乘法运算符，%*%，和矩阵外积运算符%o%<br>10.3 指定参数和默认值</p></blockquote><p>如果被调用函数的参数按照”name = obj”的形式给出，那么参数的次序可以是任意的。<br>而且，参数序列可以在开始依次序给出，而将指定名称的参数置于后面。<br>因此，如果由一个函数fun1被定义为</p><blockquote><p>fun1 &lt;- function(data, data.frame, graph, limit) {<br>[function body omitted]<br>}<br>那么函数可以有多种等价的使用方法，例如<br>ans &lt;- fun1(d, df, TRUE, 20)<br>ans &lt;- fun1(d, df, graph=TRUE, limit=20)<br>ans &lt;- fun1(data=d, limit=20, graph=TRUE, data.frame=df)<br>默认值 ：在很多情况下，参数都会被赋予一个普遍适用的默认值。<br>fun1 &lt;- function(data, data.frame, graph=TRUE, limit=20) { … }<br>则函数可以这样被调用<br>ans &lt;- fun1(d, df)<br>此时与上面三种情况等价，也可以这样调用<br>ans &lt;- fun1(d, df, limit=10)<br>此时改变了一个默认值。<br>NOTE：参数可以是任意表达式，甚至可以是包含其他参数的表达式；<br>10.4 额外参数“…”</p></blockquote><p>当需要将一个函数的参数传递给另一个函数时，可以通过包含一个额外的参数”…”实现。<br>fun1 &lt;- function(data, data.frame, graph=TRUE, limit=20, …) {<br>[omitted statements]<br>if (graph)<br>par(pch=”*”, …)<br>[more omissions]<br>}<br>10.5 全局变量和局部变量<br>函数内的赋值都是局部变量，退出函数就丢失了。<br>如果要在函数内进行永久赋值（定义全局变量），需要用到“超赋值”操作符, &lt;&lt;-或者函数assign()。<br>10.6 一些高级示例<br>区组设计的效率因子 (E±ciency factors)<br>删除打印数组中的所有名称<br>递归的数值积分<br>10.7 范畴（Scope）</p><p>函数主体内出现的标识(symbol)可以被分为3类；正式参数、局部变量和自由变量。<br>正式参数就是出现在函数参数列表中的参数，他们的值由实际的函数参数与正式参数的绑定（binding）过程决定。<br>局部变量是在参数主体中，由表达式求值过程决定的变量。<br>自由变量为既不是正式参数又不是局部变量的变量。赋值之后自由变量成为局部变量。</p><p>在R中，自由变量的值由函数被创建的环境中与其同名的第一个变量值决定（我理解为最近的同名变量），这种方式被称为词汇式范畴(lexical scope)。<br>而在S中，该值由同名的全局变量决定。<br>例如下面的函数cube，在R中cube（2）=8，在S中报错为sq()找不到n。<br>cube &lt;- function(n) {<br>sq &lt;- function() n<em>n<br>n</em>sq()<br>}<br>一个银行账户的例子，详见《R语言笔记》。<br>10.8 定制环境<br>详见《R语言笔记》。<br>10.9 类别，通用函数和对象定位</p><p>一个对象的类别(class)决定了他会如何被通用函数(generic function)处理。<br>如果参数本身没有任何类别属性，或者其类别在特定问题中并不满足通用函数的要求，通常会有一个默认的动作被执行。<br>类别机制使用户可以为特定的目的设计和编写通用函数。<br>使用&gt; methods(class=”data.frame”)可以查看数据帧的通用函数。<br>使用&gt; methods(plot)可以查看plot函数能处理的类别。<br>十一   R的统计模型<br>待阅。</p><p>十二 图形过程<br>在Windows下用window()命令可以打开图形窗口。<br>12.1 高级绘图命令</p><pre><code>高级绘图函数，由函数参数提供数据生成一幅完整的图形。其中适当的坐标轴，标签和标题都自动生成了（除非你另外指定了）。高级绘图命令每次都生成一幅新的图形，清除当前的图形（如果需要的话）。</code></pre><p>1  plot()函数</p><p>这是一个通用函数：生成图形的类型取决于第一个参数的类型或类别(class)。<br>plot(x,y)  plot(xy)：<br>如果x，y是向量，plot(x,y)生成一幅y对x的散点图。用包含两个元素x，y的一个列表或一个两列的矩阵作为一个参数（第二种形式那样的）也能达成相同的效果。<br>plot(x)：<br>如果x是一个时间序列，这个命令生成一个时间序列图，如果x是一个数值型向量，则生成一个向量值对它们向量索引的土，而如果x是一个复向量，则生成一个向量中元素的虚部对实部的图。<br>plot(f)   plot(f,y)：<br>f是一个因子对象，y是一个数值型向量。第一种形式生成一个f的条形图；第二种形式生成y对应于f各个水平的箱线图。<br>plot(df)   plot( expr)    plot(y expr)：<br>df是一个数据帧，y是任意对象，expr是由对象名称组成的列表，分隔符’+’(例如，a + b + c)。前两种形式生成分布式的图形，第一种是数据帧中的变量，第二种是一系列被命名的对象。第三种形式生成y对expr中每个对象的图。<br>2 显示多元数据</p><p>如果X是一个数值矩阵或数据帧，下面的命令</p><blockquote><p>pairs(X)<br>生成一个配对的散点图矩阵，矩阵由X中的每列的列变量对其他各列列变量的散点图组成，得到的矩阵中每个散点图行、列长度都是固定的。</p></blockquote><p>当问题涉及到三、四个变量时，使用coplot更好些。如果a和b是数值向量，c是数值向量或因子对象（全都是相同长度的），下面的命令</p><blockquote><p>coplot(a ~ b | c)<br>对应c的某些给定值生成数个a对b的散点图。当c是一个因子时，这个命令也就是对c的每个水平生成a对b的散点图。当c是数值向量的时候，这个数值向量被分为一系列的条件区间（conditioning intervals），对应c的每个区间生成一个a对b的散点图。区间的数量和位置可以通过coplot()的参数given.values来控制，函数co.intervals()也可以用来选择区间。我们也可以使用两个给定变量通过命令<br>coplot(a ~ b | c+d)<br>对c和d的每个联合条件区间生成a对b的散点图。</p></blockquote><p>函数coplot()和pairs()都可以使用参数panel=，这个参数可以用来定制我们得到的图形类型。默认的是points()函数，生成一个散点图，不过通过在参数panel=中提供某些其它的低级图形函数，我们可以生成需要的各种图形。一个很有用的函数例子是panel.smooth()。<br>3 显示图形</p><p>qqnorm(x)   qqline(x)    qqplot(x,y)<br>分布比较图。第一种形式生成向量x对期望正态分数（一个正态记分图），第二个在上面的图上添加一条穿过分布分位点和数据分位点的直线。第三个命令生成x的分位点对y分位点图，用于分别比较它们的分布。<br>hist(x)     hist(x,nclass=n)       hist(x,breaks=b, . . . )<br>生成数值变量x的直方图。通常会自动选定一个合理的类别数，不过可以通过nclass=参数来指定一个推荐值。或者通过参数breaks=来指定分界点。如果给定了probability=TRUE参数，那么条形图代表相对频数而不是累计数。<br>dotchart(x, . . . )<br>创建一个x中数据的点图(dotchart)。点图中y轴给出x中数据的标签，x轴给出它们的值。它允许对落入某一特定区间的所有数据项方便的进行可视化选择。<br>image(x,y,z, . . . )     contour(x,y,z, . . . )    persp(x,y,z, . . . )<br>生成三个变量的图。函数image是用不同的颜色绘制一些矩形方格来展示z的值，函数contour通过绘制等高线来展示z的值，函数persp绘制一个3D面。<br>4 参数配置</p><p>add=TRUE      强制函数按照低级图形函数的方式操作，将图形置于当前图形上（仅对某些函数有效）。<br>axes=FALSE       暂时禁止坐标轴的生成|以便使用axis()函数添加你自己定制的坐标轴。默认情况是axes=TRUE，即包含坐标轴。<br>log=”x”   log=”y”   log=”xy”      令x,y或者两者全都对数化。这个参数对许多函数都有效，不过不是全部。<br>type=          参数type=控制所生成图形的类型：<br>        type=”p” 绘制单独的点（默认值）<br>        type=”l” 绘制线<br>        type=”b” 绘制由线连接的点（both）<br>        type=”o” 将点绘在线上<br>        type=”h” 绘制从点到零轴的垂线（high-density）<br>        type=”s” 阶梯式图。第一种形式中，点由垂线的顶部定义；第二种形式里用底部定义。<br>        type=”n” 不绘制。不过坐标轴是绘出的（默认情况）而且要根据数据绘出坐标系统。用来给后续的低级图形函数创建图形作基础。<br>xlab=string    ylab=string          x轴或y轴的标签。使用这些参数来改变默认的标签，通常的默认值是调用高级绘图函数时所使用对象的名称。<br>main=string          图表标题，位于图形的顶部，大字体显示。<br>sub=string         子标题，位于x轴下面，用较小的字体显示。<br>12.2   低级绘图命令</p><p>有些时候高级绘图函数并不能很精确的生成我们想要的图形。这种情况下，我们可以通过低级绘图命令在当前图形上添加信息（例如，点、线或文本）。<br>points(x,y)    lines(x,y)<br>在当前图形上添加点或线。函数plot()的参数type=也可以用于这些函数（默认的是”p”代表points()和”l”代表lines()）。<br>text(x,y,labels, . . . )<br>给定点坐标x,y，在该点添加文本。通常labels是一个整数或字符向量，其中labels[i]出现在点(x[i],y[i])。默认值是1:length(x)。<br>Note： 这个函数通常用于这样的序列中</p><blockquote><p>plot(x, y, type=”n”); text(x, y, names)<br>图形参数type=”n”阻止了点的生成，但是建立了坐标轴，由函数text()提供字符向量names所指定的特定字符。</p></blockquote><p>abline(a, b)   abline(h=y)   abline(v=x)    abline(lm.obj)<br>在当前图上添加一条斜率为b，截距为a的直线。h=y在图形指定的高度上绘制一条贯穿图形的水平线，同样的，v=x在x轴的指定位置绘制一条贯穿的垂线。而lm.obj是一个包含coefficients组件的列表，该组件的长度为2，分别当作截距和斜率。<br>polygon(x, y, . . . )<br>绘制一个多边形，其顶点由(x,y)指定。同时还（可选的）可以加上阴影线，如果图形设备允许的话还可以将多边形填充。<br>legend(x, y, legend, . . . )<br>这当前图形的指定位置添加图例。绘制的字符，线条类型，颜色等等由字符向量legend指定。除此之外至少还要给出一个参数v，与绘图单元的相应值，分别有：<br>legend( , fill=v)填充方框的颜色<br>legend( , col=v)绘制点线的颜色<br>legend( , lty=v)线条类型<br>legend( , lwd=v)线条宽度<br>legend( , pch=v)绘制字符(字符向量)</p><p>title(main,sub)<br>在当前图形的顶部用大字题添加一个标题main，在底部用较小的字体添加子标题sub。<br>axis(side, . . . )<br>在当前图形的指定边上添加坐标，在哪个边上由第一个参数指定（1到4，从底部按照顺时针顺序）。其他参数控制坐标的位置|在图形内或图形外，以及标记的位置和标签。适合在调用参数为axes=FALSE的函数plot()后添加定制的坐标轴。<br>低级绘图函数通常都需要一些位置信息（例如，x,y坐标）来决定在哪里添加新的元素。坐标以用户坐标(user coordinates)的形式给出，这个坐标系是根据所提供的数据由之前的高级绘图语句定义的。需要x,y参数的地方还可以选用一个单独的参数，即一个由名为x,y的元素组成的列表。相似的，一个两列的矩阵也可以。像locator()（后面会提到）这样的函数也可以按照这种方式交互的指定图形中的位置。<br>添加数学注释<br>某些情况下需要在图形中加入数学符号或公式。在R中可以通过在text, mtext,axis或title中指定一个表达式来实现。例如，下面的代码绘制了二项概率函数的公式：</p><blockquote><p>text(x, y, expression_r(paste(bgroup(“(“, atop(n, x), “)”),p^x, q^{n-x})))<br>更多的信息，包括其特性的一个完整列表可以在R中通过下面的命令得到：<br>help(plotmath)<br>example(plotmath)<br>添加Hershey矢量字体<br>help(Hershey)<br>example(Hershey)<br>12.3 图形的交互<br>R提供了函数，使用户可以通过鼠标从图形中释放信息或添加信息。</p></blockquote><p>locator(n,type)<br>等待用户使用鼠标左键在当前图形上选择位置。直到n(默认是512)个点都选完或者点击了鼠标另一个键（Unix,Windows)，在Mac下用鼠标点击图形窗口外的部分也可以结束。参数type的效果和在高级绘图函数中使用时是一样的，即在选择的点绘制指定的图形。默认情况是不绘制图形。函数locator()将所选点的坐标返回到一个列表中，列表包含x,y两个组件。<br>通常locator()在调用的时候并不带参数。这个功能在为图例或标签这样的图形元素选择位置时比较有用，尤其是这些位置不好通过计算得到的时候。举个例子，如果要在一个野点附近添加一些信息，可以使用下面的命令</p><blockquote><p>text(locator(1), “Outlier”, adj=0)</p></blockquote><p>identify(x, y, labels)<br>允许用户在x,y（使用鼠标左键）定义的点附近绘制相应的labels的组件（如果没有给出labels就给出该点的序号），突显该点。当鼠标的另一个键被点击时（Unix,Windows）返回被选点的序号，在Mac下通过点击图形窗口外来实现这个效果。<br>有时我们更想确定图形中的点，而非它们的位置。例如，我们可能希望从图示中选出某些感兴趣的观测点，然后进行某些操作。通过两个数值向量x,y给定一系列坐标(x; y)，我们可以使用identify()函数：</p><blockquote><p>plot(x,y) &gt; identify(x,y)<br>函数identify()本身不绘图，但是允许用户移动鼠标，在某点附近点击左键。离鼠标指针最近的点将被突显，并标出其序号（也就是它在向量x/y中的位置）。或者使用identify()的labels参数，把某些信息（例如案例名称）作为突显的标志；或者通过plot=FALSE参数取消所有突显标志。当选点的过程结束后，identify()返回所选点的序号；用户可以使用这些序号从x和y中释放所选的点。<br>12.4 使用图形参数</p></blockquote><p>通过图形参数可以定制图形显示的几乎所有方面。R包含大量的图形参数，可以控制的包括线条类型，颜色，图标排列，文本对齐等等。<br>1 持续性变更 (Permanent changes): par()函数</p><p>通过par()函数设定图形参数的值会持续性的更改参数的值，也就是说这之后（在当前设备上）所有对图形函数的调用都受到新值的影响。<br>函数par()用于存取和修改当前图形设备的图形参数列表。<br>par()不带任何参数，返回当前设备所有图形参数和它们的值的列表。<br>par(c(“col”,”lty”))<br>参数为一个字符向量，仅返回参数中指定的图形参数（也是作为一个列表）。<br>par(col=4, lty=2)<br>带指定参数（或一个列表型参数），设定指定图形参数的值，并将参数的原始值作为一个列表返回。<br>所以如果想设定参数绘制一些图形后再恢复成原来的设定，可以这么做：</p><blockquote><p>oldpar &lt;- par(col=4, lty=2)<br>. . . plotting commands . . .<br>par(oldpar)<br>2 临时性变更：图形函数的参数</p></blockquote><p>图形参数也可以作为（几乎）所有图形函数的命名参数。这种方式的效果和用于par()函数的效果是一样的，只不过这种改变只在函数调用的区间内有效。比如：</p><blockquote><p>plot(x, y, pch=”+”)<br>生成一个以加号作为绘图符号的散点图，而不改变后续图形的默认的绘图符号。<br>3 图形参数列表<br>A  图形元素<br>R图表由点、线、文本和多边形（填充区）组成。下面的图形参数控制了图形元素的绘制：<br>pch=”+” 用来绘点的字符。这个默认值随不同的图形驱动是不同的，不过通常都是’±’。除非使用”.”作为绘图字符，否则绘制的点都会比适当的位置高一点或者低一点，而不是恰好在指定位置。<br>pch=4当给定一个0到18的整数时，会生成一个特殊的绘图符号。通过下面的命令可以看这些符号都有什么。<br>legend(locator(1), as.character(0:18), pch=0:18)<br>lty=2 线条类型。并不是所有图形设备都支持多种线条类型（在那些支持的设<br>备上也不全一样），不过线条类型1始终是实线，2及以上的是点、划线或者它们的组合。<br>lwd=2 线条宽度。所需的线条宽度，是”标准”线条宽度的倍数。对line()等函数绘制的线条和坐标轴都有效果。<br>col=2 点、线、文本、填充区和图像使用的颜色。每种图形元素都有其可用的颜色列表，这个参数的值就是颜色在列表中的序号。显然，这个参数值对有限的一类设备有效。<br>font=2 指定文本所使用字体的一个整数。如果可能的话，设备驱动会把1对应普通文本，2对应粗体，3对应斜体，4对应粗斜体。<br>font.axis   font.lab    font.main   font.sub 这几个参数分别指定坐标轴注释，x,y轴的标签，主、副标题所用的字体。<br>adj=-0.1 文本对齐和绘图位置有关。0代表左对齐，1代表右对齐，0.5代表水平的中间位置。当前的值使会图位置到左端距离的比例，所以-0.1在文本和绘图位置之间留10%的空白。<br>cex=1.5 字符缩放。这个值是所需文本字符（包括绘图字符）的大小，与默认文本大小相关。<br>B  坐标轴和标记<br>很多R的高级图形都有坐标轴，你可以使用低级图形函数axis()自己创建坐标轴。坐标轴包含三个主要组件：轴线axis line（线条类型由参数lty控制），标记tick mark（沿着轴线划分单元），标号tick label（用来标出这些单元）。这些组件可以用下面这些参数定制。<br>lab=c(5,7,12)前两个数字分别是x和y轴上所要划分的区间数。第三个数字是坐标轴标签的长度，用字符数来衡量（包括小数点）。参数的值如果选得太小可能导致所有标号都聚在一起。<br>las=1 坐标轴标签的方向。0代表总是和坐标轴平行，1代表总是水平的，2代表总是垂直于坐标轴。<br>mgp=c(3,1,0)坐标轴组件的位置。第一个组件是坐标轴标签到坐标轴的距离，单位是文本行(text lines)。第二个组件是到标号的距离，最后一个是轴的巍直到轴线的距离（一般都是0）。正数代表绘图区域外，负数代表区域内。<br>tck=0.01 标号的长度，绘图区域大小的一个分数作单位。当tck比较小时（小于0.5），就强制x和y轴上的标记为相同大小。tck=1就是生成网格线。取负值时标记画向绘图区域外。内部标记可以使用tck=0.01和mgp=c(1,-1.5,0)。<br>xaxs=”s”   yaxs=”d” 分别是x、y轴的类型。如果是s(standard)或e(extended)类型，那最大和最小的标记都始终在数据区域之外。如果有某个点离边界非常近，那么扩展型(extended)的轴会稍稍扩展一下。这种类型的轴有时会在边界附近留出大片空白。而i(internal)或r(默认值)类型的轴，标记始终在数据区域内，不过r类型会在边界留出少量空白。<br>如果这个参数设为d，就锁定当前轴，对之后绘制的所有图形都用这个轴（直到参数被重新设定为其他的那几个值）。这个参数适用于生成一系列固定尺度的图。<br>C  图边缘（Figure margins）<br>在R中一个单独图形，图（figure），包含一个绘图区(plot region)，以及环绕着这个区域的边缘（其中可能含有坐标轴标签、标题等等），（通常）这两部分以轴为边界。<br>一个典型的图是</p></blockquote><p>控制图的样式的图形参数包括：<br>mai=c(1,0.5,0.5,0)分别是底部，左侧，顶部，右侧的宽度，单位是英寸。<br>mar=c(4,2,2,1)与mai相似，只是单位是文本行(text lines)。<br>由于更改一个就会改变另一个的值，所以在这个意义上，mai和mar是等价的。这个参数的默认值通常都太大了；右侧边缘很少用到，如果没标题，顶部边缘也不需要，左侧和底部的边缘应当足够大，以容纳坐标轴和标号。此外，默认值并没有考虑到设备表面的大小：比如，使用postscript()驱动，height=4参数时，除非用mar，mai另外设定，否则图的边缘就要占上大约50%。使用多图环境时（后面会提到）。边缘会减少一半，不过这在多图共用一页的时候可能还不够。<br>D 多图环境<br>R允许在一页上创建一个n£m的图的阵列。每个图由自己的边缘，图的阵列还有一个可选的外部边缘，如下图所示。</p><p>与多图环境相关的图形参数有：<br>mfcol=c(3, 2)    mfrow=c(2, 4)<br>   设定多图阵列的大小。第一个值是行数，第二个值是列数。这两个参数唯一的区别是mfcol把图按列排入，mfrow把图按行排入。上图所示的版式可用mfrow=c(3,2)创建；上图显示的是绘制四幅图后的情况。<br>mfg=c(2, 2, 3, 2)<br>    当前图在多图环境下的位置。前两个数字是当前图的行、列数；后两个是其在多图阵列中的行列数。这个参数用来在多图阵列中跳转。你甚至可以在后两个数中使用和真值(true value)不同的值，在同一页上得到大小不同的图。<br>fig=c(4, 9, 1, 4)/10<br>    当前图在页面的位置，取值分别是左下角到左边界，右边界，下、上边界的距离与对应边的百分比数。给出的例子是一个页面右下角的图。这个参数可以设定图在页面的绝对位置。<br>oma=c(2, 0, 3, 0)   omi=(0, 0, 0.8, 0)<br>       外部边缘的大小。与mar和mai相似，第一个用文本行作单位，第二个以英寸作单位，从下方开始按照顺时针顺序指定。<br>外部边缘对页标题这类东西很有用。文本可以通过带outer=TRUE参数的mtext()函数加入外部边缘。默认情况下是没有外部边缘的因此必须通过oma或omi指定。<br>函数split.screen()和layout()可以对多个图形作更复杂的排列。<br>12.6 设备驱动</p><p>R几乎可以在任何一种类型的显示器和打印设备上生成（不同质量的）图形。不过，在这之前，需要告诉R要处理的是哪一种设备。这通过启动一个设备驱动来完成。<br>设备驱动通过调用设备驱动函数来启动。<br>某些常用的设备驱动有：<br>X11()[Unix] 使用X11视窗系统<br>windows()[Windows]   使用 Windows 视窗系统<br>postscript()在PostScript打印机上打印或者创建PostScript图形文件<br>pictex()生成一个LATEX文件<br>当一个设备使用完之后，可以通过下面的命令终止设备驱动</p><blockquote><p>dev.off()<br>这个命令可以确保设备已经结束；例如，在某些硬拷贝的设备中，这个命令可以保证每页都已经完成，并且都被传送到打印机了。<br>PostScript文档<br>通过给postscript()函数带上file参数，我们可以把图形以PostScript格式存储到文件中。如果没有给出horizontal=FALSE参数，图形是横向的，你可以通过width和height参数控制图形的大小（图形会自动适应）。例如，命令<br>postscript(“file.ps”, horizontal=FALSE, height=5, pointsize=10)<br>为一个五英寸的图生成一个包含PostScript代码的文件，可以放在文当中。如果命令中的指定的文件名已经存在，将会被覆盖。<br>多重图形设备<br>每个对设备驱动的新调用都会打开一个新的图形设备，在设备列表中加入新的一项。这个设备就成为当前设备，图形输出就传送到这个设备。<br>dev.list()      返回所有活动中设备的序号和名称。在列表位置1的设备始终是空设备(null device)，这个设备不接收任何图形命令。<br>dev.next()    dev.prev()     分别返回当前设备的后一个和前一个设备的序号和名称。<br>dev.set(which=k)     用来把当前设备更改为设备列表中位置k的那个。返回设备的序号和标签。<br>dev.off(k)    终止图形列表位置k的那个图形设备。对于某些设备，比如postscript，这个命令会立刻打印文件或者正常结束文件，具体怎样处理取决于设备是怎样初始化的。<br>dev.copy(device,. . . ,which=k)      dev.print(device,. . . ,which=k)<br>建立一个设备k的拷贝。其中device是一个设备函数，例如postscript，如果需要的话可以在’. . . ‘中指定其它的参数，dev.print效果相似，不过复制的设备会立刻关闭，所以打印硬拷贝这样的终止操作也会被立即执行。<br>graphics.off()      终止列表中的所有图形设备，空设备除外。</p></blockquote><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/09/20/R笔记(1)/">http://jaymo666.github.io/2017/09/20/R笔记(1)/</a></p>]]></content>
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初级 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Websocket协议入门</title>
      <link href="/2017/06/29/Websocket/"/>
      <content type="html"><![CDATA[<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><blockquote><p>WebSocket是HTML5新增的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。</p></blockquote><a id="more"></a><h2 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h2><p>WebSocket并不是全新的协议，而是利用了<code>HTTP</code>协议来建立连接。我们来看看<code>WebSocket</code>连接是如何创建的。</p><p>首先，<code>WebSocket</code>连接必须由<strong>浏览器</strong>发起，因为请求协议是一个标准的HTTP请求，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET ws://localhost:3000/ws/chat HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Origin: http://localhost:3000</span><br><span class="line">Sec-WebSocket-Key: client-random-string</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure></p><p>该请求和普通的<code>HTTP</code>请求有几点不同：</p><p><code>GET</code>请求的地址不是类似<code>/path/</code>，而是以<code>ws://</code>开头的地址；<br>请求头<code>Upgrade: websocket</code>和<code>Connection: Upgrade</code>表示这个连接将要被转换为<code>WebSocket</code>连接；<br><code>Sec-WebSocket-Key</code>是<strong>用于标识这个连接</strong>，并非用于加密数据；<br><code>Sec-WebSocket-Version</code>指定了<code>WebSocket</code>的协议<strong>版本。</strong></p><p>随后，服务器如果接受该请求，就会返回如下响应：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: server-random-string</span><br></pre></td></tr></table></figure></p><p>该响应代码<code>101</code>表示本次连接的HTTP协议即将被更改，更改后的协议就是Upgrade: websocket指定的WebSocket协议。</p><p>版本号和子协议<strong>规定了双方能理解的数据格式，以及是否支持压缩等等</strong>。如果仅使用WebSocket的API，就不需要关心这些。</p><p>为什么WebSocket连接可以实现全双工通信而HTTP连接不行呢？<strong>实际上HTTP协议是建立在TCP协议之上的，TCP协议本身就实现了全双工通信，但是HTTP协议的请求－应答机制限制了全双工通信。</strong></p><p>安全的<code>WebSocket</code>连接机制和<code>HTTPS</code>类似。首先，浏览器用<code>wss://xxx</code>创建<code>WebSocket</code>连接时，<strong>会先通过HTTPS创建安全的连接</strong>，然后，<strong>该HTTPS连接升级为WebSocket连接</strong>，底层通信走的仍然是安全的<code>SSL/TLS</code>协议。</p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>很显然，要支持WebSocket通信，浏览器得支持这个协议，这样才能发出ws://xxx的请求。目前，支持WebSocket的主流浏览器如下：</p><ul><li>Chrome</li><li>Firefox</li><li>IE &gt;= 10</li><li>Sarafi &gt;= 6</li><li>Android &gt;= 4.4</li><li>iOS &gt;= 8</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>由于WebSocket是一个协议，服务器具体怎么实现，取决于所用编程语言和框架本身。<strong>Node.js本身支持的协议包括TCP协议和HTTP协议</strong>，要支持WebSocket协议，需要对Node.js提供的<code>HTTPServer</code>做额外的开发。已经有若干基于Node.js的稳定可靠的WebSocket实现，我们直接用<code>npm</code>安装使用即可。</p><h2 id="使用ws"><a href="#使用ws" class="headerlink" title="使用ws"></a>使用ws</h2><h3 id="ws模块"><a href="#ws模块" class="headerlink" title="ws模块"></a>ws模块</h3><p>在Node.js中，使用最广泛的WebSocket模块是ws，我们创建一个<code>hello-ws</code>的文件夹，然后在<code>package.json</code>(自己创建）中添加<code>ws</code>的依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;ws&quot;: &quot;1.1.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>package.json</code>文件完整内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;hello-ws&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;3.0.0&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;&quot;,</span><br><span class="line">    &quot;main&quot;: &quot;app.js&quot;,</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;start&quot;: &quot;node app.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;keywords&quot;: [</span><br><span class="line">        &quot;koa&quot;,</span><br><span class="line">        &quot;async&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;author&quot;: &quot;Michael Liao&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;Apache-2.0&quot;,</span><br><span class="line">    &quot;repository&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;https://github.com/michaelliao/learn-javascript.git&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;dependencies&quot;: &#123;</span><br><span class="line">        &quot;ws&quot;: &quot;1.1.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个工程结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hello-ws/</span><br><span class="line">|</span><br><span class="line">+- app.js &lt;-- 启动js文件</span><br><span class="line">|</span><br><span class="line">+- package.json &lt;-- 项目描述文件</span><br><span class="line">|</span><br><span class="line">+- node_modules/ &lt;-- npm安装的所有依赖包</span><br></pre></td></tr></table></figure><p>运行<code>npm install</code>后，我们就可以在<code>app.js</code>中编写WebSocket的服务器端代码。</p><p>创建一个<code>WebSocket</code>的<strong>服务器实例</strong>非常容易：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 导入WebSocket模块:</span><br><span class="line">const WebSocket = require(&apos;ws&apos;);</span><br><span class="line"></span><br><span class="line">// 引用Server类:</span><br><span class="line">const WebSocketServer = WebSocket.Server;</span><br><span class="line"></span><br><span class="line">// 实例化:</span><br><span class="line">const wss = new WebSocketServer(&#123;</span><br><span class="line">    port: 3000</span><br><span class="line">&#125;);</span><br><span class="line">wss.on(&apos;connection&apos;, function (ws) &#123;</span><br><span class="line">    console.log(`[SERVER] connection()`);</span><br><span class="line">    ws.on(&apos;message&apos;, function (message) &#123;</span><br><span class="line">        console.log(`[SERVER] Received: $&#123;message&#125;`);</span><br><span class="line">        ws.send(`ECHO: $&#123;message&#125;`, (err) =&gt; &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                console.log(`[SERVER] error: $&#123;err&#125;`);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如果有<code>WebSocket</code>请求接入，wss对象可以响应<code>connection</code>事件来处理这个WebSocket.</p><p>在<code>connection</code>事件中，回调函数会传入一个WebSocket的实例，表示这个WebSocket连接。对于每个WebSocket连接，我们都要对它绑定某些事件方法来处理不同的事件。这里，我们通过响应<code>message</code>事件，在收到消息后再返回一个ECHO: xxx的消息给客户端。</p><h4 id="创建WebSocket连接"><a href="#创建WebSocket连接" class="headerlink" title="创建WebSocket连接"></a>创建WebSocket连接</h4><p>现在，这个简单的服务器端WebSocket程序就编写好了。如何真正创建WebSocket并且给服务器发消息呢？<strong>方法是在浏览器中写JavaScript代码。</strong></p><p>在命令行用<code>npm start</code>或<code>node app.js</code>执行。然后，打开可以执行JavaScript代码的浏览器Console，<strong>依次</strong>输入代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 打开一个WebSocket:</span><br><span class="line">var ws = new WebSocket(&apos;ws://localhost:3000/test&apos;);</span><br><span class="line">// 响应onmessage事件:</span><br><span class="line">ws.onmessage = function(msg) &#123; console.log(msg); &#125;;</span><br><span class="line">// 给服务器发送一个字符串:</span><br><span class="line">ws.send(&apos;Hello!&apos;);</span><br></pre></td></tr></table></figure></p><p>一切正常的话，可以看到Console的输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MessageEvent &#123;isTrusted: true, data: &quot;ECHO: Hello!&quot;, origin: &quot;ws://localhost:3000&quot;, lastEventId: &quot;&quot;, source: null…&#125;</span><br></pre></td></tr></table></figure></p><p>这样，我们就在浏览器中成功地收到了服务器发送的消息！</p><p>如果嫌在浏览器中输入JavaScript代码比较麻烦，我们还可以直接用<code>ws</code>模块提供的WebSocket来充当客户端。换句话说，<strong>ws模块既包含了服务器端，又包含了客户端。</strong></p><p><strong>ws的WebSocket就表示客户端</strong>，它其实就是<code>WebSocketServer</code>响应connection事件时回调函数传入的变量ws的类型。</p><p>客户端的写法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let ws = new WebSocket(&apos;ws://localhost:3000/test&apos;);</span><br><span class="line"></span><br><span class="line">// 打开WebSocket连接后立刻发送一条消息:</span><br><span class="line">ws.on(&apos;open&apos;, function () &#123;</span><br><span class="line">    console.log(`[CLIENT] open()`);</span><br><span class="line">    ws.send(&apos;Hello!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 响应收到的消息:</span><br><span class="line">ws.on(&apos;message&apos;, function (message) &#123;</span><br><span class="line">    console.log(`[CLIENT] Received: $&#123;message&#125;`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>在Node环境下，<code>ws</code>模块的客户端可以用于测试服务器端代码</strong>，否则，每次都必须在浏览器执行JavaScript代码。</p><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>从上面的测试可以看出，<strong>WebSocket协议本身不要求同源策略</strong>（Same-origin Policy），也就是某个地址为<code>http://a.com</code>的网页可以通过WebSocket连接到<code>ws://b.com</code>。但是，浏览器会发送Origin的HTTP头给服务器，服务器可以根据Origin拒绝这个WebSocket请求。所以，<strong>是否要求同源要看服务器端如何检查。</strong></p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>还需要注意到服务器在响应<code>connection</code>事件时并未检查请求的路径，因此，在客户端打开ws://localhost:3000/any/path可以写任意的路径。</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/29/Websocket/">http://jaymo666.github.io/2017/06/29/Websocket/</a></p>]]></content>
      
      <categories>
          
          <category> Node </category>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> http </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Websocket协议入门</title>
      <link href="/2017/06/29/Websocket(1)/"/>
      <content type="html"><![CDATA[<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><blockquote><p>WebSocket是HTML5新增的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。</p></blockquote><a id="more"></a><h2 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h2><p>WebSocket并不是全新的协议，而是利用了<code>HTTP</code>协议来建立连接。我们来看看<code>WebSocket</code>连接是如何创建的。</p><p>首先，<code>WebSocket</code>连接必须由<strong>浏览器</strong>发起，因为请求协议是一个标准的HTTP请求，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET ws://localhost:3000/ws/chat HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Origin: http://localhost:3000</span><br><span class="line">Sec-WebSocket-Key: client-random-string</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure></p><p>该请求和普通的<code>HTTP</code>请求有几点不同：</p><p><code>GET</code>请求的地址不是类似<code>/path/</code>，而是以<code>ws://</code>开头的地址；<br>请求头<code>Upgrade: websocket</code>和<code>Connection: Upgrade</code>表示这个连接将要被转换为<code>WebSocket</code>连接；<br><code>Sec-WebSocket-Key</code>是<strong>用于标识这个连接</strong>，并非用于加密数据；<br><code>Sec-WebSocket-Version</code>指定了<code>WebSocket</code>的协议<strong>版本。</strong></p><p>随后，服务器如果接受该请求，就会返回如下响应：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: server-random-string</span><br></pre></td></tr></table></figure></p><p>该响应代码<code>101</code>表示本次连接的HTTP协议即将被更改，更改后的协议就是Upgrade: websocket指定的WebSocket协议。</p><p>版本号和子协议<strong>规定了双方能理解的数据格式，以及是否支持压缩等等</strong>。如果仅使用WebSocket的API，就不需要关心这些。</p><p>为什么WebSocket连接可以实现全双工通信而HTTP连接不行呢？<strong>实际上HTTP协议是建立在TCP协议之上的，TCP协议本身就实现了全双工通信，但是HTTP协议的请求－应答机制限制了全双工通信。</strong></p><p>安全的<code>WebSocket</code>连接机制和<code>HTTPS</code>类似。首先，浏览器用<code>wss://xxx</code>创建<code>WebSocket</code>连接时，<strong>会先通过HTTPS创建安全的连接</strong>，然后，<strong>该HTTPS连接升级为WebSocket连接</strong>，底层通信走的仍然是安全的<code>SSL/TLS</code>协议。</p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>很显然，要支持WebSocket通信，浏览器得支持这个协议，这样才能发出ws://xxx的请求。目前，支持WebSocket的主流浏览器如下：</p><ul><li>Chrome</li><li>Firefox</li><li>IE &gt;= 10</li><li>Sarafi &gt;= 6</li><li>Android &gt;= 4.4</li><li>iOS &gt;= 8</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>由于WebSocket是一个协议，服务器具体怎么实现，取决于所用编程语言和框架本身。<strong>Node.js本身支持的协议包括TCP协议和HTTP协议</strong>，要支持WebSocket协议，需要对Node.js提供的<code>HTTPServer</code>做额外的开发。已经有若干基于Node.js的稳定可靠的WebSocket实现，我们直接用<code>npm</code>安装使用即可。</p><h2 id="使用ws"><a href="#使用ws" class="headerlink" title="使用ws"></a>使用ws</h2><h3 id="ws模块"><a href="#ws模块" class="headerlink" title="ws模块"></a>ws模块</h3><p>在Node.js中，使用最广泛的WebSocket模块是ws，我们创建一个<code>hello-ws</code>的文件夹，然后在<code>package.json</code>(自己创建）中添加<code>ws</code>的依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;ws&quot;: &quot;1.1.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>package.json</code>文件完整内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;hello-ws&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;3.0.0&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;&quot;,</span><br><span class="line">    &quot;main&quot;: &quot;app.js&quot;,</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;start&quot;: &quot;node app.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;keywords&quot;: [</span><br><span class="line">        &quot;koa&quot;,</span><br><span class="line">        &quot;async&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;author&quot;: &quot;Michael Liao&quot;,</span><br><span class="line">    &quot;license&quot;: &quot;Apache-2.0&quot;,</span><br><span class="line">    &quot;repository&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;https://github.com/michaelliao/learn-javascript.git&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;dependencies&quot;: &#123;</span><br><span class="line">        &quot;ws&quot;: &quot;1.1.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个工程结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hello-ws/</span><br><span class="line">|</span><br><span class="line">+- app.js &lt;-- 启动js文件</span><br><span class="line">|</span><br><span class="line">+- package.json &lt;-- 项目描述文件</span><br><span class="line">|</span><br><span class="line">+- node_modules/ &lt;-- npm安装的所有依赖包</span><br></pre></td></tr></table></figure><p>运行<code>npm install</code>后，我们就可以在<code>app.js</code>中编写WebSocket的服务器端代码。</p><p>创建一个<code>WebSocket</code>的<strong>服务器实例</strong>非常容易：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 导入WebSocket模块:</span><br><span class="line">const WebSocket = require(&apos;ws&apos;);</span><br><span class="line"></span><br><span class="line">// 引用Server类:</span><br><span class="line">const WebSocketServer = WebSocket.Server;</span><br><span class="line"></span><br><span class="line">// 实例化:</span><br><span class="line">const wss = new WebSocketServer(&#123;</span><br><span class="line">    port: 3000</span><br><span class="line">&#125;);</span><br><span class="line">wss.on(&apos;connection&apos;, function (ws) &#123;</span><br><span class="line">    console.log(`[SERVER] connection()`);</span><br><span class="line">    ws.on(&apos;message&apos;, function (message) &#123;</span><br><span class="line">        console.log(`[SERVER] Received: $&#123;message&#125;`);</span><br><span class="line">        ws.send(`ECHO: $&#123;message&#125;`, (err) =&gt; &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                console.log(`[SERVER] error: $&#123;err&#125;`);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如果有<code>WebSocket</code>请求接入，wss对象可以响应<code>connection</code>事件来处理这个WebSocket.</p><p>在<code>connection</code>事件中，回调函数会传入一个WebSocket的实例，表示这个WebSocket连接。对于每个WebSocket连接，我们都要对它绑定某些事件方法来处理不同的事件。这里，我们通过响应<code>message</code>事件，在收到消息后再返回一个ECHO: xxx的消息给客户端。</p><h4 id="创建WebSocket连接"><a href="#创建WebSocket连接" class="headerlink" title="创建WebSocket连接"></a>创建WebSocket连接</h4><p>现在，这个简单的服务器端WebSocket程序就编写好了。如何真正创建WebSocket并且给服务器发消息呢？<strong>方法是在浏览器中写JavaScript代码。</strong></p><p>在命令行用<code>npm start</code>或<code>node app.js</code>执行。然后，打开可以执行JavaScript代码的浏览器Console，<strong>依次</strong>输入代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 打开一个WebSocket:</span><br><span class="line">var ws = new WebSocket(&apos;ws://localhost:3000/test&apos;);</span><br><span class="line">// 响应onmessage事件:</span><br><span class="line">ws.onmessage = function(msg) &#123; console.log(msg); &#125;;</span><br><span class="line">// 给服务器发送一个字符串:</span><br><span class="line">ws.send(&apos;Hello!&apos;);</span><br></pre></td></tr></table></figure></p><p>一切正常的话，可以看到Console的输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MessageEvent &#123;isTrusted: true, data: &quot;ECHO: Hello!&quot;, origin: &quot;ws://localhost:3000&quot;, lastEventId: &quot;&quot;, source: null…&#125;</span><br></pre></td></tr></table></figure></p><p>这样，我们就在浏览器中成功地收到了服务器发送的消息！</p><p>如果嫌在浏览器中输入JavaScript代码比较麻烦，我们还可以直接用<code>ws</code>模块提供的WebSocket来充当客户端。换句话说，<strong>ws模块既包含了服务器端，又包含了客户端。</strong></p><p><strong>ws的WebSocket就表示客户端</strong>，它其实就是<code>WebSocketServer</code>响应connection事件时回调函数传入的变量ws的类型。</p><p>客户端的写法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let ws = new WebSocket(&apos;ws://localhost:3000/test&apos;);</span><br><span class="line"></span><br><span class="line">// 打开WebSocket连接后立刻发送一条消息:</span><br><span class="line">ws.on(&apos;open&apos;, function () &#123;</span><br><span class="line">    console.log(`[CLIENT] open()`);</span><br><span class="line">    ws.send(&apos;Hello!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 响应收到的消息:</span><br><span class="line">ws.on(&apos;message&apos;, function (message) &#123;</span><br><span class="line">    console.log(`[CLIENT] Received: $&#123;message&#125;`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>在Node环境下，<code>ws</code>模块的客户端可以用于测试服务器端代码</strong>，否则，每次都必须在浏览器执行JavaScript代码。</p><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>从上面的测试可以看出，<strong>WebSocket协议本身不要求同源策略</strong>（Same-origin Policy），也就是某个地址为<code>http://a.com</code>的网页可以通过WebSocket连接到<code>ws://b.com</code>。但是，浏览器会发送Origin的HTTP头给服务器，服务器可以根据Origin拒绝这个WebSocket请求。所以，<strong>是否要求同源要看服务器端如何检查。</strong></p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>还需要注意到服务器在响应<code>connection</code>事件时并未检查请求的路径，因此，在客户端打开ws://localhost:3000/any/path可以写任意的路径。</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/29/Websocket(1)/">http://jaymo666.github.io/2017/06/29/Websocket(1)/</a></p>]]></content>
      
      <categories>
          
          <category> Node </category>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> http </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node.js复习</title>
      <link href="/2017/06/29/node-document(1)/"/>
      <content type="html"><![CDATA[<p>前阵子学习了Node，已经了解了Node的基本知识，并安装了node，npm，了解了怎么去运行，现在这篇是复习一下node。<a id="more"></a></p><h1 id="Node-复习）"><a href="#Node-复习）" class="headerlink" title="Node(复习）"></a>Node(复习）</h1><blockquote><p>Node.js:基于JavaScript语言和V8引擎的开源Web服务器项目</p></blockquote><p>在Node上运行的JavaScript相比其他后端开发语言有何优势？</p><blockquote><p>最大的优势是借助<strong>JavaScript天生的事件驱动机制</strong>加<strong>V8高性能引擎</strong>，使编写高性能Web服务轻而易举。<br>其次，JavaScript语言本身是完善的<strong>函数式语言</strong>,在Node环境下，通过<strong>模块化</strong>的JavaScript代码，加上函数式编程，并且<strong>无需考虑浏览器兼容性问题</strong>，直接使用最新的ECMAScript 6标准，可以完全满足工程上的需求。</p></blockquote><p>io.js，这又是什么鬼？</p><blockquote><p>io.js是“尝鲜版”，而Node.js是线上稳定版，相当于Fedora Linux和RHEL的关系。</p></blockquote><p>#npm</p><blockquote><p>npm其实是Node.js的包管理工具（package manager）。</p></blockquote><ul><li><p>为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。</p></li><li><p>更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p></li></ul><h3 id="第一个Node程序"><a href="#第一个Node程序" class="headerlink" title="第一个Node程序"></a>第一个Node程序</h3><p>选择一个目录，例如<code>F:\Node</code>，把文件保存为<code>hello.js</code>，就可以打开命令行窗口，把当前目录切换到<code>hello.js</code>所在目录，然后输入以下命令运行这个程序了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F:\Node&gt;node hello.js</span><br><span class="line">Hello, world.</span><br></pre></td></tr></table></figure></p><p>也可以保存为别的名字，比如first.js，但是必须要以<code>.js</code>结尾。此外，文件名只能是<code>英文字母</code>、<code>数字</code>和<code>下划线</code>的组合。</p><h3 id="命令行模式和Node交互模式"><a href="#命令行模式和Node交互模式" class="headerlink" title="命令行模式和Node交互模式"></a>命令行模式和Node交互模式</h3><blockquote><p>请注意区分命令行模式和Node交互模式。</p></blockquote><p>看到类似C:>是在Windows提供的<code>命令行模式</code>：</p><p><img src="http://www.liaoxuefeng.com/files/attachments/00143912121754934a42330afe74908a7d305faf0272f21000/l" alt=""></p><p>看到<code>&gt;</code>是在Node交互式环境下：<br><img src="http://www.liaoxuefeng.com/files/attachments/0014391212294193de526e6aab945c18a48203cd694f6dd000/l" alt=""></p><p><strong>在Node交互式环境下，我们可以输入JavaScript代码并立刻执行。</strong></p><h3 id="使用严格模式"><a href="#使用严格模式" class="headerlink" title="使用严格模式"></a>使用严格模式</h3><p>如果在JavaScript文件开头写上<code>&#39;use strict&#39;</code>;，那么Node在执行该JavaScript时将使用严格模式。但是，在服务器环境下，如果有很多JavaScript文件，每个文件都写上’use strict’;很麻烦。<strong>我们可以给Nodejs传递一个参数，让Node直接为所有js文件开启严格模式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --use_strict</span><br></pre></td></tr></table></figure><p>给指定文件开启严格模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --use_strict 文件名(例如:hello.js)</span><br></pre></td></tr></table></figure></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><blockquote><p>在Node环境中，一个.js文件就称之为一个模块（module）。</p></blockquote><p>使用模块有什么好处？</p><ul><li><p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括<code>Node内置的模块</code>和来自<code>第三方的模块</code>。</p></li><li><p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p></li></ul><p>比如，我们编写了一个<code>hello.js</code>文件，这个<code>hello.js</code>文件就是一个模块，模块的名字就是文件名（<strong>去掉.js后缀</strong>），所以<code>hello.js</code>文件就是名为<code>hello</code>的模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var s = &apos;Hello&apos;;</span><br><span class="line"></span><br><span class="line">function greet(name) &#123;</span><br><span class="line">    console.log(s + &apos;, &apos; + name + &apos;!&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = greet;</span><br></pre></td></tr></table></figure><p>函数greet()是我们在hello模块中定义的，你可能注意到最后一行是一个奇怪的赋值语句，它的意思是，<strong>把函数greet作为模块的输出暴露出去，这样其他模块就可以使用greet函数了</strong>。</p><p>问题是<strong>其他模块怎么使用hello模块的这个greet函数</strong>呢？我们再编写一个main.js文件，调用hello模块的greet函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">// 引入hello模块:</span><br><span class="line">var greet = require(&apos;./hello&apos;);</span><br><span class="line"></span><br><span class="line">var s = &apos;Michael&apos;;</span><br><span class="line"></span><br><span class="line">greet(s); // Hello, Michael!</span><br></pre></td></tr></table></figure></p><p>注意到引入hello模块用Node提供的require函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var greet = require(&apos;./hello&apos;);</span><br></pre></td></tr></table></figure></p><p>引入的模块作为变量保存在greet变量中，那greet变量到底是什么东西？其实变量greet就是在hello.js中我们用<code>module.exports = greet</code>;输出的greet函数。所以，main.js就成功地引用了hello.js模块中定义的greet()函数，接下来就可以直接使用它了。</p><p>在使用require()引入模块的时候，请注意模块的相对路径。因为<strong>main.js和hello.js位于同一个目录</strong>，所以我们用了当前目录.：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var greet = require(&apos;./hello&apos;); // 不要忘了写相对目录!</span><br></pre></td></tr></table></figure></p><p>如果只写模块名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var greet = require(&apos;hello&apos;);</span><br></pre></td></tr></table></figure></p><p>则Node会依次在<code>内置模块</code>、<code>全局模块</code>和<code>当前模块</code>下查找hello.js，你很可能会得到一个错误：</p><pre><code>module.jsthrow err;  ^Error: Cannot find module &apos;hello&apos;at Function.Module._resolveFilenameat Function.Module._load...at Function.Module._loadat Function.Module.runMain</code></pre><p>遇到这个错误，你要检查：</p><ul><li>模块名是否写对了；</li><li>模块文件是否存在；</li><li>相对路径是否写对了。</li></ul><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>这种模块加载机制被称为CommonJS规范。<strong>在这个规范下，每个.js文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突</strong>，例如，hello.js和main.js都申明了全局变量var s = ‘xxx’，但互不影响。</p><p>小结：<br>要在模块中对外输出变量，用</p><pre><code>module.exports = variable;</code></pre><p>输出的变量可以是任意对象、函数、数组等等。</p><p>要引入其他模块输出的对象，用：</p><pre><code>var foo = require(&apos;other_module&apos;);</code></pre><h3 id="深入了解模块原理"><a href="#深入了解模块原理" class="headerlink" title="深入了解模块原理"></a>深入了解模块原理</h3><blockquote><p>JavaScript语言本身并没有一种模块机制来保证不同模块可以使用相同的变量名。</p></blockquote><p>其实要实现“模块”这个功能，并不需要语法层面的支持。Node.js也并不会增加任何JavaScript语法。<strong>实现“模块”功能的奥妙就在于JavaScript是一种函数式编程语言，它支持闭包。</strong>如果我们把一段JavaScript代码用一个函数包装起来，这段代码的所有“全局”变量就变成了函数内部的局部变量。</p><p>请注意我们编写的hello.js代码是这样的：</p><pre><code>var s = &apos;Hello&apos;;var name = &apos;world&apos;;console.log(s + &apos; &apos; + name + &apos;!&apos;);</code></pre><p>Node.js加载了hello.js后，它可以把代码包装一下，变成这样执行：</p><pre><code>(function () {// 读取的hello.js代码:var s = &apos;Hello&apos;;var name = &apos;world&apos;;console.log(s + &apos; &apos; + name + &apos;!&apos;);// hello.js代码结束})();</code></pre><p>所以，Node利用JavaScript的函数式编程的特性，轻而易举地实现了模块的隔离。</p><p>但是，模块的输出module.exports怎么实现？</p><p>这个也很容易实现，Node可以先准备一个对象module：</p><pre><code>// 准备module对象:var module = {id: &apos;hello&apos;,exports: {}};var load = function (module) {// 读取的hello.js代码:function greet(name) {console.log(&apos;Hello, &apos; + name + &apos;!&apos;);}module.exports = greet;// hello.js代码结束return module.exports;};var exported = load(module);// 保存module:save(module, exported);</code></pre><p>可见，变量module是Node在加载js文件前准备的一个变量，并将其传入加载函数，我们在<code>hello.js</code>中可以直接使用变量<code>module</code>原因就在于它实际上是函数的一个参数：</p><pre><code>module.exports = greet;</code></pre><p>通过把参数<code>module</code>传递给<code>load(</code>)函数，hello.js就顺利地把一个变量传递给了Node执行环境，Node会把module变量保存到某个地方。</p><p>由于Node保存了所有导入的<code>module</code>，当我们用<code>require()</code>获取<code>module</code>时，Node找到对应的<code>module</code>，把这个<code>module</code>的<code>exports</code>变量返回，这样，另一个模块就顺利拿到了模块的输出：</p><pre><code>var greet = require(&apos;./hello&apos;);</code></pre><p>以上是Node实现JavaScript模块的一个简单的原理介绍。</p><h3 id="module-exports-vs-exports"><a href="#module-exports-vs-exports" class="headerlink" title="module.exports vs exports"></a>module.exports vs exports</h3><p>很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：</p><p>方法一：对module.exports赋值：</p><pre><code>// hello.jsfunction hello() {console.log(&apos;Hello, world!&apos;);}function greet(name) {console.log(&apos;Hello, &apos; + name + &apos;!&apos;);}module.exports = {hello: hello,greet: greet};</code></pre><p>方法二：直接使用exports：</p><pre><code>// hello.jsfunction hello() {console.log(&apos;Hello, world!&apos;);}function greet(name) {console.log(&apos;Hello, &apos; + name + &apos;!&apos;);}function hello() {console.log(&apos;Hello, world!&apos;);}exports.hello = hello;exports.greet = greet;</code></pre><p>但是你不可以直接对exports赋值：</p><p>// 代码可以执行，但是模块并没有输出任何变量:</p><pre><code>exports = {hello: hello,greet: greet};</code></pre><p>结论:<br>如果要输出一个函数或数组，必须直接对module.exports对象赋值。</p><p><strong>直接对<code>module.exports</code>赋值，可以应对任何情况</strong></p><pre><code>module.exports = {foo: function () { return &apos;foo&apos;; }};</code></pre><p>或者：</p><pre><code>module.exports = function () { return &apos;foo&apos;; };</code></pre><h3 id="基本模块"><a href="#基本模块" class="headerlink" title="基本模块"></a>基本模块</h3><p><strong>因为Node.js是运行在服务区端的JavaScript环境</strong>，服务器程序和浏览器程序相比，最大的特点是<strong>没有浏览器的安全限制</strong>了，而且，服务器程序必须能接收网络请求，读写文件，处理二进制内容，所以，<strong>Node.js内置的常用模块就是为了实现基本的服务器功能</strong>。这些模块在浏览器环境中是无法被执行的，<strong>因为它们的底层代码是用C/C++在Node.js运行环境中实现的。</strong></p><h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><p>在前面的<code>JavaScript</code>课程中，我们已经知道，JavaScript有且仅有一个全局对象，在浏览器中，叫<code>window</code>对象。而在Node.js环境中，也有唯一的全局对象，但不叫<code>window</code>，而叫<code>global</code>，这个对象的属性和方法也和浏览器环境的window不同。进入Node.js交互环境，可以直接输入：</p><pre><code>E:\Node&gt;node&gt; global.consoleConsole {  log: [Function: bound ],  info: [Function: bound ],  warn: [Function: bound ],  error: [Function: bound ],  dir: [Function: bound ],  time: [Function: bound ],  timeEnd: [Function: bound ],  trace: [Function: bound trace],  assert: [Function: bound ],  Console: [Function: Console] }&gt;</code></pre><h4 id="process"><a href="#process" class="headerlink" title="process"></a>process</h4><p>·process·也是Node.js提供的一个对象，<strong>它代表当前Node.js进程</strong>。通过process对象可以拿到许多有用信息：</p><pre><code>&gt; process==global.processtrue&gt; process.version&apos;v4.6.0&apos;&gt; process.platform&apos;win32&apos;&gt; process.arch&apos;x64&apos;&gt;&gt; process.cwd()&apos;E:\\Node&apos;</code></pre><p>JavaScript程序是由<strong>事件驱动</strong>执行的<strong>单线程模型</strong>，Node.js也不例外。Node.js不断执行响应事件的JavaScript函数，直到没有任何响应事件的函数可以执行时，Node.js就退出了。</p><p>如果我们想要在下一次事件响应中执行代码，可以调用<code>process.nextTick()</code>：</p><pre><code>// test.js// process.nextTick()将在下一轮事件循环中调用:process.nextTick(function () {console.log(&apos;nextTick callback!&apos;);});console.log(&apos;nextTick was set!&apos;);</code></pre><p>用Node执行上面的代码<code>node test.js</code>，你会看到，打印输出是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nextTick was set!</span><br><span class="line">nextTick callback!</span><br></pre></td></tr></table></figure></p><p>这说明传入<code>process.nextTick()</code>的函数不是立刻执行，而是要等到下一次事件循环。</p><p>Node.js<strong>进程</strong>本身的事件就由<code>process</code>对象来处理。如果我们响应<code>exit</code>事件，就可以在程序即将退出时执行某个回调函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 程序即将退出时的回调函数:</span><br><span class="line">process.on(&apos;exit&apos;, function (code) &#123;</span><br><span class="line">    console.log(&apos;about to exit with code: &apos; + code);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="判断JavaScript执行环境"><a href="#判断JavaScript执行环境" class="headerlink" title="判断JavaScript执行环境"></a>判断JavaScript执行环境</h4><p>有很多JavaScript代码既能在浏览器中执行，也能在Node环境执行，但有些时候，程序本身需要判断自己到底是在什么环境下执行的，常用的方式就是根据<strong>浏览器</strong>和<strong>Node环境提供的全局变量名称</strong>来判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (typeof(window) === &apos;undefined&apos;) &#123;</span><br><span class="line">    console.log(&apos;node.js&apos;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    console.log(&apos;browser&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h4><p>Node.js内置的<code>fs</code>模块就是    文件系统模块    ，<strong>负责读写文件。</strong></p><p>和所有其它JavaScript模块不同的是，<strong>fs模块同时提供了异步和同步的方法。</strong></p><p>回顾一下什么是异步方法。因为JavaScript的单线程模型，<strong>执行IO操作时，JavaScript代码无需等待，而是传入回调函数后，继续执行后续JavaScript代码。</strong>比如jQuery提供的getJSON()操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(&apos;http://example.com/ajax&apos;, function (data) &#123;</span><br><span class="line">    console.log(&apos;IO结果返回后执行...&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&apos;不等待IO结果直接执行后续代码...&apos;);</span><br></pre></td></tr></table></figure></p><p>而同步的IO操作则需要等待函数返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 根据网络耗时，函数将执行几十毫秒~几秒不等:</span><br><span class="line">var data = getJSONSync(&apos;http://example.com/ajax&apos;);</span><br></pre></td></tr></table></figure></p><p>同步操作的好处是代码简单，缺点是程序将等待IO操作，在等待时间内，无法响应其它任何事件。而异步读取不用等待IO操作，但代码较麻烦。</p><p><strong>异步读文件</strong><br>按照JavaScript的标准，异步读取一个文本文件的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;sample.txt&apos;, &apos;utf-8&apos;, function (err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请注意，<code>sample.txt</code>文件必须在当前目录下，且文件编码为<code>utf-8</code>。</p><p>异步读取时，传入的回调函数接收两个参数，当正常读取时，<code>err</code>参数为<code>null</code>，<code>data</code>参数为读取到的<code>String</code>。当读取发生错误时，<code>err</code>参数代表一个错误对象，<code>data</code>为<code>undefined</code>。这也是Node.js标准的回调函数：第一个参数代表错误信息，第二个参数代表结果。后面我们还会经常编写这种回调函数。</p><p><strong>由于err是否为null就是判断是否出错的标志</strong>，所以通常的判断逻辑总是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (err) &#123;</span><br><span class="line">    // 出错了</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 正常</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们要读取的文件不是文本文件，而是<strong>二进制文件</strong>，怎么办？</p><p>下面的例子演示了如何读取一个图片文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;sample.png&apos;, function (err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">        console.log(data.length + &apos; bytes&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当读取二进制文件时，不传入文件编码时，回调函数的<code>data</code>参数将返回一个<code>Buffer</code>对象。在Node.js中，<strong>Buffer对象就是一个包含零个或任意个字节的数组</strong>（注意和Array不同）。</p><p><strong>Buffer对象可以和String作转换</strong>，例如，把一个Buffer对象转换成String：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Buffer -&gt; String</span><br><span class="line">var text = data.toString(&apos;utf-8&apos;);</span><br><span class="line">console.log(text);</span><br></pre></td></tr></table></figure></p><p>或者把一个String转换成Buffer：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// String -&gt; Buffer</span><br><span class="line">var buf = new Buffer(text, &apos;utf-8&apos;);</span><br><span class="line">console.log(buf);</span><br></pre></td></tr></table></figure></p><p><strong>同步读文件</strong></p><p>除了标准的异步读取模式外，fs也提供相应的<strong>同步</strong>读取函数。同步读取的函数和异步函数相比，多了一个<code>Sync</code><strong>后缀</strong>，并且<strong>不接收回调函数</strong>，函数直接返回结果。</p><p>用<code>fs</code>模块同步读取一个文本文件的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var data = fs.readFileSync(&apos;sample.txt&apos;, &apos;utf-8&apos;);</span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><p>可见，原异步调用的回调函数的<code>data</code>被函数直接返回，函数名需要改为<code>readFileSync</code>，其它参数不变。</p><p>如果同步读取文件发生错误，则需要用<strong>try…catch</strong>捕获该错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    var data = fs.readFileSync(&apos;sample.txt&apos;, &apos;utf-8&apos;);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125; catch (err) &#123;</span><br><span class="line">    // 出错了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>写文件</strong></p><p>将数据写入文件是通过<code>fs.writeFile()</code>实现的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var data = &apos;Hello, Node.js&apos;;</span><br><span class="line">fs.writeFile(&apos;output.txt&apos;, data, function (err) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&apos;ok.&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>writeFile()的参数依次为<strong>文件名</strong>、<strong>数据</strong>和<strong>回调函数</strong>。如果传入的数据是String，默认按UTF-8编码写入文本文件，如果传入的参数是Buffer，则写入的是二进制文件。<strong>回调函数由于只关心成功与否，因此只需要一个err参数。</strong><br>和readFile()类似，<code>writeFile()</code>也有一个同步方法，叫<code>writeFileSync()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var data = &apos;Hello, Node.js&apos;;</span><br><span class="line">fs.writeFileSync(&apos;output.txt&apos;, data);</span><br></pre></td></tr></table></figure></p><p><strong>stat</strong><br>如果我们要获取<strong>文件大小</strong>，<strong>创建时间</strong>等信息，可以使用<code>fs.stat()</code>，它返回一个<code>Stat对象</code>，能告诉我们文件或目录的详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.stat(&apos;sample.txt&apos;, function (err, stat) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 是否是文件:</span><br><span class="line">        console.log(&apos;isFile: &apos; + stat.isFile());</span><br><span class="line">        // 是否是目录:</span><br><span class="line">        console.log(&apos;isDirectory: &apos; + stat.isDirectory());</span><br><span class="line">        if (stat.isFile()) &#123;</span><br><span class="line">            // 文件大小:</span><br><span class="line">            console.log(&apos;size: &apos; + stat.size);</span><br><span class="line">            // 创建时间, Date对象:</span><br><span class="line">            console.log(&apos;birth time: &apos; + stat.birthtime);</span><br><span class="line">            // 修改时间, Date对象:</span><br><span class="line">            console.log(&apos;modified time: &apos; + stat.mtime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isFile: true</span><br><span class="line">isDirectory: false</span><br><span class="line">size: 181</span><br><span class="line">birth time: Fri Dec 11 2015 09:43:41 GMT+0800 (CST)</span><br><span class="line">modified time: Fri Dec 11 2015 12:09:00 GMT+0800 (CST)</span><br></pre></td></tr></table></figure></p><p>stat()也有一个对应的同步函数statSync()</p><p><strong>异步还是同步</strong></p><p>在<code>fs</code>模块中，提供同步方法是为了方便使用。<strong>那我们到底是应该用异步方法还是同步方法呢？</strong></p><p>由于Node环境执行的JavaScript代码是服务器端代码，所以，绝大部分需要在服务器运行期反复执行业务逻辑的代码，<strong>必须使用异步代码</strong>，否则，同步代码在执行时期，服务器将停止响应，因为JavaScript只有一个执行线程。</p><p><strong>服务器启动时如果需要读取配置文件，或者结束时需要写入到状态文件时，可以使用同步代码，</strong>因为这些代码只在启动和结束时执行一次，不影响服务器正常运行时的异步执行。</p><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><p><code>stream</code>是Node.js提供的又一个<strong>仅在服务区端</strong>可用的模块，<strong>目的是支持“流”这种数据结构</strong>。</p><p>什么是流？流是一种<strong>抽象</strong>的数据结构。<br><strong>流的特点是数据是有序的，而且必须依次读取，或者依次写入，不能像Array那样随机定位。</strong></p><p>在Node.js中，流也是一个对象，我们只需要响应流的事件就可以了：<code>data</code>事件表示流的数据已经可以读取了，<code>end</code>事件表示这个流已经到末尾了，没有数据可以读取了，<code>error</code>事件表示出错了。</p><p>下面是一个从文件流读取文本内容的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">// 打开一个流:</span><br><span class="line">var rs = fs.createReadStream(&apos;sample.txt&apos;, &apos;utf-8&apos;);</span><br><span class="line"></span><br><span class="line">rs.on(&apos;data&apos;, function (chunk) &#123;</span><br><span class="line">    console.log(&apos;DATA:&apos;)</span><br><span class="line">    console.log(chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(&apos;end&apos;, function () &#123;</span><br><span class="line">    console.log(&apos;END&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(&apos;error&apos;, function (err) &#123;</span><br><span class="line">    console.log(&apos;ERROR: &apos; + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>要注意，<code>data</code>事件可能会有多次，每次传递的<code>chunk</code>是流的一部分数据。</p><p>要以流的形式写入文件，只需要不断调用<code>write()</code>方法，最后以<code>end()</code>结束：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var ws1 = fs.createWriteStream(&apos;output1.txt&apos;, &apos;utf-8&apos;);</span><br><span class="line">ws1.write(&apos;使用Stream写入文本数据...\n&apos;);</span><br><span class="line">ws1.write(&apos;END.&apos;);</span><br><span class="line">ws1.end();</span><br><span class="line"></span><br><span class="line">var ws2 = fs.createWriteStream(&apos;output2.txt&apos;);</span><br><span class="line">ws2.write(new Buffer(&apos;使用Stream写入二进制数据...\n&apos;, &apos;utf-8&apos;));</span><br><span class="line">ws2.write(new Buffer(&apos;END.&apos;, &apos;utf-8&apos;));</span><br><span class="line">ws2.end();</span><br></pre></td></tr></table></figure></p><p>所有可以读取数据的流都继承自<code>stream.Readable</code>，所有可以写入的流都继承自<code>stream.Writable</code>。</p><h2 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h2><p>就像可以<strong>把两个水管串成一个更长的水管一样</strong>，两个流也可以串起来。一个<code>Readable</code>流和一个<code>Writable</code>流串起来后，<strong>所有的数据自动从Readable流进入Writable流</strong>，这种操作叫pipe。</p><p>在Node.js中，<code>Readable</code>流有一个<code>pipe()</code>方法，就是用来干这件事的。</p><p>让我们用<code>pipe()</code>把一个文件流和另一个文件流串起来，这样源文件的所有数据就自动写入到目标文件里了，所以，<strong>这实际上是一个复制文件的程序：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var rs = fs.createReadStream(&apos;sample.txt&apos;);</span><br><span class="line">var ws = fs.createWriteStream(&apos;copied.txt&apos;);</span><br><span class="line"></span><br><span class="line">rs.pipe(ws);</span><br></pre></td></tr></table></figure></p><p>默认情况下，当<code>Readable</code>流的数据读取完毕，<code>end</code>事件触发后，将自动关闭<code>Writable</code>流。如果我们不希望自动关闭Writable流，需要传入参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readable.pipe(writable, &#123; end: false &#125;);</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><strong>HTTP协议</strong><br>要理解Web服务器程序的工作原理，首先，我们要对HTTP协议有基本的了解。</p><p><strong>HTTP服务器</strong><br>要开发HTTP服务器程序，从头处理TCP连接，解析HTTP是不现实的。这些工作实际上已经由Node.js自带的<code>http</code>模块完成了。应用程序并不直接和HTTP协议打交道，而是<strong>操作http模块提供的<code>request</code>和<code>response</code>对象。</strong></p><p>request对象封装了HTTP请求，我们调用request对象的属性和方法就可以拿到所有HTTP请求的信息；</p><p>response对象封装了HTTP响应，我们操作response对象的方法，就可以把HTTP响应返回给浏览器。</p><p>用Node.js实现一个HTTP服务器程序非常简单。我们来实现一个最简单的Web程序hello.js，<strong>它对于所有请求，都返回Hello world!：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">// 导入http模块:</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">// 创建http server，并传入回调函数:</span><br><span class="line">var server = http.createServer(function (request, response) &#123;</span><br><span class="line">    // 回调函数接收request和response对象,</span><br><span class="line">    // 获得HTTP请求的method和url:</span><br><span class="line">    console.log(request.method + &apos;: &apos; + request.url);</span><br><span class="line">    // 将HTTP响应200写入response, 同时设置Content-Type: text/html:</span><br><span class="line">    response.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/html&apos;&#125;);</span><br><span class="line">    // 将HTTP响应的HTML内容写入response:</span><br><span class="line">    response.end(&apos;&lt;h1&gt;Hello world!&lt;/h1&gt;&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 让服务器监听8080端口:</span><br><span class="line">server.listen(8080);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Server is running at http://127.0.0.1:8080/&apos;);</span><br></pre></td></tr></table></figure></p><p>在命令提示符下运行该程序，可以看到以下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node hello.js </span><br><span class="line">Server is running at http://127.0.0.1:8080/</span><br></pre></td></tr></table></figure></p><p>不要关闭命令提示符，直接打开浏览器输入<code>http://localhost:8080</code>，即可看到服务器响应的内容。<br>同时，在命令提示符窗口，可以看到程序打印的请求信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: /</span><br><span class="line">GET: /favicon.ico</span><br></pre></td></tr></table></figure><p><strong>文件服务器</strong><br>让我们继续扩展一下上面的Web程序。我们可以<strong>设定一个目录</strong>，然后<strong>让Web程序变成一个文件服务器</strong>。要实现这一点，我们只需要<strong>解析request.url中的路径</strong>，然后<strong>在本地找到对应的文件</strong>，<strong>把文件内容发送出去</strong>就可以了。</p><p><strong>解析URL</strong>需要用到Node.js提供的<code>url</code>模块，它使用起来非常简单，通过<code>parse()</code>将一个字符串解析为一个Url对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var url = require(&apos;url&apos;);</span><br><span class="line"></span><br><span class="line">console.log(url.parse(&apos;http://user:pass@host.com:8080/path/to/file?query=string#hash&apos;));</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: &apos;http:&apos;,</span><br><span class="line">  slashes: true,</span><br><span class="line">  auth: &apos;user:pass&apos;,</span><br><span class="line">  host: &apos;host.com:8080&apos;,</span><br><span class="line">  port: &apos;8080&apos;,</span><br><span class="line">  hostname: &apos;host.com&apos;,</span><br><span class="line">  hash: &apos;#hash&apos;,</span><br><span class="line">  search: &apos;?query=string&apos;,</span><br><span class="line">  query: &apos;query=string&apos;,</span><br><span class="line">  pathname: &apos;/path/to/file&apos;,</span><br><span class="line">  path: &apos;/path/to/file?query=string&apos;,</span><br><span class="line">  href: &apos;http://user:pass@host.com:8080/path/to/file?query=string#hash&apos; &#125;</span><br></pre></td></tr></table></figure></p><p>处理本地文件目录需要使用Node.js提供的<code>path</code>模块，它可以方便地构造目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">// 解析当前目录:</span><br><span class="line">var workDir = path.resolve(&apos;.&apos;); //F:\Node</span><br><span class="line"></span><br><span class="line">// 组合完整的文件路径:当前目录+&apos;pub&apos;+&apos;index.html&apos;:</span><br><span class="line">var filePath = path.join(workDir, &apos;pub&apos;, &apos;index.html&apos;);</span><br><span class="line">// &apos;F:\Node\pub\index.html&apos;</span><br></pre></td></tr></table></figure></p><p>最后，我们实现一个文件服务器<code>file_server.js</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var</span><br><span class="line">    fs = require(&apos;fs&apos;),</span><br><span class="line">    url = require(&apos;url&apos;),</span><br><span class="line">    path = require(&apos;path&apos;),</span><br><span class="line">    http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">// 从命令行参数获取root目录，默认是当前目录:</span><br><span class="line">var root = path.resolve(process.argv[2] || &apos;.&apos;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Static root dir: &apos; + root);</span><br><span class="line"></span><br><span class="line">// 创建服务器:</span><br><span class="line">var server = http.createServer(function (request, response) &#123;</span><br><span class="line">    // 获得URL的path，类似 &apos;/css/bootstrap.css&apos;:</span><br><span class="line">    var pathname = url.parse(request.url).pathname;</span><br><span class="line">    // 获得对应的本地文件路径，类似 &apos;/srv/www/css/bootstrap.css&apos;:</span><br><span class="line">    var filepath = path.join(root, pathname);</span><br><span class="line">    // 获取文件状态:</span><br><span class="line">    fs.stat(filepath, function (err, stats) &#123;</span><br><span class="line">        if (!err &amp;&amp; stats.isFile()) &#123;</span><br><span class="line">            // 没有出错并且文件存在:</span><br><span class="line">            console.log(&apos;200 &apos; + request.url);</span><br><span class="line">            // 发送200响应:</span><br><span class="line">            response.writeHead(200);</span><br><span class="line">            // 将文件流导向response:</span><br><span class="line">            fs.createReadStream(filepath).pipe(response);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 出错了或者文件不存在:</span><br><span class="line">            console.log(&apos;404 &apos; + request.url);</span><br><span class="line">            // 发送404响应:</span><br><span class="line">            response.writeHead(404);</span><br><span class="line">            response.end(&apos;404 Not Found&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8080);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Server is running at http://127.0.0.1:8080/&apos;);</span><br></pre></td></tr></table></figure></p><p>没有必要手动读取文件内容。由于<code>response</code>对象本身是一个<code>Writable Stream</code>，直接用<code>pipe()</code>方法就实现了<strong>自动读取文件内容并输出到HTTP响应。</strong></p><p>在命令行运行<code>node file_server.js ./path/to/dir</code>，把<code>/path/to/dir</code>改成你本地的file_server.js路径下一个有效的目录，然后在浏览器中输入<code>http://localhost:8080/index.html</code>：</p><p>只要当前目录下存在文件index.html，服务器就可以把文件内容发送给浏览器。观察控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F:\Node&gt;node demo2.js ./path/to/dir</span><br><span class="line">Static root dir: F:\Node\path\to\dir</span><br><span class="line">Server is running at http://127.0.0.1:8080/</span><br><span class="line">200 /index.html</span><br></pre></td></tr></table></figure></p><p>第一个请求是浏览器请求<code>index.html</code>页面，后续请求是浏览器解析HTML后发送的其它资源请求。</p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><p>crypto模块的目的是<strong>为了提供通用的加密和哈希算法</strong>。用纯JavaScript代码实现这些功能不是不可能，但速度会非常慢。<strong>Nodejs用<code>C/C++</code>实现这些算法后</strong>，通过<code>cypto</code>这个模块暴露为JavaScript接口，这样用起来方便，运行速度也快。</p><p><strong>MD5和SHA1</strong></p><p>MD5是一种常用的<strong>哈希算法</strong>，<strong>用于给任意数据一个“签名”。</strong>这个签名通常用一个十六进制的字符串表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&apos;crypto&apos;);</span><br><span class="line"></span><br><span class="line">const hash = crypto.createHash(&apos;md5&apos;);</span><br><span class="line"></span><br><span class="line">// 可任意多次调用update():</span><br><span class="line">hash.update(&apos;Hello, world!&apos;);</span><br><span class="line">hash.update(&apos;Hello, nodejs!&apos;);</span><br><span class="line"></span><br><span class="line">console.log(hash.digest(&apos;hex&apos;)); // 7e1977739c748beac0c0fd14fd26a544</span><br></pre></td></tr></table></figure></p><p><code>update()</code>方法默认字符串编码为<code>UTF-8</code>，也可以传入<code>Buffer</code>。</p><p>如果要计算<code>SHA1</code>，只需要把<code>&#39;md5&#39;</code>改成<code>&#39;sha1&#39;</code>，就可以得到SHA1的结果<code>1f32b9c9932c02227819a4151feed43e131aca40</code>。</p><p>还可以使用更安全的<code>sha256</code>和<code>sha512</code>。</p><p><strong>Hmac</strong><br>Hmac算法也是一种哈希算法，它可以利用MD5或SHA1等哈希算法。不同的是，<strong>Hmac还需要一个密钥</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&apos;crypto&apos;);</span><br><span class="line"></span><br><span class="line">const hmac = crypto.createHmac(&apos;sha256&apos;, &apos;secret-key&apos;);</span><br><span class="line"></span><br><span class="line">hmac.update(&apos;Hello, world!&apos;);</span><br><span class="line">hmac.update(&apos;Hello, nodejs!&apos;);</span><br><span class="line"></span><br><span class="line">console.log(hmac.digest(&apos;hex&apos;)); // 80f7e22570.</span><br></pre></td></tr></table></figure></p><p>只要密钥发生了变化，那么同样的输入数据也会得到不同的签名，因此，<strong>可以把Hmac理解为用随机数“增强”的哈希算法。</strong></p><p><strong>AES</strong></p><p>AES是一种常用的<strong>对称加密算法，加解密都用同一个密钥</strong>。crypto模块提供了AES支持，但是需要自己封装好函数，便于使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&apos;crypto&apos;);</span><br><span class="line"></span><br><span class="line">function aesEncrypt(data, key) &#123;</span><br><span class="line">    const cipher = crypto.createCipher(&apos;aes192&apos;, key);</span><br><span class="line">    var crypted = cipher.update(data, &apos;utf8&apos;, &apos;hex&apos;);</span><br><span class="line">    crypted += cipher.final(&apos;hex&apos;);</span><br><span class="line">    return crypted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function aesDecrypt(encrypted, key) &#123;</span><br><span class="line">    const decipher = crypto.createDecipher(&apos;aes192&apos;, key);</span><br><span class="line">    var decrypted = decipher.update(encrypted, &apos;hex&apos;, &apos;utf8&apos;);</span><br><span class="line">    decrypted += decipher.final(&apos;utf8&apos;);</span><br><span class="line">    return decrypted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var data = &apos;Hello, this is a secret message!&apos;;</span><br><span class="line">var key = &apos;Password!&apos;;</span><br><span class="line">var encrypted = aesEncrypt(data, key);</span><br><span class="line">var decrypted = aesDecrypt(encrypted, key);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Plain text: &apos; + data);</span><br><span class="line">console.log(&apos;Encrypted text: &apos; + encrypted);</span><br><span class="line">console.log(&apos;Decrypted text: &apos; + decrypted);</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plain text: Hello, this is a secret message!</span><br><span class="line">Encrypted text: 8a944d97bdabc157a5b7a40cb180e7...</span><br><span class="line">Decrypted text: Hello, this is a secret message!</span><br></pre></td></tr></table></figure></p><p>可以看出，加密后的字符串通过解密又得到了原始内容。</p><p>注意到<code>AES</code>有很多不同的算法，如<code>aes192</code>，<code>aes-128-ecb</code>，<code>aes-256-cbc</code>等，AES除了<code>密钥</code>外还可以指定<code>IV（Initial Vector）</code>，<strong>不同的系统只要IV不同，用相同的密钥加密相同的数据得到的加密结果也是不同的。</strong>加密结果通常有两种表示方法：hex和base64，这些功能Nodejs全部都支持，但是在应用中要注意，如果加解密双方一方用Nodejs，另一方用Java、PHP等其它语言，需要仔细测试。如果无法正确解密，要确认双方是否遵循同样的AES算法，字符串密钥和IV是否相同，加密后的数据是否统一为hex或base64格式。</p><p><strong>Diffie-Hellman</strong></p><p><strong>DH算法是一种密钥交换协议</strong>，它可以让双方在不泄漏密钥的情况下协商出一个密钥来。DH算法基于数学原理，比如小明和小红想要协商一个密钥，可以这么做：</p><p>小明先选一个素数和一个底数，例如，素数p=23，底数g=5（底数可以任选），再选择一个秘密整数a=6，计算A=g^a mod p=8，然后大声告诉小红：p=23，g=5，A=8；</p><p>小红收到小明发来的p，g，A后，也选一个秘密整数b=15，然后计算B=g^b mod p=19，并大声告诉小明：B=19；</p><p>小明自己计算出s=B^a mod p=2，小红也自己计算出s=A^b mod p=2，因此，最终协商的密钥s为2。</p><p>在这个过程中，密钥2并不是小明告诉小红的，也不是小红告诉小明的，而是双方协商计算出来的。第三方只能知道p=23，g=5，A=8，B=19，<strong>由于不知道双方选的秘密整数a=6和b=15，因此无法计算出密钥2。</strong></p><p>用crypto模块实现DH算法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&apos;crypto&apos;);</span><br><span class="line"></span><br><span class="line">// xiaoming&apos;s keys:</span><br><span class="line">var ming = crypto.createDiffieHellman(512);</span><br><span class="line">var ming_keys = ming.generateKeys();</span><br><span class="line"></span><br><span class="line">var prime = ming.getPrime();</span><br><span class="line">var generator = ming.getGenerator();</span><br><span class="line"></span><br><span class="line">console.log(&apos;Prime: &apos; + prime.toString(&apos;hex&apos;));</span><br><span class="line">console.log(&apos;Generator: &apos; + generator.toString(&apos;hex&apos;));</span><br><span class="line"></span><br><span class="line">// xiaohong&apos;s keys:</span><br><span class="line">var hong = crypto.createDiffieHellman(prime, generator);</span><br><span class="line">var hong_keys = hong.generateKeys();</span><br><span class="line"></span><br><span class="line">// exchange and generate secret:</span><br><span class="line">var ming_secret = ming.computeSecret(hong_keys);</span><br><span class="line">var hong_secret = hong.computeSecret(ming_keys);</span><br><span class="line"></span><br><span class="line">// print secret:</span><br><span class="line">console.log(&apos;Secret of Xiao Ming: &apos; + ming_secret.toString(&apos;hex&apos;));</span><br><span class="line">console.log(&apos;Secret of Xiao Hong: &apos; + hong_secret.toString(&apos;hex&apos;));</span><br></pre></td></tr></table></figure></p><p>运行后，可以得到如下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node dh.js </span><br><span class="line">Prime: a8224c...deead3</span><br><span class="line">Generator: 02</span><br><span class="line">Secret of Xiao Ming: 695308...d519be</span><br><span class="line">Secret of Xiao Hong: 695308...d519be</span><br></pre></td></tr></table></figure></p><p>注意每次输出都不一样，因为素数的选择是随机的。</p><p><strong>证书</strong><br>crypto模块也可以处理数字证书。数字证书通常用在<code>SSL</code>连接，也就是Web的https连接。一般情况下，<code>https</code>连接只需要处理服务器端的单向认证，如无特殊需求（例如自己作为Root给客户发认证证书），建议用反向代理服务器如<code>Nginx</code>等Web服务器去处理证书。</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/29/node-document(1)/">http://jaymo666.github.io/2017/06/29/node-document(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Node </tag>
            
            <tag> 模块 </tag>
            
            <tag> npm </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node.js复习</title>
      <link href="/2017/06/29/node-document/"/>
      <content type="html"><![CDATA[<p>前阵子学习了Node，已经了解了Node的基本知识，并安装了node，npm，了解了怎么去运行，现在这篇是复习一下node。<a id="more"></a></p><h1 id="Node-复习）"><a href="#Node-复习）" class="headerlink" title="Node(复习）"></a>Node(复习）</h1><blockquote><p>Node.js:基于JavaScript语言和V8引擎的开源Web服务器项目</p></blockquote><p>在Node上运行的JavaScript相比其他后端开发语言有何优势？</p><blockquote><p>最大的优势是借助<strong>JavaScript天生的事件驱动机制</strong>加<strong>V8高性能引擎</strong>，使编写高性能Web服务轻而易举。<br>其次，JavaScript语言本身是完善的<strong>函数式语言</strong>,在Node环境下，通过<strong>模块化</strong>的JavaScript代码，加上函数式编程，并且<strong>无需考虑浏览器兼容性问题</strong>，直接使用最新的ECMAScript 6标准，可以完全满足工程上的需求。</p></blockquote><p>io.js，这又是什么鬼？</p><blockquote><p>io.js是“尝鲜版”，而Node.js是线上稳定版，相当于Fedora Linux和RHEL的关系。</p></blockquote><p>#npm</p><blockquote><p>npm其实是Node.js的包管理工具（package manager）。</p></blockquote><ul><li><p>为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。</p></li><li><p>更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p></li></ul><h3 id="第一个Node程序"><a href="#第一个Node程序" class="headerlink" title="第一个Node程序"></a>第一个Node程序</h3><p>选择一个目录，例如<code>F:\Node</code>，把文件保存为<code>hello.js</code>，就可以打开命令行窗口，把当前目录切换到<code>hello.js</code>所在目录，然后输入以下命令运行这个程序了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F:\Node&gt;node hello.js</span><br><span class="line">Hello, world.</span><br></pre></td></tr></table></figure></p><p>也可以保存为别的名字，比如first.js，但是必须要以<code>.js</code>结尾。此外，文件名只能是<code>英文字母</code>、<code>数字</code>和<code>下划线</code>的组合。</p><h3 id="命令行模式和Node交互模式"><a href="#命令行模式和Node交互模式" class="headerlink" title="命令行模式和Node交互模式"></a>命令行模式和Node交互模式</h3><blockquote><p>请注意区分命令行模式和Node交互模式。</p></blockquote><p>看到类似C:>是在Windows提供的<code>命令行模式</code>：</p><p><img src="http://www.liaoxuefeng.com/files/attachments/00143912121754934a42330afe74908a7d305faf0272f21000/l" alt=""></p><p>看到<code>&gt;</code>是在Node交互式环境下：<br><img src="http://www.liaoxuefeng.com/files/attachments/0014391212294193de526e6aab945c18a48203cd694f6dd000/l" alt=""></p><p><strong>在Node交互式环境下，我们可以输入JavaScript代码并立刻执行。</strong></p><h3 id="使用严格模式"><a href="#使用严格模式" class="headerlink" title="使用严格模式"></a>使用严格模式</h3><p>如果在JavaScript文件开头写上<code>&#39;use strict&#39;</code>;，那么Node在执行该JavaScript时将使用严格模式。但是，在服务器环境下，如果有很多JavaScript文件，每个文件都写上’use strict’;很麻烦。<strong>我们可以给Nodejs传递一个参数，让Node直接为所有js文件开启严格模式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --use_strict</span><br></pre></td></tr></table></figure><p>给指定文件开启严格模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --use_strict 文件名(例如:hello.js)</span><br></pre></td></tr></table></figure></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><blockquote><p>在Node环境中，一个.js文件就称之为一个模块（module）。</p></blockquote><p>使用模块有什么好处？</p><ul><li><p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括<code>Node内置的模块</code>和来自<code>第三方的模块</code>。</p></li><li><p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p></li></ul><p>比如，我们编写了一个<code>hello.js</code>文件，这个<code>hello.js</code>文件就是一个模块，模块的名字就是文件名（<strong>去掉.js后缀</strong>），所以<code>hello.js</code>文件就是名为<code>hello</code>的模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var s = &apos;Hello&apos;;</span><br><span class="line"></span><br><span class="line">function greet(name) &#123;</span><br><span class="line">    console.log(s + &apos;, &apos; + name + &apos;!&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = greet;</span><br></pre></td></tr></table></figure><p>函数greet()是我们在hello模块中定义的，你可能注意到最后一行是一个奇怪的赋值语句，它的意思是，<strong>把函数greet作为模块的输出暴露出去，这样其他模块就可以使用greet函数了</strong>。</p><p>问题是<strong>其他模块怎么使用hello模块的这个greet函数</strong>呢？我们再编写一个main.js文件，调用hello模块的greet函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">// 引入hello模块:</span><br><span class="line">var greet = require(&apos;./hello&apos;);</span><br><span class="line"></span><br><span class="line">var s = &apos;Michael&apos;;</span><br><span class="line"></span><br><span class="line">greet(s); // Hello, Michael!</span><br></pre></td></tr></table></figure></p><p>注意到引入hello模块用Node提供的require函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var greet = require(&apos;./hello&apos;);</span><br></pre></td></tr></table></figure></p><p>引入的模块作为变量保存在greet变量中，那greet变量到底是什么东西？其实变量greet就是在hello.js中我们用<code>module.exports = greet</code>;输出的greet函数。所以，main.js就成功地引用了hello.js模块中定义的greet()函数，接下来就可以直接使用它了。</p><p>在使用require()引入模块的时候，请注意模块的相对路径。因为<strong>main.js和hello.js位于同一个目录</strong>，所以我们用了当前目录.：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var greet = require(&apos;./hello&apos;); // 不要忘了写相对目录!</span><br></pre></td></tr></table></figure></p><p>如果只写模块名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var greet = require(&apos;hello&apos;);</span><br></pre></td></tr></table></figure></p><p>则Node会依次在<code>内置模块</code>、<code>全局模块</code>和<code>当前模块</code>下查找hello.js，你很可能会得到一个错误：</p><pre><code>module.jsthrow err;  ^Error: Cannot find module &apos;hello&apos;at Function.Module._resolveFilenameat Function.Module._load...at Function.Module._loadat Function.Module.runMain</code></pre><p>遇到这个错误，你要检查：</p><ul><li>模块名是否写对了；</li><li>模块文件是否存在；</li><li>相对路径是否写对了。</li></ul><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>这种模块加载机制被称为CommonJS规范。<strong>在这个规范下，每个.js文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突</strong>，例如，hello.js和main.js都申明了全局变量var s = ‘xxx’，但互不影响。</p><p>小结：<br>要在模块中对外输出变量，用</p><pre><code>module.exports = variable;</code></pre><p>输出的变量可以是任意对象、函数、数组等等。</p><p>要引入其他模块输出的对象，用：</p><pre><code>var foo = require(&apos;other_module&apos;);</code></pre><h3 id="深入了解模块原理"><a href="#深入了解模块原理" class="headerlink" title="深入了解模块原理"></a>深入了解模块原理</h3><blockquote><p>JavaScript语言本身并没有一种模块机制来保证不同模块可以使用相同的变量名。</p></blockquote><p>其实要实现“模块”这个功能，并不需要语法层面的支持。Node.js也并不会增加任何JavaScript语法。<strong>实现“模块”功能的奥妙就在于JavaScript是一种函数式编程语言，它支持闭包。</strong>如果我们把一段JavaScript代码用一个函数包装起来，这段代码的所有“全局”变量就变成了函数内部的局部变量。</p><p>请注意我们编写的hello.js代码是这样的：</p><pre><code>var s = &apos;Hello&apos;;var name = &apos;world&apos;;console.log(s + &apos; &apos; + name + &apos;!&apos;);</code></pre><p>Node.js加载了hello.js后，它可以把代码包装一下，变成这样执行：</p><pre><code>(function () {// 读取的hello.js代码:var s = &apos;Hello&apos;;var name = &apos;world&apos;;console.log(s + &apos; &apos; + name + &apos;!&apos;);// hello.js代码结束})();</code></pre><p>所以，Node利用JavaScript的函数式编程的特性，轻而易举地实现了模块的隔离。</p><p>但是，模块的输出module.exports怎么实现？</p><p>这个也很容易实现，Node可以先准备一个对象module：</p><pre><code>// 准备module对象:var module = {id: &apos;hello&apos;,exports: {}};var load = function (module) {// 读取的hello.js代码:function greet(name) {console.log(&apos;Hello, &apos; + name + &apos;!&apos;);}module.exports = greet;// hello.js代码结束return module.exports;};var exported = load(module);// 保存module:save(module, exported);</code></pre><p>可见，变量module是Node在加载js文件前准备的一个变量，并将其传入加载函数，我们在<code>hello.js</code>中可以直接使用变量<code>module</code>原因就在于它实际上是函数的一个参数：</p><pre><code>module.exports = greet;</code></pre><p>通过把参数<code>module</code>传递给<code>load(</code>)函数，hello.js就顺利地把一个变量传递给了Node执行环境，Node会把module变量保存到某个地方。</p><p>由于Node保存了所有导入的<code>module</code>，当我们用<code>require()</code>获取<code>module</code>时，Node找到对应的<code>module</code>，把这个<code>module</code>的<code>exports</code>变量返回，这样，另一个模块就顺利拿到了模块的输出：</p><pre><code>var greet = require(&apos;./hello&apos;);</code></pre><p>以上是Node实现JavaScript模块的一个简单的原理介绍。</p><h3 id="module-exports-vs-exports"><a href="#module-exports-vs-exports" class="headerlink" title="module.exports vs exports"></a>module.exports vs exports</h3><p>很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：</p><p>方法一：对module.exports赋值：</p><pre><code>// hello.jsfunction hello() {console.log(&apos;Hello, world!&apos;);}function greet(name) {console.log(&apos;Hello, &apos; + name + &apos;!&apos;);}module.exports = {hello: hello,greet: greet};</code></pre><p>方法二：直接使用exports：</p><pre><code>// hello.jsfunction hello() {console.log(&apos;Hello, world!&apos;);}function greet(name) {console.log(&apos;Hello, &apos; + name + &apos;!&apos;);}function hello() {console.log(&apos;Hello, world!&apos;);}exports.hello = hello;exports.greet = greet;</code></pre><p>但是你不可以直接对exports赋值：</p><p>// 代码可以执行，但是模块并没有输出任何变量:</p><pre><code>exports = {hello: hello,greet: greet};</code></pre><p>结论:<br>如果要输出一个函数或数组，必须直接对module.exports对象赋值。</p><p><strong>直接对<code>module.exports</code>赋值，可以应对任何情况</strong></p><pre><code>module.exports = {foo: function () { return &apos;foo&apos;; }};</code></pre><p>或者：</p><pre><code>module.exports = function () { return &apos;foo&apos;; };</code></pre><h3 id="基本模块"><a href="#基本模块" class="headerlink" title="基本模块"></a>基本模块</h3><p><strong>因为Node.js是运行在服务区端的JavaScript环境</strong>，服务器程序和浏览器程序相比，最大的特点是<strong>没有浏览器的安全限制</strong>了，而且，服务器程序必须能接收网络请求，读写文件，处理二进制内容，所以，<strong>Node.js内置的常用模块就是为了实现基本的服务器功能</strong>。这些模块在浏览器环境中是无法被执行的，<strong>因为它们的底层代码是用C/C++在Node.js运行环境中实现的。</strong></p><h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><p>在前面的<code>JavaScript</code>课程中，我们已经知道，JavaScript有且仅有一个全局对象，在浏览器中，叫<code>window</code>对象。而在Node.js环境中，也有唯一的全局对象，但不叫<code>window</code>，而叫<code>global</code>，这个对象的属性和方法也和浏览器环境的window不同。进入Node.js交互环境，可以直接输入：</p><pre><code>E:\Node&gt;node&gt; global.consoleConsole {  log: [Function: bound ],  info: [Function: bound ],  warn: [Function: bound ],  error: [Function: bound ],  dir: [Function: bound ],  time: [Function: bound ],  timeEnd: [Function: bound ],  trace: [Function: bound trace],  assert: [Function: bound ],  Console: [Function: Console] }&gt;</code></pre><h4 id="process"><a href="#process" class="headerlink" title="process"></a>process</h4><p>·process·也是Node.js提供的一个对象，<strong>它代表当前Node.js进程</strong>。通过process对象可以拿到许多有用信息：</p><pre><code>&gt; process==global.processtrue&gt; process.version&apos;v4.6.0&apos;&gt; process.platform&apos;win32&apos;&gt; process.arch&apos;x64&apos;&gt;&gt; process.cwd()&apos;E:\\Node&apos;</code></pre><p>JavaScript程序是由<strong>事件驱动</strong>执行的<strong>单线程模型</strong>，Node.js也不例外。Node.js不断执行响应事件的JavaScript函数，直到没有任何响应事件的函数可以执行时，Node.js就退出了。</p><p>如果我们想要在下一次事件响应中执行代码，可以调用<code>process.nextTick()</code>：</p><pre><code>// test.js// process.nextTick()将在下一轮事件循环中调用:process.nextTick(function () {console.log(&apos;nextTick callback!&apos;);});console.log(&apos;nextTick was set!&apos;);</code></pre><p>用Node执行上面的代码<code>node test.js</code>，你会看到，打印输出是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nextTick was set!</span><br><span class="line">nextTick callback!</span><br></pre></td></tr></table></figure></p><p>这说明传入<code>process.nextTick()</code>的函数不是立刻执行，而是要等到下一次事件循环。</p><p>Node.js<strong>进程</strong>本身的事件就由<code>process</code>对象来处理。如果我们响应<code>exit</code>事件，就可以在程序即将退出时执行某个回调函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 程序即将退出时的回调函数:</span><br><span class="line">process.on(&apos;exit&apos;, function (code) &#123;</span><br><span class="line">    console.log(&apos;about to exit with code: &apos; + code);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="判断JavaScript执行环境"><a href="#判断JavaScript执行环境" class="headerlink" title="判断JavaScript执行环境"></a>判断JavaScript执行环境</h4><p>有很多JavaScript代码既能在浏览器中执行，也能在Node环境执行，但有些时候，程序本身需要判断自己到底是在什么环境下执行的，常用的方式就是根据<strong>浏览器</strong>和<strong>Node环境提供的全局变量名称</strong>来判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (typeof(window) === &apos;undefined&apos;) &#123;</span><br><span class="line">    console.log(&apos;node.js&apos;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    console.log(&apos;browser&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h4><p>Node.js内置的<code>fs</code>模块就是    文件系统模块    ，<strong>负责读写文件。</strong></p><p>和所有其它JavaScript模块不同的是，<strong>fs模块同时提供了异步和同步的方法。</strong></p><p>回顾一下什么是异步方法。因为JavaScript的单线程模型，<strong>执行IO操作时，JavaScript代码无需等待，而是传入回调函数后，继续执行后续JavaScript代码。</strong>比如jQuery提供的getJSON()操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(&apos;http://example.com/ajax&apos;, function (data) &#123;</span><br><span class="line">    console.log(&apos;IO结果返回后执行...&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&apos;不等待IO结果直接执行后续代码...&apos;);</span><br></pre></td></tr></table></figure></p><p>而同步的IO操作则需要等待函数返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 根据网络耗时，函数将执行几十毫秒~几秒不等:</span><br><span class="line">var data = getJSONSync(&apos;http://example.com/ajax&apos;);</span><br></pre></td></tr></table></figure></p><p>同步操作的好处是代码简单，缺点是程序将等待IO操作，在等待时间内，无法响应其它任何事件。而异步读取不用等待IO操作，但代码较麻烦。</p><p><strong>异步读文件</strong><br>按照JavaScript的标准，异步读取一个文本文件的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;sample.txt&apos;, &apos;utf-8&apos;, function (err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请注意，<code>sample.txt</code>文件必须在当前目录下，且文件编码为<code>utf-8</code>。</p><p>异步读取时，传入的回调函数接收两个参数，当正常读取时，<code>err</code>参数为<code>null</code>，<code>data</code>参数为读取到的<code>String</code>。当读取发生错误时，<code>err</code>参数代表一个错误对象，<code>data</code>为<code>undefined</code>。这也是Node.js标准的回调函数：第一个参数代表错误信息，第二个参数代表结果。后面我们还会经常编写这种回调函数。</p><p><strong>由于err是否为null就是判断是否出错的标志</strong>，所以通常的判断逻辑总是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (err) &#123;</span><br><span class="line">    // 出错了</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 正常</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们要读取的文件不是文本文件，而是<strong>二进制文件</strong>，怎么办？</p><p>下面的例子演示了如何读取一个图片文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;sample.png&apos;, function (err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">        console.log(data.length + &apos; bytes&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当读取二进制文件时，不传入文件编码时，回调函数的<code>data</code>参数将返回一个<code>Buffer</code>对象。在Node.js中，<strong>Buffer对象就是一个包含零个或任意个字节的数组</strong>（注意和Array不同）。</p><p><strong>Buffer对象可以和String作转换</strong>，例如，把一个Buffer对象转换成String：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Buffer -&gt; String</span><br><span class="line">var text = data.toString(&apos;utf-8&apos;);</span><br><span class="line">console.log(text);</span><br></pre></td></tr></table></figure></p><p>或者把一个String转换成Buffer：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// String -&gt; Buffer</span><br><span class="line">var buf = new Buffer(text, &apos;utf-8&apos;);</span><br><span class="line">console.log(buf);</span><br></pre></td></tr></table></figure></p><p><strong>同步读文件</strong></p><p>除了标准的异步读取模式外，fs也提供相应的<strong>同步</strong>读取函数。同步读取的函数和异步函数相比，多了一个<code>Sync</code><strong>后缀</strong>，并且<strong>不接收回调函数</strong>，函数直接返回结果。</p><p>用<code>fs</code>模块同步读取一个文本文件的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var data = fs.readFileSync(&apos;sample.txt&apos;, &apos;utf-8&apos;);</span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><p>可见，原异步调用的回调函数的<code>data</code>被函数直接返回，函数名需要改为<code>readFileSync</code>，其它参数不变。</p><p>如果同步读取文件发生错误，则需要用<strong>try…catch</strong>捕获该错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    var data = fs.readFileSync(&apos;sample.txt&apos;, &apos;utf-8&apos;);</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125; catch (err) &#123;</span><br><span class="line">    // 出错了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>写文件</strong></p><p>将数据写入文件是通过<code>fs.writeFile()</code>实现的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var data = &apos;Hello, Node.js&apos;;</span><br><span class="line">fs.writeFile(&apos;output.txt&apos;, data, function (err) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&apos;ok.&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>writeFile()的参数依次为<strong>文件名</strong>、<strong>数据</strong>和<strong>回调函数</strong>。如果传入的数据是String，默认按UTF-8编码写入文本文件，如果传入的参数是Buffer，则写入的是二进制文件。<strong>回调函数由于只关心成功与否，因此只需要一个err参数。</strong><br>和readFile()类似，<code>writeFile()</code>也有一个同步方法，叫<code>writeFileSync()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var data = &apos;Hello, Node.js&apos;;</span><br><span class="line">fs.writeFileSync(&apos;output.txt&apos;, data);</span><br></pre></td></tr></table></figure></p><p><strong>stat</strong><br>如果我们要获取<strong>文件大小</strong>，<strong>创建时间</strong>等信息，可以使用<code>fs.stat()</code>，它返回一个<code>Stat对象</code>，能告诉我们文件或目录的详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.stat(&apos;sample.txt&apos;, function (err, stat) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 是否是文件:</span><br><span class="line">        console.log(&apos;isFile: &apos; + stat.isFile());</span><br><span class="line">        // 是否是目录:</span><br><span class="line">        console.log(&apos;isDirectory: &apos; + stat.isDirectory());</span><br><span class="line">        if (stat.isFile()) &#123;</span><br><span class="line">            // 文件大小:</span><br><span class="line">            console.log(&apos;size: &apos; + stat.size);</span><br><span class="line">            // 创建时间, Date对象:</span><br><span class="line">            console.log(&apos;birth time: &apos; + stat.birthtime);</span><br><span class="line">            // 修改时间, Date对象:</span><br><span class="line">            console.log(&apos;modified time: &apos; + stat.mtime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isFile: true</span><br><span class="line">isDirectory: false</span><br><span class="line">size: 181</span><br><span class="line">birth time: Fri Dec 11 2015 09:43:41 GMT+0800 (CST)</span><br><span class="line">modified time: Fri Dec 11 2015 12:09:00 GMT+0800 (CST)</span><br></pre></td></tr></table></figure></p><p>stat()也有一个对应的同步函数statSync()</p><p><strong>异步还是同步</strong></p><p>在<code>fs</code>模块中，提供同步方法是为了方便使用。<strong>那我们到底是应该用异步方法还是同步方法呢？</strong></p><p>由于Node环境执行的JavaScript代码是服务器端代码，所以，绝大部分需要在服务器运行期反复执行业务逻辑的代码，<strong>必须使用异步代码</strong>，否则，同步代码在执行时期，服务器将停止响应，因为JavaScript只有一个执行线程。</p><p><strong>服务器启动时如果需要读取配置文件，或者结束时需要写入到状态文件时，可以使用同步代码，</strong>因为这些代码只在启动和结束时执行一次，不影响服务器正常运行时的异步执行。</p><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><p><code>stream</code>是Node.js提供的又一个<strong>仅在服务区端</strong>可用的模块，<strong>目的是支持“流”这种数据结构</strong>。</p><p>什么是流？流是一种<strong>抽象</strong>的数据结构。<br><strong>流的特点是数据是有序的，而且必须依次读取，或者依次写入，不能像Array那样随机定位。</strong></p><p>在Node.js中，流也是一个对象，我们只需要响应流的事件就可以了：<code>data</code>事件表示流的数据已经可以读取了，<code>end</code>事件表示这个流已经到末尾了，没有数据可以读取了，<code>error</code>事件表示出错了。</p><p>下面是一个从文件流读取文本内容的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">// 打开一个流:</span><br><span class="line">var rs = fs.createReadStream(&apos;sample.txt&apos;, &apos;utf-8&apos;);</span><br><span class="line"></span><br><span class="line">rs.on(&apos;data&apos;, function (chunk) &#123;</span><br><span class="line">    console.log(&apos;DATA:&apos;)</span><br><span class="line">    console.log(chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(&apos;end&apos;, function () &#123;</span><br><span class="line">    console.log(&apos;END&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(&apos;error&apos;, function (err) &#123;</span><br><span class="line">    console.log(&apos;ERROR: &apos; + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>要注意，<code>data</code>事件可能会有多次，每次传递的<code>chunk</code>是流的一部分数据。</p><p>要以流的形式写入文件，只需要不断调用<code>write()</code>方法，最后以<code>end()</code>结束：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var ws1 = fs.createWriteStream(&apos;output1.txt&apos;, &apos;utf-8&apos;);</span><br><span class="line">ws1.write(&apos;使用Stream写入文本数据...\n&apos;);</span><br><span class="line">ws1.write(&apos;END.&apos;);</span><br><span class="line">ws1.end();</span><br><span class="line"></span><br><span class="line">var ws2 = fs.createWriteStream(&apos;output2.txt&apos;);</span><br><span class="line">ws2.write(new Buffer(&apos;使用Stream写入二进制数据...\n&apos;, &apos;utf-8&apos;));</span><br><span class="line">ws2.write(new Buffer(&apos;END.&apos;, &apos;utf-8&apos;));</span><br><span class="line">ws2.end();</span><br></pre></td></tr></table></figure></p><p>所有可以读取数据的流都继承自<code>stream.Readable</code>，所有可以写入的流都继承自<code>stream.Writable</code>。</p><h2 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h2><p>就像可以<strong>把两个水管串成一个更长的水管一样</strong>，两个流也可以串起来。一个<code>Readable</code>流和一个<code>Writable</code>流串起来后，<strong>所有的数据自动从Readable流进入Writable流</strong>，这种操作叫pipe。</p><p>在Node.js中，<code>Readable</code>流有一个<code>pipe()</code>方法，就是用来干这件事的。</p><p>让我们用<code>pipe()</code>把一个文件流和另一个文件流串起来，这样源文件的所有数据就自动写入到目标文件里了，所以，<strong>这实际上是一个复制文件的程序：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">var rs = fs.createReadStream(&apos;sample.txt&apos;);</span><br><span class="line">var ws = fs.createWriteStream(&apos;copied.txt&apos;);</span><br><span class="line"></span><br><span class="line">rs.pipe(ws);</span><br></pre></td></tr></table></figure></p><p>默认情况下，当<code>Readable</code>流的数据读取完毕，<code>end</code>事件触发后，将自动关闭<code>Writable</code>流。如果我们不希望自动关闭Writable流，需要传入参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readable.pipe(writable, &#123; end: false &#125;);</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><strong>HTTP协议</strong><br>要理解Web服务器程序的工作原理，首先，我们要对HTTP协议有基本的了解。</p><p><strong>HTTP服务器</strong><br>要开发HTTP服务器程序，从头处理TCP连接，解析HTTP是不现实的。这些工作实际上已经由Node.js自带的<code>http</code>模块完成了。应用程序并不直接和HTTP协议打交道，而是<strong>操作http模块提供的<code>request</code>和<code>response</code>对象。</strong></p><p>request对象封装了HTTP请求，我们调用request对象的属性和方法就可以拿到所有HTTP请求的信息；</p><p>response对象封装了HTTP响应，我们操作response对象的方法，就可以把HTTP响应返回给浏览器。</p><p>用Node.js实现一个HTTP服务器程序非常简单。我们来实现一个最简单的Web程序hello.js，<strong>它对于所有请求，都返回Hello world!：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">// 导入http模块:</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">// 创建http server，并传入回调函数:</span><br><span class="line">var server = http.createServer(function (request, response) &#123;</span><br><span class="line">    // 回调函数接收request和response对象,</span><br><span class="line">    // 获得HTTP请求的method和url:</span><br><span class="line">    console.log(request.method + &apos;: &apos; + request.url);</span><br><span class="line">    // 将HTTP响应200写入response, 同时设置Content-Type: text/html:</span><br><span class="line">    response.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/html&apos;&#125;);</span><br><span class="line">    // 将HTTP响应的HTML内容写入response:</span><br><span class="line">    response.end(&apos;&lt;h1&gt;Hello world!&lt;/h1&gt;&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 让服务器监听8080端口:</span><br><span class="line">server.listen(8080);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Server is running at http://127.0.0.1:8080/&apos;);</span><br></pre></td></tr></table></figure></p><p>在命令提示符下运行该程序，可以看到以下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node hello.js </span><br><span class="line">Server is running at http://127.0.0.1:8080/</span><br></pre></td></tr></table></figure></p><p>不要关闭命令提示符，直接打开浏览器输入<code>http://localhost:8080</code>，即可看到服务器响应的内容。<br>同时，在命令提示符窗口，可以看到程序打印的请求信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: /</span><br><span class="line">GET: /favicon.ico</span><br></pre></td></tr></table></figure><p><strong>文件服务器</strong><br>让我们继续扩展一下上面的Web程序。我们可以<strong>设定一个目录</strong>，然后<strong>让Web程序变成一个文件服务器</strong>。要实现这一点，我们只需要<strong>解析request.url中的路径</strong>，然后<strong>在本地找到对应的文件</strong>，<strong>把文件内容发送出去</strong>就可以了。</p><p><strong>解析URL</strong>需要用到Node.js提供的<code>url</code>模块，它使用起来非常简单，通过<code>parse()</code>将一个字符串解析为一个Url对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var url = require(&apos;url&apos;);</span><br><span class="line"></span><br><span class="line">console.log(url.parse(&apos;http://user:pass@host.com:8080/path/to/file?query=string#hash&apos;));</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: &apos;http:&apos;,</span><br><span class="line">  slashes: true,</span><br><span class="line">  auth: &apos;user:pass&apos;,</span><br><span class="line">  host: &apos;host.com:8080&apos;,</span><br><span class="line">  port: &apos;8080&apos;,</span><br><span class="line">  hostname: &apos;host.com&apos;,</span><br><span class="line">  hash: &apos;#hash&apos;,</span><br><span class="line">  search: &apos;?query=string&apos;,</span><br><span class="line">  query: &apos;query=string&apos;,</span><br><span class="line">  pathname: &apos;/path/to/file&apos;,</span><br><span class="line">  path: &apos;/path/to/file?query=string&apos;,</span><br><span class="line">  href: &apos;http://user:pass@host.com:8080/path/to/file?query=string#hash&apos; &#125;</span><br></pre></td></tr></table></figure></p><p>处理本地文件目录需要使用Node.js提供的<code>path</code>模块，它可以方便地构造目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">// 解析当前目录:</span><br><span class="line">var workDir = path.resolve(&apos;.&apos;); //F:\Node</span><br><span class="line"></span><br><span class="line">// 组合完整的文件路径:当前目录+&apos;pub&apos;+&apos;index.html&apos;:</span><br><span class="line">var filePath = path.join(workDir, &apos;pub&apos;, &apos;index.html&apos;);</span><br><span class="line">// &apos;F:\Node\pub\index.html&apos;</span><br></pre></td></tr></table></figure></p><p>最后，我们实现一个文件服务器<code>file_server.js</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var</span><br><span class="line">    fs = require(&apos;fs&apos;),</span><br><span class="line">    url = require(&apos;url&apos;),</span><br><span class="line">    path = require(&apos;path&apos;),</span><br><span class="line">    http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">// 从命令行参数获取root目录，默认是当前目录:</span><br><span class="line">var root = path.resolve(process.argv[2] || &apos;.&apos;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Static root dir: &apos; + root);</span><br><span class="line"></span><br><span class="line">// 创建服务器:</span><br><span class="line">var server = http.createServer(function (request, response) &#123;</span><br><span class="line">    // 获得URL的path，类似 &apos;/css/bootstrap.css&apos;:</span><br><span class="line">    var pathname = url.parse(request.url).pathname;</span><br><span class="line">    // 获得对应的本地文件路径，类似 &apos;/srv/www/css/bootstrap.css&apos;:</span><br><span class="line">    var filepath = path.join(root, pathname);</span><br><span class="line">    // 获取文件状态:</span><br><span class="line">    fs.stat(filepath, function (err, stats) &#123;</span><br><span class="line">        if (!err &amp;&amp; stats.isFile()) &#123;</span><br><span class="line">            // 没有出错并且文件存在:</span><br><span class="line">            console.log(&apos;200 &apos; + request.url);</span><br><span class="line">            // 发送200响应:</span><br><span class="line">            response.writeHead(200);</span><br><span class="line">            // 将文件流导向response:</span><br><span class="line">            fs.createReadStream(filepath).pipe(response);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 出错了或者文件不存在:</span><br><span class="line">            console.log(&apos;404 &apos; + request.url);</span><br><span class="line">            // 发送404响应:</span><br><span class="line">            response.writeHead(404);</span><br><span class="line">            response.end(&apos;404 Not Found&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8080);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Server is running at http://127.0.0.1:8080/&apos;);</span><br></pre></td></tr></table></figure></p><p>没有必要手动读取文件内容。由于<code>response</code>对象本身是一个<code>Writable Stream</code>，直接用<code>pipe()</code>方法就实现了<strong>自动读取文件内容并输出到HTTP响应。</strong></p><p>在命令行运行<code>node file_server.js ./path/to/dir</code>，把<code>/path/to/dir</code>改成你本地的file_server.js路径下一个有效的目录，然后在浏览器中输入<code>http://localhost:8080/index.html</code>：</p><p>只要当前目录下存在文件index.html，服务器就可以把文件内容发送给浏览器。观察控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F:\Node&gt;node demo2.js ./path/to/dir</span><br><span class="line">Static root dir: F:\Node\path\to\dir</span><br><span class="line">Server is running at http://127.0.0.1:8080/</span><br><span class="line">200 /index.html</span><br></pre></td></tr></table></figure></p><p>第一个请求是浏览器请求<code>index.html</code>页面，后续请求是浏览器解析HTML后发送的其它资源请求。</p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><p>crypto模块的目的是<strong>为了提供通用的加密和哈希算法</strong>。用纯JavaScript代码实现这些功能不是不可能，但速度会非常慢。<strong>Nodejs用<code>C/C++</code>实现这些算法后</strong>，通过<code>cypto</code>这个模块暴露为JavaScript接口，这样用起来方便，运行速度也快。</p><p><strong>MD5和SHA1</strong></p><p>MD5是一种常用的<strong>哈希算法</strong>，<strong>用于给任意数据一个“签名”。</strong>这个签名通常用一个十六进制的字符串表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&apos;crypto&apos;);</span><br><span class="line"></span><br><span class="line">const hash = crypto.createHash(&apos;md5&apos;);</span><br><span class="line"></span><br><span class="line">// 可任意多次调用update():</span><br><span class="line">hash.update(&apos;Hello, world!&apos;);</span><br><span class="line">hash.update(&apos;Hello, nodejs!&apos;);</span><br><span class="line"></span><br><span class="line">console.log(hash.digest(&apos;hex&apos;)); // 7e1977739c748beac0c0fd14fd26a544</span><br></pre></td></tr></table></figure></p><p><code>update()</code>方法默认字符串编码为<code>UTF-8</code>，也可以传入<code>Buffer</code>。</p><p>如果要计算<code>SHA1</code>，只需要把<code>&#39;md5&#39;</code>改成<code>&#39;sha1&#39;</code>，就可以得到SHA1的结果<code>1f32b9c9932c02227819a4151feed43e131aca40</code>。</p><p>还可以使用更安全的<code>sha256</code>和<code>sha512</code>。</p><p><strong>Hmac</strong><br>Hmac算法也是一种哈希算法，它可以利用MD5或SHA1等哈希算法。不同的是，<strong>Hmac还需要一个密钥</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&apos;crypto&apos;);</span><br><span class="line"></span><br><span class="line">const hmac = crypto.createHmac(&apos;sha256&apos;, &apos;secret-key&apos;);</span><br><span class="line"></span><br><span class="line">hmac.update(&apos;Hello, world!&apos;);</span><br><span class="line">hmac.update(&apos;Hello, nodejs!&apos;);</span><br><span class="line"></span><br><span class="line">console.log(hmac.digest(&apos;hex&apos;)); // 80f7e22570.</span><br></pre></td></tr></table></figure></p><p>只要密钥发生了变化，那么同样的输入数据也会得到不同的签名，因此，<strong>可以把Hmac理解为用随机数“增强”的哈希算法。</strong></p><p><strong>AES</strong></p><p>AES是一种常用的<strong>对称加密算法，加解密都用同一个密钥</strong>。crypto模块提供了AES支持，但是需要自己封装好函数，便于使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&apos;crypto&apos;);</span><br><span class="line"></span><br><span class="line">function aesEncrypt(data, key) &#123;</span><br><span class="line">    const cipher = crypto.createCipher(&apos;aes192&apos;, key);</span><br><span class="line">    var crypted = cipher.update(data, &apos;utf8&apos;, &apos;hex&apos;);</span><br><span class="line">    crypted += cipher.final(&apos;hex&apos;);</span><br><span class="line">    return crypted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function aesDecrypt(encrypted, key) &#123;</span><br><span class="line">    const decipher = crypto.createDecipher(&apos;aes192&apos;, key);</span><br><span class="line">    var decrypted = decipher.update(encrypted, &apos;hex&apos;, &apos;utf8&apos;);</span><br><span class="line">    decrypted += decipher.final(&apos;utf8&apos;);</span><br><span class="line">    return decrypted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var data = &apos;Hello, this is a secret message!&apos;;</span><br><span class="line">var key = &apos;Password!&apos;;</span><br><span class="line">var encrypted = aesEncrypt(data, key);</span><br><span class="line">var decrypted = aesDecrypt(encrypted, key);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Plain text: &apos; + data);</span><br><span class="line">console.log(&apos;Encrypted text: &apos; + encrypted);</span><br><span class="line">console.log(&apos;Decrypted text: &apos; + decrypted);</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plain text: Hello, this is a secret message!</span><br><span class="line">Encrypted text: 8a944d97bdabc157a5b7a40cb180e7...</span><br><span class="line">Decrypted text: Hello, this is a secret message!</span><br></pre></td></tr></table></figure></p><p>可以看出，加密后的字符串通过解密又得到了原始内容。</p><p>注意到<code>AES</code>有很多不同的算法，如<code>aes192</code>，<code>aes-128-ecb</code>，<code>aes-256-cbc</code>等，AES除了<code>密钥</code>外还可以指定<code>IV（Initial Vector）</code>，<strong>不同的系统只要IV不同，用相同的密钥加密相同的数据得到的加密结果也是不同的。</strong>加密结果通常有两种表示方法：hex和base64，这些功能Nodejs全部都支持，但是在应用中要注意，如果加解密双方一方用Nodejs，另一方用Java、PHP等其它语言，需要仔细测试。如果无法正确解密，要确认双方是否遵循同样的AES算法，字符串密钥和IV是否相同，加密后的数据是否统一为hex或base64格式。</p><p><strong>Diffie-Hellman</strong></p><p><strong>DH算法是一种密钥交换协议</strong>，它可以让双方在不泄漏密钥的情况下协商出一个密钥来。DH算法基于数学原理，比如小明和小红想要协商一个密钥，可以这么做：</p><p>小明先选一个素数和一个底数，例如，素数p=23，底数g=5（底数可以任选），再选择一个秘密整数a=6，计算A=g^a mod p=8，然后大声告诉小红：p=23，g=5，A=8；</p><p>小红收到小明发来的p，g，A后，也选一个秘密整数b=15，然后计算B=g^b mod p=19，并大声告诉小明：B=19；</p><p>小明自己计算出s=B^a mod p=2，小红也自己计算出s=A^b mod p=2，因此，最终协商的密钥s为2。</p><p>在这个过程中，密钥2并不是小明告诉小红的，也不是小红告诉小明的，而是双方协商计算出来的。第三方只能知道p=23，g=5，A=8，B=19，<strong>由于不知道双方选的秘密整数a=6和b=15，因此无法计算出密钥2。</strong></p><p>用crypto模块实现DH算法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&apos;crypto&apos;);</span><br><span class="line"></span><br><span class="line">// xiaoming&apos;s keys:</span><br><span class="line">var ming = crypto.createDiffieHellman(512);</span><br><span class="line">var ming_keys = ming.generateKeys();</span><br><span class="line"></span><br><span class="line">var prime = ming.getPrime();</span><br><span class="line">var generator = ming.getGenerator();</span><br><span class="line"></span><br><span class="line">console.log(&apos;Prime: &apos; + prime.toString(&apos;hex&apos;));</span><br><span class="line">console.log(&apos;Generator: &apos; + generator.toString(&apos;hex&apos;));</span><br><span class="line"></span><br><span class="line">// xiaohong&apos;s keys:</span><br><span class="line">var hong = crypto.createDiffieHellman(prime, generator);</span><br><span class="line">var hong_keys = hong.generateKeys();</span><br><span class="line"></span><br><span class="line">// exchange and generate secret:</span><br><span class="line">var ming_secret = ming.computeSecret(hong_keys);</span><br><span class="line">var hong_secret = hong.computeSecret(ming_keys);</span><br><span class="line"></span><br><span class="line">// print secret:</span><br><span class="line">console.log(&apos;Secret of Xiao Ming: &apos; + ming_secret.toString(&apos;hex&apos;));</span><br><span class="line">console.log(&apos;Secret of Xiao Hong: &apos; + hong_secret.toString(&apos;hex&apos;));</span><br></pre></td></tr></table></figure></p><p>运行后，可以得到如下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node dh.js </span><br><span class="line">Prime: a8224c...deead3</span><br><span class="line">Generator: 02</span><br><span class="line">Secret of Xiao Ming: 695308...d519be</span><br><span class="line">Secret of Xiao Hong: 695308...d519be</span><br></pre></td></tr></table></figure></p><p>注意每次输出都不一样，因为素数的选择是随机的。</p><p><strong>证书</strong><br>crypto模块也可以处理数字证书。数字证书通常用在<code>SSL</code>连接，也就是Web的https连接。一般情况下，<code>https</code>连接只需要处理服务器端的单向认证，如无特殊需求（例如自己作为Root给客户发认证证书），建议用反向代理服务器如<code>Nginx</code>等Web服务器去处理证书。</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/29/node-document/">http://jaymo666.github.io/2017/06/29/node-document/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Node </tag>
            
            <tag> 模块 </tag>
            
            <tag> npm </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS构造函数及new运算符</title>
      <link href="/2017/06/24/contructor-new(1)/"/>
      <content type="html"><![CDATA[<p>JS中的函数即可以是构造函数又可以当作普通函数来调用，当使用new来创建对象时，对应的函数就是构造函数，通过对象来调用时就是普通函数。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><blockquote><p>普通函数的创建有：显式声明、匿名定义、new Function() 等三种方式。</p></blockquote><p>当通过new来创建一个新对象时，JS底层将<code>新对象的原型链</code>指向了<code>构造函数的原型对象</code>，于是就在新对象和函数对象之间建立了一条原型链，通过<strong>新对象可以访问到函数对象原型prototype中的方法和属性</strong>。</p><blockquote><p>和其他高级语言一样 Javascript 中也有构造函数和 new 运算符，我们知道 new 是用来实例化一个类，从而在内存中分配一个实例对象。 但在 Javascript 中，万物皆对象，为什么还要通过 new 来产生对象？ 本文将带你一起来探索 Javascript 中 new 的奥秘…</p></blockquote><h2 id="1、认识new运算符"><a href="#1、认识new运算符" class="headerlink" title="1、认识new运算符"></a>1、认识new运算符</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"> Animal.color = &quot;black&quot;;</span><br><span class="line"> Animal.prototype.say = function()&#123;</span><br><span class="line">console.log(&quot;I&apos;m &quot; + this.name);</span><br><span class="line"> &#125;;</span><br><span class="line"> var cat = new Animal(&quot;cat&quot;);</span><br><span class="line"> </span><br><span class="line"> console.log(</span><br><span class="line">   cat.name,  //cat</span><br><span class="line">   cat.color //undefined</span><br><span class="line"> );</span><br><span class="line"> cat.say(); //I&apos;m cat</span><br><span class="line"> </span><br><span class="line"> console.log(</span><br><span class="line">   Animal.name, //Animal</span><br><span class="line">   Animal.color //back</span><br><span class="line"> );</span><br><span class="line"> Animal.say(); //Animal.say is not a function</span><br></pre></td></tr></table></figure><h2 id="2、代码解读"><a href="#2、代码解读" class="headerlink" title="2、代码解读"></a>2、代码解读</h2><p> 1-3行创建了一个函数Animal,并在其this上定义了属性:name,name的值是函数被执行时的形参。</p><p>  第4行在Animal对象（Animal本身是一个函数对象）上定义了一个静态属性:color,并赋值“black”</p><p>  5-7行在Animal函数的原型对象prototype上定义了一个say()方法，say方法输出了this的name值。</p><p>  第8行通过new关键字创建了一个新对象cat</p><p>  10-14行cat对象尝试访问name和color属性，并调用say方法。</p><p>  16-20行Animal对象尝试访问name和color属性，并调用say方法。</p><h2 id="3、重点解析"><a href="#3、重点解析" class="headerlink" title="3、重点解析"></a>3、重点解析</h2><p> 第8行代码是关键：</p><pre><code>var cat = new Animal(&quot;cat&quot;);</code></pre><p>Animal 本身是一个普通函数，但当通过new来创建对象时，Animal就是构造函数。<br>JS引擎执行这句代码时，在内部做了很多工作，用伪代码模拟其工作流程如下：</p><pre><code>new Animal(&quot;cat&quot;) = {var obj = {};obj.__proto__ = Animal.prototype;var result = Animal.call(obj,&quot;cat&quot;);return typeof result === &apos;object&apos;? result : obj;}</code></pre><p>（1）创建一个空对象obj;</p><p>（2）把obj的<code>__proto__</code>指向构造函数Animal的原型对象<code>prototype</code>，此时便建立了obj对象的原型链：<strong>obj-&gt;Animal.prototype-&gt;Object.prototype-&gt;null</strong></p><p>（3）在obj对象的执行环境调用Animal 函数并传递参数“cat”。 相当于var result = obj.Animal(“cat”)。</p><p>（4）考察第3步返回的返回值，如果无返回值或者返回一个非对象值，则将obj返回作为新对象；否则会将返回值作为新对象返回。</p><p>理解了其运行机制以后，我们知道cat其实就是过程（4）的返回值，因此我们对cat对象的认知就多了一些：</p><ul><li><strong>cat的原型链是：cat-&gt;Animal.prototype-&gt;Object.prototype-&gt;null</strong></li><li>cat上新增了一个属性：name</li></ul><p>分析完了cat的产生过程，我们再看看输出结果：</p><p>cat.name -&gt; 在过程（3）中，obj对象就产生了name属性。因此cat.name就是这里的obj.name</p><p>cat.color -&gt; cat会先查找自身的color，<strong>没有找到便会沿着原型链查找</strong>，在上述例子中，我们仅在Animal对象上定义了color,并没有在其原型链上定义，因此找不到。</p><p>cat.say -&gt; cat会先查找自身的say方法，<strong>没有找到便会沿着原型链查找</strong>，在上述例子中，我们在Animal的prototype上定义了say,因此在原型链上找到了say方法。</p><p>另外，在say方法中还访问this.name，这里的this指的是其调用者obj,因此输出的是obj.name的值。</p><p>对于Animal来说，它本身也是一个对象，因此，它在访问属性和方法时也遵守上述查找规则，所以：</p><p>Animal.color -&gt; “black”</p><p>Animal.name -&gt; “Animal” , Animal先查找自身的name,找到了name, 但这个name不是我们定义的name,而是<code>函数对象内置</code>的属性。</p><p><strong>一般情况下，函数对象在产生时会内置name属性并将函数名作为赋值（仅函数对象）。</strong></p><p>Animal.say -&gt; Animal在自身没有找到say方法，也会沿着其原型链查找，话说Animal的原型链是什么呢？<br><img src="http://images2015.cnblogs.com/blog/849589/201512/849589-20151213195959262-897985059.png" alt=""></p><p>从测试结果看：Animal的原型链是这样的：<br><strong>Animal-&gt;Function.prototype-&gt;Object.prototype-&gt;null</strong><br> 因此Animal的原型链上没有定义say方法！</p><h2 id="4、new存在的意义"><a href="#4、new存在的意义" class="headerlink" title="4、new存在的意义"></a>4、new存在的意义</h2><p>认识了new运算符之后，我们再回到开篇提到的问题：<strong>JS中万物皆对象，为什么还要通过new来产生对象？</strong></p><p>要弄明白这个问题，我们首先要搞清楚cat和Animal的关系：</p><p>通过上面的分析，我们发现cat继承了Animal中的部分属性，因此我们可以简单的理解：<strong>Animal和cat是继承关系。</strong></p><p>另一方面，cat是通过new产生的对象，那么cat到底是不是Animal的实例对象？ 我们先来了解一下JS是如何来定义“实例对象”的？ </p><pre><code>A instanceof B</code></pre><p>如果上述表达式为true,JS认为A是B的实例对象，我们用这个方法来判断一下cat和Animal</p><pre><code>cat instanceof Animal; //true</code></pre><p>从执行结果看：cat确实是Animal实例，要想证实这个结果，我们再来了解一下JS中instanceof的判断规则：</p><pre><code>var L = A.__proto__;var R = B.prototype;if(L === R)return true;</code></pre><p>如果A的<strong>proto</strong> 等价于 B的prototype，就返回true</p><p>在new的执行过程（2）中，cat的<strong>proto</strong>指向了Animal的prototype，所以cat和Animal符合instanceof的判断结果。</p><p>因此，我们认为：<strong>cat 是Animal的实例对象。</strong></p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>在Javascript中, 通过new可以产生原对象的一个实例对象，而这个实例对象继承了原对象的属性和方法。因此，<code>new</code>存在的意义在于<strong>它实现了Javascript中的继承，而不仅仅是实例化了一个对象！</strong></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/contructor-new(1)/">http://jaymo666.github.io/2017/06/24/contructor-new(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS构造函数及new运算符</title>
      <link href="/2017/06/24/contructor-new/"/>
      <content type="html"><![CDATA[<p>JS中的函数即可以是构造函数又可以当作普通函数来调用，当使用new来创建对象时，对应的函数就是构造函数，通过对象来调用时就是普通函数。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><blockquote><p>普通函数的创建有：显式声明、匿名定义、new Function() 等三种方式。</p></blockquote><p>当通过new来创建一个新对象时，JS底层将<code>新对象的原型链</code>指向了<code>构造函数的原型对象</code>，于是就在新对象和函数对象之间建立了一条原型链，通过<strong>新对象可以访问到函数对象原型prototype中的方法和属性</strong>。</p><blockquote><p>和其他高级语言一样 Javascript 中也有构造函数和 new 运算符，我们知道 new 是用来实例化一个类，从而在内存中分配一个实例对象。 但在 Javascript 中，万物皆对象，为什么还要通过 new 来产生对象？ 本文将带你一起来探索 Javascript 中 new 的奥秘…</p></blockquote><h2 id="1、认识new运算符"><a href="#1、认识new运算符" class="headerlink" title="1、认识new运算符"></a>1、认识new运算符</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"> Animal.color = &quot;black&quot;;</span><br><span class="line"> Animal.prototype.say = function()&#123;</span><br><span class="line">console.log(&quot;I&apos;m &quot; + this.name);</span><br><span class="line"> &#125;;</span><br><span class="line"> var cat = new Animal(&quot;cat&quot;);</span><br><span class="line"> </span><br><span class="line"> console.log(</span><br><span class="line">   cat.name,  //cat</span><br><span class="line">   cat.color //undefined</span><br><span class="line"> );</span><br><span class="line"> cat.say(); //I&apos;m cat</span><br><span class="line"> </span><br><span class="line"> console.log(</span><br><span class="line">   Animal.name, //Animal</span><br><span class="line">   Animal.color //back</span><br><span class="line"> );</span><br><span class="line"> Animal.say(); //Animal.say is not a function</span><br></pre></td></tr></table></figure><h2 id="2、代码解读"><a href="#2、代码解读" class="headerlink" title="2、代码解读"></a>2、代码解读</h2><p> 1-3行创建了一个函数Animal,并在其this上定义了属性:name,name的值是函数被执行时的形参。</p><p>  第4行在Animal对象（Animal本身是一个函数对象）上定义了一个静态属性:color,并赋值“black”</p><p>  5-7行在Animal函数的原型对象prototype上定义了一个say()方法，say方法输出了this的name值。</p><p>  第8行通过new关键字创建了一个新对象cat</p><p>  10-14行cat对象尝试访问name和color属性，并调用say方法。</p><p>  16-20行Animal对象尝试访问name和color属性，并调用say方法。</p><h2 id="3、重点解析"><a href="#3、重点解析" class="headerlink" title="3、重点解析"></a>3、重点解析</h2><p> 第8行代码是关键：</p><pre><code>var cat = new Animal(&quot;cat&quot;);</code></pre><p>Animal 本身是一个普通函数，但当通过new来创建对象时，Animal就是构造函数。<br>JS引擎执行这句代码时，在内部做了很多工作，用伪代码模拟其工作流程如下：</p><pre><code>new Animal(&quot;cat&quot;) = {var obj = {};obj.__proto__ = Animal.prototype;var result = Animal.call(obj,&quot;cat&quot;);return typeof result === &apos;object&apos;? result : obj;}</code></pre><p>（1）创建一个空对象obj;</p><p>（2）把obj的<code>__proto__</code>指向构造函数Animal的原型对象<code>prototype</code>，此时便建立了obj对象的原型链：<strong>obj-&gt;Animal.prototype-&gt;Object.prototype-&gt;null</strong></p><p>（3）在obj对象的执行环境调用Animal 函数并传递参数“cat”。 相当于var result = obj.Animal(“cat”)。</p><p>（4）考察第3步返回的返回值，如果无返回值或者返回一个非对象值，则将obj返回作为新对象；否则会将返回值作为新对象返回。</p><p>理解了其运行机制以后，我们知道cat其实就是过程（4）的返回值，因此我们对cat对象的认知就多了一些：</p><ul><li><strong>cat的原型链是：cat-&gt;Animal.prototype-&gt;Object.prototype-&gt;null</strong></li><li>cat上新增了一个属性：name</li></ul><p>分析完了cat的产生过程，我们再看看输出结果：</p><p>cat.name -&gt; 在过程（3）中，obj对象就产生了name属性。因此cat.name就是这里的obj.name</p><p>cat.color -&gt; cat会先查找自身的color，<strong>没有找到便会沿着原型链查找</strong>，在上述例子中，我们仅在Animal对象上定义了color,并没有在其原型链上定义，因此找不到。</p><p>cat.say -&gt; cat会先查找自身的say方法，<strong>没有找到便会沿着原型链查找</strong>，在上述例子中，我们在Animal的prototype上定义了say,因此在原型链上找到了say方法。</p><p>另外，在say方法中还访问this.name，这里的this指的是其调用者obj,因此输出的是obj.name的值。</p><p>对于Animal来说，它本身也是一个对象，因此，它在访问属性和方法时也遵守上述查找规则，所以：</p><p>Animal.color -&gt; “black”</p><p>Animal.name -&gt; “Animal” , Animal先查找自身的name,找到了name, 但这个name不是我们定义的name,而是<code>函数对象内置</code>的属性。</p><p><strong>一般情况下，函数对象在产生时会内置name属性并将函数名作为赋值（仅函数对象）。</strong></p><p>Animal.say -&gt; Animal在自身没有找到say方法，也会沿着其原型链查找，话说Animal的原型链是什么呢？<br><img src="http://images2015.cnblogs.com/blog/849589/201512/849589-20151213195959262-897985059.png" alt=""></p><p>从测试结果看：Animal的原型链是这样的：<br><strong>Animal-&gt;Function.prototype-&gt;Object.prototype-&gt;null</strong><br> 因此Animal的原型链上没有定义say方法！</p><h2 id="4、new存在的意义"><a href="#4、new存在的意义" class="headerlink" title="4、new存在的意义"></a>4、new存在的意义</h2><p>认识了new运算符之后，我们再回到开篇提到的问题：<strong>JS中万物皆对象，为什么还要通过new来产生对象？</strong></p><p>要弄明白这个问题，我们首先要搞清楚cat和Animal的关系：</p><p>通过上面的分析，我们发现cat继承了Animal中的部分属性，因此我们可以简单的理解：<strong>Animal和cat是继承关系。</strong></p><p>另一方面，cat是通过new产生的对象，那么cat到底是不是Animal的实例对象？ 我们先来了解一下JS是如何来定义“实例对象”的？ </p><pre><code>A instanceof B</code></pre><p>如果上述表达式为true,JS认为A是B的实例对象，我们用这个方法来判断一下cat和Animal</p><pre><code>cat instanceof Animal; //true</code></pre><p>从执行结果看：cat确实是Animal实例，要想证实这个结果，我们再来了解一下JS中instanceof的判断规则：</p><pre><code>var L = A.__proto__;var R = B.prototype;if(L === R)return true;</code></pre><p>如果A的<strong>proto</strong> 等价于 B的prototype，就返回true</p><p>在new的执行过程（2）中，cat的<strong>proto</strong>指向了Animal的prototype，所以cat和Animal符合instanceof的判断结果。</p><p>因此，我们认为：<strong>cat 是Animal的实例对象。</strong></p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>在Javascript中, 通过new可以产生原对象的一个实例对象，而这个实例对象继承了原对象的属性和方法。因此，<code>new</code>存在的意义在于<strong>它实现了Javascript中的继承，而不仅仅是实例化了一个对象！</strong></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/contructor-new/">http://jaymo666.github.io/2017/06/24/contructor-new/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解JS执行细节</title>
      <link href="/2017/06/24/Global-object-window/"/>
      <content type="html"><![CDATA[<p>在JS中，当一段JS代码在浏览器中被加载执行，JS引擎会在内存中构建一个全局执行环境，执行环境的作用是保证所有的函数能按照正确的顺序被执行，而window对象则是这个执行环境中的一个全局对象，window对象中内置了很多操作api和对象，document对象就是其中一个<a id="more"></a></p><h1 id="深入理解JS执行细节"><a href="#深入理解JS执行细节" class="headerlink" title="深入理解JS执行细节"></a>深入理解JS执行细节</h1><p>Javascript从定义到执行，<code>JS引擎</code>在实现层做了很多初始化工作，因此在学习JS引擎工作机制之前，我们需要引入几个相关的概念：<strong>执行环境栈</strong>、<strong>全局对象</strong>、<strong>执行环境</strong>、<strong>变量对象</strong>、<strong>活动对象</strong>、<strong>作用域</strong>和<strong>作用域链</strong>等，这些概念正是JS引擎工作的核心组件。这篇文章的目的不是孤立的为你讲解每一个概念，而是通过一个简单的<code>DEMO</code>来展开分析，全局讲解JS引擎从定义到执行的每一个细节，以及这些概念在其中所扮演的角色。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;  //定义一个全局变量 x</span><br><span class="line">function A(y)&#123;</span><br><span class="line">   var x = 2;  //定义一个局部变量 x</span><br><span class="line">   function B(z)&#123; //定义一个内部函数 B</span><br><span class="line">       console.log(x+y+z);</span><br><span class="line">   &#125;</span><br><span class="line">   return B; //返回函数B的引用</span><br><span class="line">&#125;</span><br><span class="line">var C = A(1); //执行A,返回B</span><br><span class="line">C(1); //执行函数B，输出 4</span><br></pre></td></tr></table></figure><p>下面我们将分<strong>全局初始化</strong>、<strong>执行函数A</strong>、<strong>执行函数B</strong> 三个阶段来分析JS引擎的工作机制：</p><h3 id="1、全局初始化"><a href="#1、全局初始化" class="headerlink" title="1、全局初始化"></a>1、全局初始化</h3><p>JS引擎在进入一段可执行的代码时，需要完成以下三个初始化工作：</p><ul><li><p>首先，创建一个<strong>全局对象</strong>(Global Object) ， 这个对象全局只存在一份，它的属性在任何地方都可以访问，<strong>它的存在伴随着应用程序的整个生命周期。全局对象在创建时，将Math,String,Date,document 等常用的JS对象作为其属性</strong>。由于这个全局对象不能通过名字直接访问，因此还有另外一个属性window,并将window指向了自身，这样就可以通过window访问这个全局对象了。用伪代码模拟全局对象的大体结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//创建一个全局对象</span><br><span class="line">var globalObject = &#123;</span><br><span class="line">    Math:&#123;&#125;,</span><br><span class="line">    String:&#123;&#125;,</span><br><span class="line">    Date:&#123;&#125;,</span><br><span class="line">    document:&#123;&#125;, //DOM操作</span><br><span class="line">    ...</span><br><span class="line">    window:this //让window属性指向了自身</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后，JS引擎需要构建一个<strong>执行环境栈</strong>( Execution Context Stack) ，与此同时，也要创建一个<strong>全局执行环境</strong>（Execution Context）EC ，并<strong>将这个全局执行环境EC压入执行环境栈中</strong>。<strong>执行环境栈的作用是为了保证程序能够按照正确的顺序被执行</strong>。在javascript中，每个函数都有自己的执行环境，当执行一个函数时，该函数的执行环境就会被推入执行环境栈的顶部并获取执行权。当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。我们用伪代码来模拟执行环境栈和EC的关系：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [   //执行环境栈</span><br><span class="line">    EC(G) = &#123;   //全局执行环境</span><br><span class="line">        VO(G):&#123; //定义全局变量对象</span><br><span class="line">            ... //包含全局对象原有的属性</span><br><span class="line">            x = 1; //定义变量x</span><br><span class="line">            A = function()&#123;...&#125;; //定义函数A</span><br><span class="line">            A[[scope]] = this; //定义A的scope，并赋值为VO本身</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="2、-执行函数A"><a href="#2、-执行函数A" class="headerlink" title="2、 执行函数A"></a>2、 执行函数A</h3><p>当执行进入A(1) 时，JS引擎需要完成以下工作：</p><p>首先，JS引擎会创建<strong>函数A的执行环境EC</strong>，然后EC推入执行环境栈的顶部并获取执行权。此时执行环境栈中有两个执行环境，分别是<strong>全局执行环境**</strong>和函数A执行环境<strong>，A的执行环境在栈顶，全局执行环境在栈的底部。然后，</strong>创建函数A的作用域链<strong>(Scope Chain) ，在javascript中，每个执行环境都有自己的作用域链，</strong>用于标识符解析<strong>，当执行环境被创建时，</strong>它的作用域链就初始化为当前运行函数的scope所包含的对象。  **</p><p>接着，JS引擎会创建一个<strong>当前函数的活动对象(Activation Object) AO</strong>，这里的活动对象扮演着变量对象的角色，只是在函数中的叫法不同而已（你可以认为变量对象是一个总的概念，而活动对象是它的一个分支）， AO中包含了函数的形参、arguments对象、this对象、以及局部变量和内部函数的定义，<strong>然后AO会被推入作用域链的顶端</strong>。需要注意的是，在定义函数B的时候，JS引擎同样也会为B添加了一个scope属性,并将scope指向了定义函数B时所在的环境，<strong>定义函数B的环境就是A的活动对象AO</strong>， 而AO位于链表的前端，由于链表具有首尾相连的特点，因此<strong>函数B的scope指向了A的整个作用域链</strong>。 我们再看看此时的ECStack结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [   //执行环境栈</span><br><span class="line">    EC(A) = &#123;   //A的执行环境</span><br><span class="line">        [scope]:VO(G), //VO是全局变量对象</span><br><span class="line">        AO(A) : &#123; //创建函数A的活动对象</span><br><span class="line">            y:1,</span><br><span class="line">            x:2,  //定义局部变量x</span><br><span class="line">            B:function()&#123;...&#125;, //定义函数B</span><br><span class="line">            B[[scope]] = this; //this指代AO本身，而AO位于scopeChain的顶端，因此B[[scope]]指向整个作用域链</span><br><span class="line">            arguments:[],//平时我们在函数中访问的arguments就是AO中的arguments</span><br><span class="line">            this:window  //函数中的this指向调用者window对象</span><br><span class="line">        &#125;,</span><br><span class="line">        scopeChain:&lt;AO(A),A[[scope]]&gt;  //链表初始化为A[[scope]],然后再把AO加入该作用域链的顶端,此时A的作用域链：AO(A)-&gt;VO(G)</span><br><span class="line">    &#125;,</span><br><span class="line">    EC(G) = &#123;   //全局执行环境</span><br><span class="line">        VO(G):&#123; //创建全局变量对象</span><br><span class="line">            ... //包含全局对象原有的属性</span><br><span class="line">            x = 1; //定义变量x</span><br><span class="line">            A = function()&#123;...&#125;; //定义函数A</span><br><span class="line">            A[[scope]] = this; //定义A的scope，A[[scope]] == VO(G)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="3、-执行函数B"><a href="#3、-执行函数B" class="headerlink" title="3、 执行函数B"></a>3、 执行函数B</h3><p>函数A被执行以后，返回了B的引用，并赋值给了变量C，<strong>执行 C(1) 就相当于执行B(1)</strong>，JS引擎需要完成以下工作：</p><p>首先，还和上面一样，<strong>创建函数B的执行环境EC</strong>，然后EC推入执行环境栈的顶部并获取执行权。 此时执行环境栈中有两个执行环境，分别是全局执行环境和函数B的执行环境，B的执行环境在栈顶，全局执行环境在栈的底部。（注意：当函数A返回后，A的执行环境就会从栈中被删除，只留下全局执行环境）然后，<strong>创建函数B的作用域链</strong>，并<strong>初始化为函数B的scope所包含的对象</strong>，即包含了A的作用域链。最后，<strong>创建函数B的活动对象AO,</strong>并将B的形参z, arguments对象 和 this对象作为AO的属性。此时ECStack将会变成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [   //执行环境栈</span><br><span class="line">    EC(B) = &#123;   //创建B的执行环境,并处于作用域链的顶端</span><br><span class="line">        [scope]:AO(A), //指向函数A的作用域链,AO(A)-&gt;VO(G)</span><br><span class="line">        var AO(B) = &#123; //创建函数B的活动对象</span><br><span class="line">            z:1,</span><br><span class="line">            arguments:[],</span><br><span class="line">            this:window</span><br><span class="line">        &#125;</span><br><span class="line">        scopeChain:&lt;AO(B),B[[scope]]&gt;  //链表初始化为B[[scope]],再将AO(B)加入链表表头，此时B的作用域链：AO(B)-&gt;AO(A)-VO(G)</span><br><span class="line">    &#125;,</span><br><span class="line">    EC(A), //A的执行环境已经从栈顶被删除,</span><br><span class="line">    EC(G) = &#123;   //全局执行环境</span><br><span class="line">        VO:&#123; //定义全局变量对象</span><br><span class="line">            ... //包含全局对象原有的属性</span><br><span class="line">            x = 1; //定义变量x</span><br><span class="line">            A = function()&#123;...&#125;; //定义函数A</span><br><span class="line">            A[[scope]] = this; //定义A的scope，A[[scope]] == VO(G)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>当函数B执行“x+y+z”时，需要对x、y、z 三个标识符进行一一解析，解析过程<strong>遵守变量查找规则</strong>：先查找自己的活动对象中是否存在该属性，如果存在，则停止查找并返回；如果不存在，继续沿着其作用域链从顶端依次查找，直到找到为止，如果整个作用域链上都未找到该变量，则返回“undefined”。从上面的分析可以看出函数B的作用域链是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AO(B)-&gt;AO(A)-&gt;VO(G)</span><br></pre></td></tr></table></figure></p><p>因此，变量x会在AO(A)中被找到，而不会查找VO(G)中的x，变量y也会在AO(A)中被找到，变量z 在自身的AO(B)中就找到了。所以执行结果：<strong>2+1+1=4</strong> <code>ps:var C = A(1); // 使y=1;C(1); //使z=1</code></p><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>了解了JS引擎的工作机制之后，我们不能只停留在理解概念的层面，而要将其作为基础工具，用以优化和改善我们在实际工作中的代码，提高执行效率，产生实际价值才是我们的真正目的。就拿变量查找机制来说，如果你的代码嵌套很深，<strong>每引用一次全局变量，JS引擎就要查找整个作用域链</strong>，比如处于作用域链的最底端window和document对象就存在这个问题，因此我们围绕这个问题可以做很多性能优化的工作，当然还有其他方面的优化，此处不再赘述，本文仅当作抛砖引玉吧！</p><p>来源：<a href="http://www.cnblogs.com/onepixel/p/5090799.html" target="_blank" rel="noopener">一像素</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/Global-object-window/">http://jaymo666.github.io/2017/06/24/Global-object-window/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JS引擎 </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解JS执行细节</title>
      <link href="/2017/06/24/Global-object-window(1)/"/>
      <content type="html"><![CDATA[<p>在JS中，当一段JS代码在浏览器中被加载执行，JS引擎会在内存中构建一个全局执行环境，执行环境的作用是保证所有的函数能按照正确的顺序被执行，而window对象则是这个执行环境中的一个全局对象，window对象中内置了很多操作api和对象，document对象就是其中一个<a id="more"></a></p><h1 id="深入理解JS执行细节"><a href="#深入理解JS执行细节" class="headerlink" title="深入理解JS执行细节"></a>深入理解JS执行细节</h1><p>Javascript从定义到执行，<code>JS引擎</code>在实现层做了很多初始化工作，因此在学习JS引擎工作机制之前，我们需要引入几个相关的概念：<strong>执行环境栈</strong>、<strong>全局对象</strong>、<strong>执行环境</strong>、<strong>变量对象</strong>、<strong>活动对象</strong>、<strong>作用域</strong>和<strong>作用域链</strong>等，这些概念正是JS引擎工作的核心组件。这篇文章的目的不是孤立的为你讲解每一个概念，而是通过一个简单的<code>DEMO</code>来展开分析，全局讲解JS引擎从定义到执行的每一个细节，以及这些概念在其中所扮演的角色。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;  //定义一个全局变量 x</span><br><span class="line">function A(y)&#123;</span><br><span class="line">   var x = 2;  //定义一个局部变量 x</span><br><span class="line">   function B(z)&#123; //定义一个内部函数 B</span><br><span class="line">       console.log(x+y+z);</span><br><span class="line">   &#125;</span><br><span class="line">   return B; //返回函数B的引用</span><br><span class="line">&#125;</span><br><span class="line">var C = A(1); //执行A,返回B</span><br><span class="line">C(1); //执行函数B，输出 4</span><br></pre></td></tr></table></figure><p>下面我们将分<strong>全局初始化</strong>、<strong>执行函数A</strong>、<strong>执行函数B</strong> 三个阶段来分析JS引擎的工作机制：</p><h3 id="1、全局初始化"><a href="#1、全局初始化" class="headerlink" title="1、全局初始化"></a>1、全局初始化</h3><p>JS引擎在进入一段可执行的代码时，需要完成以下三个初始化工作：</p><ul><li><p>首先，创建一个<strong>全局对象</strong>(Global Object) ， 这个对象全局只存在一份，它的属性在任何地方都可以访问，<strong>它的存在伴随着应用程序的整个生命周期。全局对象在创建时，将Math,String,Date,document 等常用的JS对象作为其属性</strong>。由于这个全局对象不能通过名字直接访问，因此还有另外一个属性window,并将window指向了自身，这样就可以通过window访问这个全局对象了。用伪代码模拟全局对象的大体结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//创建一个全局对象</span><br><span class="line">var globalObject = &#123;</span><br><span class="line">    Math:&#123;&#125;,</span><br><span class="line">    String:&#123;&#125;,</span><br><span class="line">    Date:&#123;&#125;,</span><br><span class="line">    document:&#123;&#125;, //DOM操作</span><br><span class="line">    ...</span><br><span class="line">    window:this //让window属性指向了自身</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后，JS引擎需要构建一个<strong>执行环境栈</strong>( Execution Context Stack) ，与此同时，也要创建一个<strong>全局执行环境</strong>（Execution Context）EC ，并<strong>将这个全局执行环境EC压入执行环境栈中</strong>。<strong>执行环境栈的作用是为了保证程序能够按照正确的顺序被执行</strong>。在javascript中，每个函数都有自己的执行环境，当执行一个函数时，该函数的执行环境就会被推入执行环境栈的顶部并获取执行权。当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。我们用伪代码来模拟执行环境栈和EC的关系：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [   //执行环境栈</span><br><span class="line">    EC(G) = &#123;   //全局执行环境</span><br><span class="line">        VO(G):&#123; //定义全局变量对象</span><br><span class="line">            ... //包含全局对象原有的属性</span><br><span class="line">            x = 1; //定义变量x</span><br><span class="line">            A = function()&#123;...&#125;; //定义函数A</span><br><span class="line">            A[[scope]] = this; //定义A的scope，并赋值为VO本身</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="2、-执行函数A"><a href="#2、-执行函数A" class="headerlink" title="2、 执行函数A"></a>2、 执行函数A</h3><p>当执行进入A(1) 时，JS引擎需要完成以下工作：</p><p>首先，JS引擎会创建<strong>函数A的执行环境EC</strong>，然后EC推入执行环境栈的顶部并获取执行权。此时执行环境栈中有两个执行环境，分别是<strong>全局执行环境**</strong>和函数A执行环境<strong>，A的执行环境在栈顶，全局执行环境在栈的底部。然后，</strong>创建函数A的作用域链<strong>(Scope Chain) ，在javascript中，每个执行环境都有自己的作用域链，</strong>用于标识符解析<strong>，当执行环境被创建时，</strong>它的作用域链就初始化为当前运行函数的scope所包含的对象。  **</p><p>接着，JS引擎会创建一个<strong>当前函数的活动对象(Activation Object) AO</strong>，这里的活动对象扮演着变量对象的角色，只是在函数中的叫法不同而已（你可以认为变量对象是一个总的概念，而活动对象是它的一个分支）， AO中包含了函数的形参、arguments对象、this对象、以及局部变量和内部函数的定义，<strong>然后AO会被推入作用域链的顶端</strong>。需要注意的是，在定义函数B的时候，JS引擎同样也会为B添加了一个scope属性,并将scope指向了定义函数B时所在的环境，<strong>定义函数B的环境就是A的活动对象AO</strong>， 而AO位于链表的前端，由于链表具有首尾相连的特点，因此<strong>函数B的scope指向了A的整个作用域链</strong>。 我们再看看此时的ECStack结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [   //执行环境栈</span><br><span class="line">    EC(A) = &#123;   //A的执行环境</span><br><span class="line">        [scope]:VO(G), //VO是全局变量对象</span><br><span class="line">        AO(A) : &#123; //创建函数A的活动对象</span><br><span class="line">            y:1,</span><br><span class="line">            x:2,  //定义局部变量x</span><br><span class="line">            B:function()&#123;...&#125;, //定义函数B</span><br><span class="line">            B[[scope]] = this; //this指代AO本身，而AO位于scopeChain的顶端，因此B[[scope]]指向整个作用域链</span><br><span class="line">            arguments:[],//平时我们在函数中访问的arguments就是AO中的arguments</span><br><span class="line">            this:window  //函数中的this指向调用者window对象</span><br><span class="line">        &#125;,</span><br><span class="line">        scopeChain:&lt;AO(A),A[[scope]]&gt;  //链表初始化为A[[scope]],然后再把AO加入该作用域链的顶端,此时A的作用域链：AO(A)-&gt;VO(G)</span><br><span class="line">    &#125;,</span><br><span class="line">    EC(G) = &#123;   //全局执行环境</span><br><span class="line">        VO(G):&#123; //创建全局变量对象</span><br><span class="line">            ... //包含全局对象原有的属性</span><br><span class="line">            x = 1; //定义变量x</span><br><span class="line">            A = function()&#123;...&#125;; //定义函数A</span><br><span class="line">            A[[scope]] = this; //定义A的scope，A[[scope]] == VO(G)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="3、-执行函数B"><a href="#3、-执行函数B" class="headerlink" title="3、 执行函数B"></a>3、 执行函数B</h3><p>函数A被执行以后，返回了B的引用，并赋值给了变量C，<strong>执行 C(1) 就相当于执行B(1)</strong>，JS引擎需要完成以下工作：</p><p>首先，还和上面一样，<strong>创建函数B的执行环境EC</strong>，然后EC推入执行环境栈的顶部并获取执行权。 此时执行环境栈中有两个执行环境，分别是全局执行环境和函数B的执行环境，B的执行环境在栈顶，全局执行环境在栈的底部。（注意：当函数A返回后，A的执行环境就会从栈中被删除，只留下全局执行环境）然后，<strong>创建函数B的作用域链</strong>，并<strong>初始化为函数B的scope所包含的对象</strong>，即包含了A的作用域链。最后，<strong>创建函数B的活动对象AO,</strong>并将B的形参z, arguments对象 和 this对象作为AO的属性。此时ECStack将会变成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [   //执行环境栈</span><br><span class="line">    EC(B) = &#123;   //创建B的执行环境,并处于作用域链的顶端</span><br><span class="line">        [scope]:AO(A), //指向函数A的作用域链,AO(A)-&gt;VO(G)</span><br><span class="line">        var AO(B) = &#123; //创建函数B的活动对象</span><br><span class="line">            z:1,</span><br><span class="line">            arguments:[],</span><br><span class="line">            this:window</span><br><span class="line">        &#125;</span><br><span class="line">        scopeChain:&lt;AO(B),B[[scope]]&gt;  //链表初始化为B[[scope]],再将AO(B)加入链表表头，此时B的作用域链：AO(B)-&gt;AO(A)-VO(G)</span><br><span class="line">    &#125;,</span><br><span class="line">    EC(A), //A的执行环境已经从栈顶被删除,</span><br><span class="line">    EC(G) = &#123;   //全局执行环境</span><br><span class="line">        VO:&#123; //定义全局变量对象</span><br><span class="line">            ... //包含全局对象原有的属性</span><br><span class="line">            x = 1; //定义变量x</span><br><span class="line">            A = function()&#123;...&#125;; //定义函数A</span><br><span class="line">            A[[scope]] = this; //定义A的scope，A[[scope]] == VO(G)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>当函数B执行“x+y+z”时，需要对x、y、z 三个标识符进行一一解析，解析过程<strong>遵守变量查找规则</strong>：先查找自己的活动对象中是否存在该属性，如果存在，则停止查找并返回；如果不存在，继续沿着其作用域链从顶端依次查找，直到找到为止，如果整个作用域链上都未找到该变量，则返回“undefined”。从上面的分析可以看出函数B的作用域链是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AO(B)-&gt;AO(A)-&gt;VO(G)</span><br></pre></td></tr></table></figure></p><p>因此，变量x会在AO(A)中被找到，而不会查找VO(G)中的x，变量y也会在AO(A)中被找到，变量z 在自身的AO(B)中就找到了。所以执行结果：<strong>2+1+1=4</strong> <code>ps:var C = A(1); // 使y=1;C(1); //使z=1</code></p><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>了解了JS引擎的工作机制之后，我们不能只停留在理解概念的层面，而要将其作为基础工具，用以优化和改善我们在实际工作中的代码，提高执行效率，产生实际价值才是我们的真正目的。就拿变量查找机制来说，如果你的代码嵌套很深，<strong>每引用一次全局变量，JS引擎就要查找整个作用域链</strong>，比如处于作用域链的最底端window和document对象就存在这个问题，因此我们围绕这个问题可以做很多性能优化的工作，当然还有其他方面的优化，此处不再赘述，本文仅当作抛砖引玉吧！</p><p>来源：<a href="http://www.cnblogs.com/onepixel/p/5090799.html" target="_blank" rel="noopener">一像素</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/Global-object-window(1)/">http://jaymo666.github.io/2017/06/24/Global-object-window(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JS引擎 </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器同源政策及其规避方法</title>
      <link href="/2017/06/24/same-origin-poolicy/"/>
      <content type="html"><![CDATA[<p>浏览器安全的基石是”同源政策”（same-origin policy）。很多开发者都知道这一点，但了解得不全面。<br>本文详细介绍”同源政策”的各个方面，以及如何规避它。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-含义"><a href="#1-1-含义" class="headerlink" title="1.1 含义"></a>1.1 含义</h3><p>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。<br>最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。</p><ul><li>协议相同</li><li>域名相同</li><li>端口相同</li></ul><p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。</p><ul><li><a href="http://www.example.com/dir2/other.html：同源" target="_blank" rel="noopener">http://www.example.com/dir2/other.html：同源</a></li><li><a href="http://example.com/dir/other.html：不同源（域名不同）" target="_blank" rel="noopener">http://example.com/dir/other.html：不同源（域名不同）</a></li><li><a href="http://v2.www.example.com/dir/other.html：不同源（域名不同）" target="_blank" rel="noopener">http://v2.www.example.com/dir/other.html：不同源（域名不同）</a></li><li><a href="http://www.example.com:81/dir/other.html：不同源（端口不同）" target="_blank" rel="noopener">http://www.example.com:81/dir/other.html：不同源（端口不同）</a></li></ul><h3 id="1-2-目的"><a href="#1-2-目的" class="headerlink" title="1.2 目的"></a>1.2 目的</h3><p>同源政策的目的，<strong>是为了保证用户信息的安全，防止恶意的网站窃取数据</strong>。<br>设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？<br>很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。<br>由此可见，”同源政策”是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。</p><h3 id="1-3-限制范围"><a href="#1-3-限制范围" class="headerlink" title="1.3 限制范围"></a>1.3 限制范围</h3><p>随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制。<br>（1） Cookie、LocalStorage 和 IndexDB 无法读取。<br>（2） DOM 无法获得。<br>（3） AJAX 请求不能发送。</p><p>虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响。下面，我将详细介绍，如何规避上面三种限制。</p><h2 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="二、Cookie"></a>二、Cookie</h2><p>Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。但是，<strong>两个网页一级域名相同，只是二级域名不同</strong>，浏览器允许通过设置<code>document.domain</code>共享 Cookie。<br>举例来说，A网页是<code>http://w1.example.com/a.html</code>，B网页是<code>http://w2.example.com/b.html</code>，那么只要设置相同的<code>document.domain</code>，两个网页就可以共享<code>Cookie</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.domain = &apos;example.com&apos;;</span><br></pre></td></tr></table></figure><p>现在，A网页通过脚本设置一个 Cookie。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = &quot;test1=hello&quot;;</span><br></pre></td></tr></table></figure></p><p>B网页就可以读到这个 Cookie。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var allCookie = document.cookie;</span><br></pre></td></tr></table></figure></p><p>注意，这种方法只适用于<code>Cookie</code> 和<code>iframe</code>窗口，<code>LocalStorage</code> 和 <code>IndexDB</code>无法通过这种方法，规避同源政策，而要使用下文介绍的<code>PostMessage API</code>。</p><p>另外，<strong>服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名</strong>，比如.example.com。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: key=value; domain=.example.com; path=/</span><br></pre></td></tr></table></figure></p><p>这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。</p><h2 id="三、iframe"><a href="#三、iframe" class="headerlink" title="三、iframe"></a>三、iframe</h2><p>如果两个网页不同源，就无法拿到对方的DOM。典型的例子是iframe窗口和window.open方法打开的窗口，它们与父窗口无法通信。</p><p>比如，父窗口运行下面的命令，如果iframe窗口不是同源，就会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;myIFrame&quot;).contentWindow.document</span><br><span class="line">// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.</span><br></pre></td></tr></table></figure></p><p>上面命令中，<strong>父窗口想获取子窗口的DOM</strong>，因为跨源导致报错。<br>反之亦然，<strong>子窗口获取主窗口的DOM也会报错</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.parent.document.body</span><br><span class="line">// 报错</span><br></pre></td></tr></table></figure></p><p>如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document.domain属性，就可以规避同源政策，拿到DOM。</p><p><strong>对于完全不同源的网站，目前有三种方法，可以解决跨域窗口的通信问题。</strong></p><ul><li>片段识别符（fragment identifier）</li><li>window.name</li><li>跨文档通信API（Cross-document messaging）</li></ul><h3 id="3-1-片段识别符"><a href="#3-1-片段识别符" class="headerlink" title="3.1 片段识别符"></a>3.1 片段识别符</h3><p><code>片段标识符</code>（fragment identifier）指的是，<strong>URL的#号后面的部分</strong>，比如<code>http://example.com/x.html#fragment的#fragment</code>。<strong>如果只是改变片段标识符，页面不会重新刷新。<br>父窗口可以把信息，写入子窗口的片段标识符。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var src = originURL + &apos;#&apos; + data;</span><br><span class="line">document.getElementById(&apos;myIFrame&apos;).src = src;</span><br></pre></td></tr></table></figure><p>子窗口通过监听hashchange事件得到通知。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window.onhashchange = checkMessage;</span><br><span class="line"></span><br><span class="line">function checkMessage() &#123;</span><br><span class="line">  var message = window.location.hash;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样的，子窗口也可以改变父窗口的片段标识符。<br><code>parent.location.href= target + &quot;#&quot; + hash;</code></p><h3 id="3-2-window-name"><a href="#3-2-window-name" class="headerlink" title="3.2 window.name"></a>3.2 window.name</h3><p>浏览器窗口有<code>window.name</code>属性。<strong>这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。</strong><br>父窗口先打开一个子窗口，载入一个不同源的网页，该网页将信息写入window.name属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.name = data;</span><br></pre></td></tr></table></figure></p><p>接着，子窗口跳回一个与主窗口同域的网址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location = &apos;http://parent.url.com/xxx.html&apos;;</span><br></pre></td></tr></table></figure></p><p>然后，主窗口就可以读取子窗口的window.name了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var data = document.getElementById(&apos;myFrame&apos;).contentWindow.name;</span><br></pre></td></tr></table></figure></p><p>这种方法的<strong>优点</strong>是，<code>window.name</code><strong>容量很大</strong>，可以放置非常长的字符串；<strong>缺点</strong>是<strong>必须监听子窗口window.name属性的变化，影响网页性能。</strong></p><h3 id="3-3-window-postMessage"><a href="#3-3-window-postMessage" class="headerlink" title="3.3 window.postMessage"></a>3.3 window.postMessage</h3><p>上面两种方法都属于破解，HTML5为了解决这个问题，引入了一个全新的<strong>API</strong>：跨文档通信 API（Cross-document messaging）。<br>这个API为window对象新增了一个<code>window.postMessage</code>方法，<strong>允许跨窗口通信</strong>，不论这两个窗口是否同源。<br>举例来说，父窗口<a href="http://aaa.com向子窗口http://bbb.com发消息，调用postMessage方法就可以了。" target="_blank" rel="noopener">http://aaa.com向子窗口http://bbb.com发消息，调用postMessage方法就可以了。</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var popup = window.open(&apos;http://bbb.com&apos;, &apos;title&apos;);</span><br><span class="line">popup.postMessage(&apos;Hello World!&apos;, &apos;http://bbb.com&apos;);</span><br></pre></td></tr></table></figure></p><p><code>postMessage</code>方法的第一个参数是<strong>具体的信息内容</strong>，第二个参数是<strong>接收消息的窗口的源</strong>（origin），即”协议 + 域名 + 端口”。也可以设为*，表示不限制域名，向所有窗口发送。<br>子窗口向父窗口发送消息的写法类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.opener.postMessage(&apos;Nice to see you&apos;, &apos;http://aaa.com&apos;);</span><br></pre></td></tr></table></figure><p>父窗口和子窗口都可以通过<code>message</code>事件，监听对方的消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;message&apos;, function(e) &#123;</span><br><span class="line">  console.log(e.data);</span><br><span class="line">&#125;,false);</span><br></pre></td></tr></table></figure></p><p>message事件的事件对象event，提供以下三个属性。</p><ul><li>event.source：发送消息的窗口</li><li>event.origin: 消息发向的网址</li><li>event.data: 消息内容</li></ul><p>下面的例子是，子窗口通过<code>event.source</code>属性引用父窗口，然后发送消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;message&apos;, receiveMessage);</span><br><span class="line">function receiveMessage(event) &#123;</span><br><span class="line">  event.source.postMessage(&apos;Nice to see you!&apos;, &apos;*&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>event.origin</code>属性可以过滤不是发给本窗口的消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;message&apos;, receiveMessage);</span><br><span class="line">function receiveMessage(event) &#123;</span><br><span class="line">  if (event.origin !== &apos;http://aaa.com&apos;) return;</span><br><span class="line">  if (event.data === &apos;Hello World&apos;) &#123;</span><br><span class="line">      event.source.postMessage(&apos;Hello&apos;, event.origin);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(event.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-4-LocalStorage"><a href="#3-4-LocalStorage" class="headerlink" title="3.4 LocalStorage"></a>3.4 LocalStorage</h3><p>通过<code>window.postMessage</code>，读写其他窗口的 <code>LocalStorage</code>也成为了可能。<br>下面是一个例子，主窗口写入iframe子窗口的localStorage。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">window.onmessage = function(e) &#123;</span><br><span class="line">  if (e.origin !== &apos;http://bbb.com&apos;) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  var payload = JSON.parse(e.data);</span><br><span class="line">  localStorage.setItem(payload.key, JSON.stringify(payload.data));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面代码中，子窗口将父窗口发来的消息，写入自己的LocalStorage。<br>父窗口发送消息的代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var win = document.getElementsByTagName(&apos;iframe&apos;)[0].contentWindow;</span><br><span class="line">var obj = &#123; name: &apos;Jack&apos; &#125;;</span><br><span class="line">win.postMessage(JSON.stringify(&#123;key: &apos;storage&apos;, data: obj&#125;), &apos;http://bbb.com&apos;);</span><br></pre></td></tr></table></figure></p><p>加强版的子窗口接收消息的代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">window.onmessage = function(e) &#123;</span><br><span class="line">  if (e.origin !== &apos;http://bbb.com&apos;) return;</span><br><span class="line">  var payload = JSON.parse(e.data);</span><br><span class="line">  switch (payload.method) &#123;</span><br><span class="line">    case &apos;set&apos;:</span><br><span class="line">      localStorage.setItem(payload.key, JSON.stringify(payload.data));</span><br><span class="line">      break;</span><br><span class="line">    case &apos;get&apos;:</span><br><span class="line">      var parent = window.parent;</span><br><span class="line">      var data = localStorage.getItem(payload.key);</span><br><span class="line">      parent.postMessage(data, &apos;http://aaa.com&apos;);</span><br><span class="line">      break;</span><br><span class="line">    case &apos;remove&apos;:</span><br><span class="line">      localStorage.removeItem(payload.key);</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>加强版的父窗口发送消息代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var win = document.getElementsByTagName(&apos;iframe&apos;)[0].contentWindow;</span><br><span class="line">var obj = &#123; name: &apos;Jack&apos; &#125;;</span><br><span class="line">// 存入对象</span><br><span class="line">win.postMessage(JSON.stringify(&#123;key: &apos;storage&apos;, method: &apos;set&apos;, data: obj&#125;), &apos;http://bbb.com&apos;);</span><br><span class="line">// 读取对象</span><br><span class="line">win.postMessage(JSON.stringify(&#123;key: &apos;storage&apos;, method: &quot;get&quot;&#125;), &quot;*&quot;);</span><br><span class="line">window.onmessage = function(e) &#123;</span><br><span class="line">  if (e.origin != &apos;http://aaa.com&apos;) return;</span><br><span class="line">  // &quot;Jack&quot;</span><br><span class="line">  console.log(JSON.parse(e.data).name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="四、AJAX"><a href="#四、AJAX" class="headerlink" title="四、AJAX"></a>四、AJAX</h2><p>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。<br>除了<strong>架设服务器代理</strong>（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。</p><ul><li>JSONP</li><li>WebSocket</li><li>CORS</li></ul><h3 id="4-1-JSONP"><a href="#4-1-JSONP" class="headerlink" title="4.1 JSONP"></a>4.1 JSONP</h3><p>JSONP是服务器与客户端跨源通信的常用方法。<strong>最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。</strong><br>它的基本思想是，网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，<strong>将数据放在一个指定名字的回调函数里传回来</strong>。</p><p>首先，网页动态插入<code>&lt;script&gt;</code>元素，由它向跨源网址发出请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function addScriptTag(src) &#123;</span><br><span class="line">  var script = document.createElement(&apos;script&apos;);</span><br><span class="line">  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);</span><br><span class="line">  script.src = src;</span><br><span class="line">  document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">  addScriptTag(&apos;http://example.com/ip?callback=foo&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function foo(data) &#123;</span><br><span class="line">  console.log(&apos;Your public IP address is: &apos; + data.ip);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面代码通过动态添加<code>&lt;script&gt;</code>元素，向服务器example.com发出请求。注意，该请求的查询字符串有一个<code>callback</code>参数，<strong>用来指定回调函数的名字</strong>，这对于JSONP是<strong>必需的</strong>。<br><strong>服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo(&#123;</span><br><span class="line">  &quot;ip&quot;: &quot;8.8.8.8&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于<code>&lt;script&gt;</code>元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了<code>foo</code>函数，该函数就会立即调用。<strong>作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用JSON.parse的步骤。</strong></p><h3 id="4-2-WebSocket"><a href="#4-2-WebSocket" class="headerlink" title="4.2 WebSocket"></a>4.2 WebSocket</h3><p><strong>WebSocket是一种通信协议</strong>，使用<code>ws://</code>（非加密）和<code>wss:</code>//（加密）作为协议前缀。<strong>该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</strong><br>下面是一个例子，浏览器发出的WebSocket请求的头信息（摘自维基百科）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /chat HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Origin: http://example.com</span><br></pre></td></tr></table></figure></p><p>上面代码中，有一个字段是<code>Origin</code>，表示该请求的请求源（origin），即发自哪个域名。<br><strong>正是因为有了Origin这个字段，所以WebSocket才没有实行同源政策。</strong>因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure></p><h3 id="4-3-CORS"><a href="#4-3-CORS" class="headerlink" title="4.3 CORS"></a>4.3 CORS</h3><p>CORS是跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。相比JSONP只能发GET请求，CORS允许任何类型的请求。</p><p>详细CORS介绍的文章:<a href="http://jaymo666.github.io/2017/06/24/ajax-1/">如何通过CORS完成跨源AJAX请求</a></p><p>来源：<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">阮一峰</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/same-origin-poolicy/">http://jaymo666.github.io/2017/06/24/same-origin-poolicy/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Jsonp </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器同源政策及其规避方法</title>
      <link href="/2017/06/24/same-origin-poolicy(1)/"/>
      <content type="html"><![CDATA[<p>浏览器安全的基石是”同源政策”（same-origin policy）。很多开发者都知道这一点，但了解得不全面。<br>本文详细介绍”同源政策”的各个方面，以及如何规避它。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=0&height=66"></iframe><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-含义"><a href="#1-1-含义" class="headerlink" title="1.1 含义"></a>1.1 含义</h3><p>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。<br>最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。</p><ul><li>协议相同</li><li>域名相同</li><li>端口相同</li></ul><p>举例来说，<code>http://www.example.com/dir/page.html</code>这个网址，协议是<code>http://</code>，域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。</p><ul><li><a href="http://www.example.com/dir2/other.html：同源" target="_blank" rel="noopener">http://www.example.com/dir2/other.html：同源</a></li><li><a href="http://example.com/dir/other.html：不同源（域名不同）" target="_blank" rel="noopener">http://example.com/dir/other.html：不同源（域名不同）</a></li><li><a href="http://v2.www.example.com/dir/other.html：不同源（域名不同）" target="_blank" rel="noopener">http://v2.www.example.com/dir/other.html：不同源（域名不同）</a></li><li><a href="http://www.example.com:81/dir/other.html：不同源（端口不同）" target="_blank" rel="noopener">http://www.example.com:81/dir/other.html：不同源（端口不同）</a></li></ul><h3 id="1-2-目的"><a href="#1-2-目的" class="headerlink" title="1.2 目的"></a>1.2 目的</h3><p>同源政策的目的，<strong>是为了保证用户信息的安全，防止恶意的网站窃取数据</strong>。<br>设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？<br>很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。<br>由此可见，”同源政策”是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。</p><h3 id="1-3-限制范围"><a href="#1-3-限制范围" class="headerlink" title="1.3 限制范围"></a>1.3 限制范围</h3><p>随着互联网的发展，”同源政策”越来越严格。目前，如果非同源，共有三种行为受到限制。<br>（1） Cookie、LocalStorage 和 IndexDB 无法读取。<br>（2） DOM 无法获得。<br>（3） AJAX 请求不能发送。</p><p>虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响。下面，我将详细介绍，如何规避上面三种限制。</p><h2 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="二、Cookie"></a>二、Cookie</h2><p>Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。但是，<strong>两个网页一级域名相同，只是二级域名不同</strong>，浏览器允许通过设置<code>document.domain</code>共享 Cookie。<br>举例来说，A网页是<code>http://w1.example.com/a.html</code>，B网页是<code>http://w2.example.com/b.html</code>，那么只要设置相同的<code>document.domain</code>，两个网页就可以共享<code>Cookie</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.domain = &apos;example.com&apos;;</span><br></pre></td></tr></table></figure><p>现在，A网页通过脚本设置一个 Cookie。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = &quot;test1=hello&quot;;</span><br></pre></td></tr></table></figure></p><p>B网页就可以读到这个 Cookie。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var allCookie = document.cookie;</span><br></pre></td></tr></table></figure></p><p>注意，这种方法只适用于<code>Cookie</code> 和<code>iframe</code>窗口，<code>LocalStorage</code> 和 <code>IndexDB</code>无法通过这种方法，规避同源政策，而要使用下文介绍的<code>PostMessage API</code>。</p><p>另外，<strong>服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名</strong>，比如.example.com。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: key=value; domain=.example.com; path=/</span><br></pre></td></tr></table></figure></p><p>这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie。</p><h2 id="三、iframe"><a href="#三、iframe" class="headerlink" title="三、iframe"></a>三、iframe</h2><p>如果两个网页不同源，就无法拿到对方的DOM。典型的例子是iframe窗口和window.open方法打开的窗口，它们与父窗口无法通信。</p><p>比如，父窗口运行下面的命令，如果iframe窗口不是同源，就会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;myIFrame&quot;).contentWindow.document</span><br><span class="line">// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.</span><br></pre></td></tr></table></figure></p><p>上面命令中，<strong>父窗口想获取子窗口的DOM</strong>，因为跨源导致报错。<br>反之亦然，<strong>子窗口获取主窗口的DOM也会报错</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.parent.document.body</span><br><span class="line">// 报错</span><br></pre></td></tr></table></figure></p><p>如果两个窗口一级域名相同，只是二级域名不同，那么设置上一节介绍的document.domain属性，就可以规避同源政策，拿到DOM。</p><p><strong>对于完全不同源的网站，目前有三种方法，可以解决跨域窗口的通信问题。</strong></p><ul><li>片段识别符（fragment identifier）</li><li>window.name</li><li>跨文档通信API（Cross-document messaging）</li></ul><h3 id="3-1-片段识别符"><a href="#3-1-片段识别符" class="headerlink" title="3.1 片段识别符"></a>3.1 片段识别符</h3><p><code>片段标识符</code>（fragment identifier）指的是，<strong>URL的#号后面的部分</strong>，比如<code>http://example.com/x.html#fragment的#fragment</code>。<strong>如果只是改变片段标识符，页面不会重新刷新。<br>父窗口可以把信息，写入子窗口的片段标识符。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var src = originURL + &apos;#&apos; + data;</span><br><span class="line">document.getElementById(&apos;myIFrame&apos;).src = src;</span><br></pre></td></tr></table></figure><p>子窗口通过监听hashchange事件得到通知。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window.onhashchange = checkMessage;</span><br><span class="line"></span><br><span class="line">function checkMessage() &#123;</span><br><span class="line">  var message = window.location.hash;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样的，子窗口也可以改变父窗口的片段标识符。<br><code>parent.location.href= target + &quot;#&quot; + hash;</code></p><h3 id="3-2-window-name"><a href="#3-2-window-name" class="headerlink" title="3.2 window.name"></a>3.2 window.name</h3><p>浏览器窗口有<code>window.name</code>属性。<strong>这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。</strong><br>父窗口先打开一个子窗口，载入一个不同源的网页，该网页将信息写入window.name属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.name = data;</span><br></pre></td></tr></table></figure></p><p>接着，子窗口跳回一个与主窗口同域的网址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location = &apos;http://parent.url.com/xxx.html&apos;;</span><br></pre></td></tr></table></figure></p><p>然后，主窗口就可以读取子窗口的window.name了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var data = document.getElementById(&apos;myFrame&apos;).contentWindow.name;</span><br></pre></td></tr></table></figure></p><p>这种方法的<strong>优点</strong>是，<code>window.name</code><strong>容量很大</strong>，可以放置非常长的字符串；<strong>缺点</strong>是<strong>必须监听子窗口window.name属性的变化，影响网页性能。</strong></p><h3 id="3-3-window-postMessage"><a href="#3-3-window-postMessage" class="headerlink" title="3.3 window.postMessage"></a>3.3 window.postMessage</h3><p>上面两种方法都属于破解，HTML5为了解决这个问题，引入了一个全新的<strong>API</strong>：跨文档通信 API（Cross-document messaging）。<br>这个API为window对象新增了一个<code>window.postMessage</code>方法，<strong>允许跨窗口通信</strong>，不论这两个窗口是否同源。<br>举例来说，父窗口<a href="http://aaa.com向子窗口http://bbb.com发消息，调用postMessage方法就可以了。" target="_blank" rel="noopener">http://aaa.com向子窗口http://bbb.com发消息，调用postMessage方法就可以了。</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var popup = window.open(&apos;http://bbb.com&apos;, &apos;title&apos;);</span><br><span class="line">popup.postMessage(&apos;Hello World!&apos;, &apos;http://bbb.com&apos;);</span><br></pre></td></tr></table></figure></p><p><code>postMessage</code>方法的第一个参数是<strong>具体的信息内容</strong>，第二个参数是<strong>接收消息的窗口的源</strong>（origin），即”协议 + 域名 + 端口”。也可以设为*，表示不限制域名，向所有窗口发送。<br>子窗口向父窗口发送消息的写法类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.opener.postMessage(&apos;Nice to see you&apos;, &apos;http://aaa.com&apos;);</span><br></pre></td></tr></table></figure><p>父窗口和子窗口都可以通过<code>message</code>事件，监听对方的消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;message&apos;, function(e) &#123;</span><br><span class="line">  console.log(e.data);</span><br><span class="line">&#125;,false);</span><br></pre></td></tr></table></figure></p><p>message事件的事件对象event，提供以下三个属性。</p><ul><li>event.source：发送消息的窗口</li><li>event.origin: 消息发向的网址</li><li>event.data: 消息内容</li></ul><p>下面的例子是，子窗口通过<code>event.source</code>属性引用父窗口，然后发送消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;message&apos;, receiveMessage);</span><br><span class="line">function receiveMessage(event) &#123;</span><br><span class="line">  event.source.postMessage(&apos;Nice to see you!&apos;, &apos;*&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>event.origin</code>属性可以过滤不是发给本窗口的消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&apos;message&apos;, receiveMessage);</span><br><span class="line">function receiveMessage(event) &#123;</span><br><span class="line">  if (event.origin !== &apos;http://aaa.com&apos;) return;</span><br><span class="line">  if (event.data === &apos;Hello World&apos;) &#123;</span><br><span class="line">      event.source.postMessage(&apos;Hello&apos;, event.origin);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(event.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-4-LocalStorage"><a href="#3-4-LocalStorage" class="headerlink" title="3.4 LocalStorage"></a>3.4 LocalStorage</h3><p>通过<code>window.postMessage</code>，读写其他窗口的 <code>LocalStorage</code>也成为了可能。<br>下面是一个例子，主窗口写入iframe子窗口的localStorage。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">window.onmessage = function(e) &#123;</span><br><span class="line">  if (e.origin !== &apos;http://bbb.com&apos;) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  var payload = JSON.parse(e.data);</span><br><span class="line">  localStorage.setItem(payload.key, JSON.stringify(payload.data));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面代码中，子窗口将父窗口发来的消息，写入自己的LocalStorage。<br>父窗口发送消息的代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var win = document.getElementsByTagName(&apos;iframe&apos;)[0].contentWindow;</span><br><span class="line">var obj = &#123; name: &apos;Jack&apos; &#125;;</span><br><span class="line">win.postMessage(JSON.stringify(&#123;key: &apos;storage&apos;, data: obj&#125;), &apos;http://bbb.com&apos;);</span><br></pre></td></tr></table></figure></p><p>加强版的子窗口接收消息的代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">window.onmessage = function(e) &#123;</span><br><span class="line">  if (e.origin !== &apos;http://bbb.com&apos;) return;</span><br><span class="line">  var payload = JSON.parse(e.data);</span><br><span class="line">  switch (payload.method) &#123;</span><br><span class="line">    case &apos;set&apos;:</span><br><span class="line">      localStorage.setItem(payload.key, JSON.stringify(payload.data));</span><br><span class="line">      break;</span><br><span class="line">    case &apos;get&apos;:</span><br><span class="line">      var parent = window.parent;</span><br><span class="line">      var data = localStorage.getItem(payload.key);</span><br><span class="line">      parent.postMessage(data, &apos;http://aaa.com&apos;);</span><br><span class="line">      break;</span><br><span class="line">    case &apos;remove&apos;:</span><br><span class="line">      localStorage.removeItem(payload.key);</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>加强版的父窗口发送消息代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var win = document.getElementsByTagName(&apos;iframe&apos;)[0].contentWindow;</span><br><span class="line">var obj = &#123; name: &apos;Jack&apos; &#125;;</span><br><span class="line">// 存入对象</span><br><span class="line">win.postMessage(JSON.stringify(&#123;key: &apos;storage&apos;, method: &apos;set&apos;, data: obj&#125;), &apos;http://bbb.com&apos;);</span><br><span class="line">// 读取对象</span><br><span class="line">win.postMessage(JSON.stringify(&#123;key: &apos;storage&apos;, method: &quot;get&quot;&#125;), &quot;*&quot;);</span><br><span class="line">window.onmessage = function(e) &#123;</span><br><span class="line">  if (e.origin != &apos;http://aaa.com&apos;) return;</span><br><span class="line">  // &quot;Jack&quot;</span><br><span class="line">  console.log(JSON.parse(e.data).name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="四、AJAX"><a href="#四、AJAX" class="headerlink" title="四、AJAX"></a>四、AJAX</h2><p>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。<br>除了<strong>架设服务器代理</strong>（浏览器请求同源服务器，再由后者请求外部服务），有三种方法规避这个限制。</p><ul><li>JSONP</li><li>WebSocket</li><li>CORS</li></ul><h3 id="4-1-JSONP"><a href="#4-1-JSONP" class="headerlink" title="4.1 JSONP"></a>4.1 JSONP</h3><p>JSONP是服务器与客户端跨源通信的常用方法。<strong>最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。</strong><br>它的基本思想是，网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，<strong>将数据放在一个指定名字的回调函数里传回来</strong>。</p><p>首先，网页动态插入<code>&lt;script&gt;</code>元素，由它向跨源网址发出请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function addScriptTag(src) &#123;</span><br><span class="line">  var script = document.createElement(&apos;script&apos;);</span><br><span class="line">  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);</span><br><span class="line">  script.src = src;</span><br><span class="line">  document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">  addScriptTag(&apos;http://example.com/ip?callback=foo&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function foo(data) &#123;</span><br><span class="line">  console.log(&apos;Your public IP address is: &apos; + data.ip);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面代码通过动态添加<code>&lt;script&gt;</code>元素，向服务器example.com发出请求。注意，该请求的查询字符串有一个<code>callback</code>参数，<strong>用来指定回调函数的名字</strong>，这对于JSONP是<strong>必需的</strong>。<br><strong>服务器收到这个请求以后，会将数据放在回调函数的参数位置返回。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo(&#123;</span><br><span class="line">  &quot;ip&quot;: &quot;8.8.8.8&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于<code>&lt;script&gt;</code>元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了<code>foo</code>函数，该函数就会立即调用。<strong>作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用JSON.parse的步骤。</strong></p><h3 id="4-2-WebSocket"><a href="#4-2-WebSocket" class="headerlink" title="4.2 WebSocket"></a>4.2 WebSocket</h3><p><strong>WebSocket是一种通信协议</strong>，使用<code>ws://</code>（非加密）和<code>wss:</code>//（加密）作为协议前缀。<strong>该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</strong><br>下面是一个例子，浏览器发出的WebSocket请求的头信息（摘自维基百科）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /chat HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Origin: http://example.com</span><br></pre></td></tr></table></figure></p><p>上面代码中，有一个字段是<code>Origin</code>，表示该请求的请求源（origin），即发自哪个域名。<br><strong>正是因为有了Origin这个字段，所以WebSocket才没有实行同源政策。</strong>因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出如下回应。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure></p><h3 id="4-3-CORS"><a href="#4-3-CORS" class="headerlink" title="4.3 CORS"></a>4.3 CORS</h3><p>CORS是跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。相比JSONP只能发GET请求，CORS允许任何类型的请求。</p><p>详细CORS介绍的文章:<a href="http://jaymo666.github.io/2017/06/24/ajax-1/">如何通过CORS完成跨源AJAX请求</a></p><p>来源：<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">阮一峰</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/same-origin-poolicy(1)/">http://jaymo666.github.io/2017/06/24/same-origin-poolicy(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Jsonp </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>跨域资源共享 CORS 详解</title>
      <link href="/2017/06/24/ajax-1/"/>
      <content type="html"><![CDATA[<p>Ajax是浏览器专门用来和服务器进行交互的异步通讯技术，其核心对象是XMLHttpRequest,通过该对象可以创建一个Ajax请求。<a id="more"></a></p><blockquote><p>为了防止<code>XSS</code>攻击，浏览器对Ajax做了限制，不允许Ajax<code>跨域请求</code>服务器,就是只能访问当前域名下的url。</p></blockquote><p>当然，如果确信你的站点不存在跨域的风险，可以<strong>在服务端主动开启跨域请求</strong>。 也可以直接通过<code>CORS</code>或<code>JSONP</code>来实现。</p><ul><li><p><strong>JSONP是利用脚本(script)跨域能力来模拟Ajax请求。 </strong>    </p></li><li><p>CORS是一个<code>W3C</code>标准，全称是”<strong>跨域资源共享</strong>“（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p></li></ul><h1 id="本文详细介绍CORS的内部机制。"><a href="#本文详细介绍CORS的内部机制。" class="headerlink" title="本文详细介绍CORS的内部机制。"></a>本文详细介绍CORS的内部机制。</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>CORS需要<strong>浏览器</strong>和<strong>服务器</strong>同时支持。目前，所有浏览器都支持该功能，<strong>IE浏览器不能低于IE10。</strong><br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。<strong>对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。</strong>浏览器一旦发现AJAX请求跨源，就会<strong>自动添加</strong>一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>因此，<strong>实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><h2 id="二、两种请求"><a href="#二、两种请求" class="headerlink" title="二、两种请求"></a>二、两种请求</h2><p>浏览器将CORS请求分成两类：<strong>简单请求</strong>（simple request）和<strong>非简单请求</strong>（not-so-simple request）。<br>只要同时满足以下两大条件，就属于简单请求。<br>（1) 请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul><p>（2）HTTP的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><p>凡是不同时满足上面两个条件，就属于非简单请求。<br>浏览器对这两种请求的处理，是不一样的。</p><h2 id="三、简单请求"><a href="#三、简单请求" class="headerlink" title="三、简单请求"></a>三、简单请求</h2><h3 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h3><p>对于简单请求，浏览器直接发出<code>CORS</code>请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段。<br>下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个<code>Origin</code>字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure></p><p>上面的头信息中，<code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。<br>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的<code>onerror</code>回调函数捕获。注意，<strong>这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</strong></p><p><strong>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure></p><p>上面的头信息之中，有三个与CORS请求相关的字段，都以<code>Access-Control-</code>开头。</p><p><strong>（1）Access-Control-Allow-Origin</strong><br>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><p><strong>（2）Access-Control-Allow-Credentials</strong><br>该字段可选。它的值是一个布尔值，<strong>表示是否允许发送Cookie</strong>。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><p><strong>（3）Access-Control-Expose-Headers</strong><br>该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。<strong>如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</strong>上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</p><h3 id="3-2-withCredentials-属性"><a href="#3-2-withCredentials-属性" class="headerlink" title="3.2 withCredentials 属性"></a>3.2 withCredentials 属性</h3><p>上面说到，CORS请求默认不发送<code>Cookie</code>和<code>HTTP认证信息</code>。</p><p>如果要把Cookie发到服务器，<strong>一方面要服务器同意</strong>，指定Access-Control-Allow-Credentials字段。<br><code>Access-Control-Allow-Credentials: true</code></p><p><strong>另一方面，开发者必须在AJAX请求中打开withCredentials属性。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = true;</span><br></pre></td></tr></table></figure></p><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。<br>但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。</p><p><code>xhr.withCredentials = false;</code></p><p>需要注意的是，<strong>如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。</strong>同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p><h2 id="四、非简单请求"><a href="#四、非简单请求" class="headerlink" title="四、非简单请求"></a>四、非简单请求</h2><h3 id="4-1-预检请求"><a href="#4-1-预检请求" class="headerlink" title="4.1 预检请求"></a>4.1 预检请求</h3><p><strong>非简单请求是那种对服务器有特殊要求的请求</strong>，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</p><p>非简单请求的CORS请求，<strong>会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</strong><br><strong>浏览器先询问服务器</strong>，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。<strong>只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</strong><br>下面是一段浏览器的JavaScript脚本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var url = &apos;http://api.alice.com/cors&apos;;</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;PUT&apos;, url, true);</span><br><span class="line">xhr.setRequestHeader(&apos;X-Custom-Header&apos;, &apos;value&apos;);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p><p>上面代码中，HTTP请求的方法是<code>PUT</code>，并且发送一个<strong>自定义头信息</strong><code>X-Custom-Header</code>。<br>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”<strong>预检</strong>“请求的HTTP头信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure></p><p>“预检”请求用的请求方法是<code>OPTIONS</code>，<strong>表示这个请求是用来询问的</strong>。头信息里面，关键字段是Origin，表示请求来自哪个源。</p><p>除了Origin字段，”<strong>预检”请求的头信息包括两个特殊字段。</strong></p><p>（1）<strong>Access-Control-Request-Method</strong><br>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。<br>（2）<strong>Access-Control-Request-Headers</strong><br>该字段是一个逗号分隔的字符串，<strong>指定浏览器CORS请求会额外发送的头信息字段</strong>，上例是X-Custom-Header。</p><h3 id="4-2-预检请求的回应"><a href="#4-2-预检请求的回应" class="headerlink" title="4.2 预检请求的回应"></a>4.2 预检请求的回应</h3><p>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure></p><p>上面的HTTP回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为<strong>星号</strong>，表示<strong>同意任意跨源请求</strong>。</p><p><code>Access-Control-Allow-Origin: *</code><br><strong>如果浏览器否定了”预检”请求</strong>，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。<strong>这时，浏览器就会认定，服务器不同意预检请求</strong>，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class="line">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure></p><p>服务器回应的其他CORS相关字段如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure></p><p>（1）<strong>Access-Control-Allow-Methods</strong><br>该字段必需，它的值是<code>逗号分隔的一个字符串</code>，<strong>表明服务器支持的所有跨域请求的方法。</strong>注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><p>（2）<strong>Access-Control-Allow-Headers</strong><br>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><p>（3）<strong>Access-Control-Allow-Credentials</strong><br>该字段与简单请求时的含义相同。</p><p>（4）<strong>Access-Control-Max-Age</strong><br>该字段可选，<strong>用来指定本次预检请求的有效期</strong>，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><h3 id="4-3-浏览器的正常请求和回应"><a href="#4-3-浏览器的正常请求和回应" class="headerlink" title="4.3 浏览器的正常请求和回应"></a>4.3 浏览器的正常请求和回应</h3><p><strong>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。</strong>服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。<br>下面是”预检”请求之后，浏览器的正常CORS请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">X-Custom-Header: value</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure></p><p>上面头信息的<code>Origin</code>字段是<strong>浏览器自动添加的</strong>。</p><p><strong>下面是服务器正常的回应。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure></p><p>上面头信息中，<strong>Access-Control-Allow-Origin字段是每次回应都必定包含的。</strong></p><h2 id="五、与JSONP的比较"><a href="#五、与JSONP的比较" class="headerlink" title="五、与JSONP的比较"></a>五、与JSONP的比较</h2><ul><li>CORS与JSONP的使用目的相同，但是比JSONP更强大。</li><li>JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li></ul><p>来源：<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">阮一峰</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/ajax-1/">http://jaymo666.github.io/2017/06/24/ajax-1/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> JS </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>跨域资源共享 CORS 详解</title>
      <link href="/2017/06/24/ajax-1(1)/"/>
      <content type="html"><![CDATA[<p>Ajax是浏览器专门用来和服务器进行交互的异步通讯技术，其核心对象是XMLHttpRequest,通过该对象可以创建一个Ajax请求。<a id="more"></a></p><blockquote><p>为了防止<code>XSS</code>攻击，浏览器对Ajax做了限制，不允许Ajax<code>跨域请求</code>服务器,就是只能访问当前域名下的url。</p></blockquote><p>当然，如果确信你的站点不存在跨域的风险，可以<strong>在服务端主动开启跨域请求</strong>。 也可以直接通过<code>CORS</code>或<code>JSONP</code>来实现。</p><ul><li><p><strong>JSONP是利用脚本(script)跨域能力来模拟Ajax请求。 </strong>    </p></li><li><p>CORS是一个<code>W3C</code>标准，全称是”<strong>跨域资源共享</strong>“（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p></li></ul><h1 id="本文详细介绍CORS的内部机制。"><a href="#本文详细介绍CORS的内部机制。" class="headerlink" title="本文详细介绍CORS的内部机制。"></a>本文详细介绍CORS的内部机制。</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>CORS需要<strong>浏览器</strong>和<strong>服务器</strong>同时支持。目前，所有浏览器都支持该功能，<strong>IE浏览器不能低于IE10。</strong><br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。<strong>对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。</strong>浏览器一旦发现AJAX请求跨源，就会<strong>自动添加</strong>一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<br>因此，<strong>实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><h2 id="二、两种请求"><a href="#二、两种请求" class="headerlink" title="二、两种请求"></a>二、两种请求</h2><p>浏览器将CORS请求分成两类：<strong>简单请求</strong>（simple request）和<strong>非简单请求</strong>（not-so-simple request）。<br>只要同时满足以下两大条件，就属于简单请求。<br>（1) 请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul><p>（2）HTTP的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><p>凡是不同时满足上面两个条件，就属于非简单请求。<br>浏览器对这两种请求的处理，是不一样的。</p><h2 id="三、简单请求"><a href="#三、简单请求" class="headerlink" title="三、简单请求"></a>三、简单请求</h2><h3 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h3><p>对于简单请求，浏览器直接发出<code>CORS</code>请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段。<br>下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个<code>Origin</code>字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure></p><p>上面的头信息中，<code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。<br>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的<code>onerror</code>回调函数捕获。注意，<strong>这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</strong></p><p><strong>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure></p><p>上面的头信息之中，有三个与CORS请求相关的字段，都以<code>Access-Control-</code>开头。</p><p><strong>（1）Access-Control-Allow-Origin</strong><br>该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。</p><p><strong>（2）Access-Control-Allow-Credentials</strong><br>该字段可选。它的值是一个布尔值，<strong>表示是否允许发送Cookie</strong>。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><p><strong>（3）Access-Control-Expose-Headers</strong><br>该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。<strong>如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</strong>上面的例子指定，getResponseHeader(‘FooBar’)可以返回FooBar字段的值。</p><h3 id="3-2-withCredentials-属性"><a href="#3-2-withCredentials-属性" class="headerlink" title="3.2 withCredentials 属性"></a>3.2 withCredentials 属性</h3><p>上面说到，CORS请求默认不发送<code>Cookie</code>和<code>HTTP认证信息</code>。</p><p>如果要把Cookie发到服务器，<strong>一方面要服务器同意</strong>，指定Access-Control-Allow-Credentials字段。<br><code>Access-Control-Allow-Credentials: true</code></p><p><strong>另一方面，开发者必须在AJAX请求中打开withCredentials属性。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = true;</span><br></pre></td></tr></table></figure></p><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。<br>但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。</p><p><code>xhr.withCredentials = false;</code></p><p>需要注意的是，<strong>如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。</strong>同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p><h2 id="四、非简单请求"><a href="#四、非简单请求" class="headerlink" title="四、非简单请求"></a>四、非简单请求</h2><h3 id="4-1-预检请求"><a href="#4-1-预检请求" class="headerlink" title="4.1 预检请求"></a>4.1 预检请求</h3><p><strong>非简单请求是那种对服务器有特殊要求的请求</strong>，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</p><p>非简单请求的CORS请求，<strong>会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</strong><br><strong>浏览器先询问服务器</strong>，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。<strong>只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</strong><br>下面是一段浏览器的JavaScript脚本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var url = &apos;http://api.alice.com/cors&apos;;</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;PUT&apos;, url, true);</span><br><span class="line">xhr.setRequestHeader(&apos;X-Custom-Header&apos;, &apos;value&apos;);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></p><p>上面代码中，HTTP请求的方法是<code>PUT</code>，并且发送一个<strong>自定义头信息</strong><code>X-Custom-Header</code>。<br>浏览器发现，这是一个非简单请求，就自动发出一个”预检”请求，要求服务器确认可以这样请求。下面是这个”<strong>预检</strong>“请求的HTTP头信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure></p><p>“预检”请求用的请求方法是<code>OPTIONS</code>，<strong>表示这个请求是用来询问的</strong>。头信息里面，关键字段是Origin，表示请求来自哪个源。</p><p>除了Origin字段，”<strong>预检”请求的头信息包括两个特殊字段。</strong></p><p>（1）<strong>Access-Control-Request-Method</strong><br>该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。<br>（2）<strong>Access-Control-Request-Headers</strong><br>该字段是一个逗号分隔的字符串，<strong>指定浏览器CORS请求会额外发送的头信息字段</strong>，上例是X-Custom-Header。</p><h3 id="4-2-预检请求的回应"><a href="#4-2-预检请求的回应" class="headerlink" title="4.2 预检请求的回应"></a>4.2 预检请求的回应</h3><p>服务器收到”预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure></p><p>上面的HTTP回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为<strong>星号</strong>，表示<strong>同意任意跨源请求</strong>。</p><p><code>Access-Control-Allow-Origin: *</code><br><strong>如果浏览器否定了”预检”请求</strong>，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。<strong>这时，浏览器就会认定，服务器不同意预检请求</strong>，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class="line">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure></p><p>服务器回应的其他CORS相关字段如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure></p><p>（1）<strong>Access-Control-Allow-Methods</strong><br>该字段必需，它的值是<code>逗号分隔的一个字符串</code>，<strong>表明服务器支持的所有跨域请求的方法。</strong>注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</p><p>（2）<strong>Access-Control-Allow-Headers</strong><br>如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在”预检”中请求的字段。</p><p>（3）<strong>Access-Control-Allow-Credentials</strong><br>该字段与简单请求时的含义相同。</p><p>（4）<strong>Access-Control-Max-Age</strong><br>该字段可选，<strong>用来指定本次预检请求的有效期</strong>，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><h3 id="4-3-浏览器的正常请求和回应"><a href="#4-3-浏览器的正常请求和回应" class="headerlink" title="4.3 浏览器的正常请求和回应"></a>4.3 浏览器的正常请求和回应</h3><p><strong>一旦服务器通过了”预检”请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。</strong>服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。<br>下面是”预检”请求之后，浏览器的正常CORS请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">X-Custom-Header: value</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure></p><p>上面头信息的<code>Origin</code>字段是<strong>浏览器自动添加的</strong>。</p><p><strong>下面是服务器正常的回应。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure></p><p>上面头信息中，<strong>Access-Control-Allow-Origin字段是每次回应都必定包含的。</strong></p><h2 id="五、与JSONP的比较"><a href="#五、与JSONP的比较" class="headerlink" title="五、与JSONP的比较"></a>五、与JSONP的比较</h2><ul><li>CORS与JSONP的使用目的相同，但是比JSONP更强大。</li><li>JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li></ul><p>来源：<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">阮一峰</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/ajax-1(1)/">http://jaymo666.github.io/2017/06/24/ajax-1(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> JS </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>闭包</title>
      <link href="/2017/06/24/Closure/"/>
      <content type="html"><![CDATA[<p>闭包其实是一个主动执行的代码块，这个代码块的特殊之处是可以永久保存局部变量，但又不污染全局变量，可以形成一个独立的执行过程，因此我们经常用闭包来定义组件。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=439139384&auto=0&height=66"></iframe><blockquote><p>让你分分钟学会JS闭包</p></blockquote><p>闭包，是 Javascript 比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMA规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟学会闭包！</p><h2 id="1、闭包，一睹为快"><a href="#1、闭包，一睹为快" class="headerlink" title="1、闭包，一睹为快"></a>1、闭包，一睹为快</h2><p>在接触一个新技术的时候，我首先会做的一件事就是找它的 demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function A()&#123;</span><br><span class="line">    function B()&#123;</span><br><span class="line">       console.log(&quot;Hello Closure!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return B;</span><br><span class="line">&#125;</span><br><span class="line">var C = A();</span><br><span class="line">C();//Hello Closure!</span><br></pre></td></tr></table></figure><p>这是最简单的闭包。</p><p>有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下：</p><p>（1）定义普通函数 A</p><p>（2）在 A 中定义普通函数 B</p><p>（3）在 A 中返回 B</p><p>（4）执行 A, 并把 A 的返回结果赋值给变量 C</p><p>（5）执行 C </p><p>把这5步操作总结成一句话就是：</p><p><strong>函数A的内部函数B被函数A外的一个变量 c 引用。</strong></p><p>把这句话再加工一下就变成了闭包的定义：<br><strong>当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。</strong></p><p>因此，当你执行上述5步操作时，就已经定义了一个闭包！</p><p>这就是闭包。</p><h2 id="2、-闭包的用途"><a href="#2、-闭包的用途" class="headerlink" title="2、 闭包的用途"></a>2、 闭包的用途</h2><p>在了解闭包的作用之前，我们先了解一下 Javascript 中的GC机制:</p><p><strong>在 Javascript 中，如果一个对象不再被引用，那么这个对象就会被 GC 回收，否则这个对象一直会保存在内存中。</strong></p><p>在上述例子中，B 定义在 A 中，因此 B 依赖于 A ,而外部变量 C 又引用了 B , 所以A间接的被 C 引用。</p><p>也就是说，A 不会被 GC 回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function A()&#123;</span><br><span class="line">    var count = 0;</span><br><span class="line">    function B()&#123;</span><br><span class="line">       count ++;</span><br><span class="line">       console.log(count);</span><br><span class="line">    &#125;</span><br><span class="line">    return B;</span><br><span class="line">&#125;</span><br><span class="line">var C = A();</span><br><span class="line">C();// 1</span><br><span class="line">C();// 2</span><br><span class="line">C();// 3</span><br></pre></td></tr></table></figure></p><p>count 是函数A 中的一个变量，它的值在函数B 中被改变，函数B 每执行一次，count 的值就在原来的基础上累加 1 。因此，函数A中的 count 变量会一直保存在内存中。</p><p><strong>当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。</strong></p><h2 id="3、-闭包的高级写法"><a href="#3、-闭包的高级写法" class="headerlink" title="3、 闭包的高级写法"></a>3、 闭包的高级写法</h2><p>上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function(document)&#123;</span><br><span class="line">    var viewport;</span><br><span class="line">    var obj = &#123;</span><br><span class="line">        init:function(id)&#123;</span><br><span class="line">           viewport = document.querySelector(&quot;#&quot;+id);</span><br><span class="line">        &#125;,</span><br><span class="line">        addChild:function(child)&#123;</span><br><span class="line">            viewport.appendChild(child);</span><br><span class="line">        &#125;,</span><br><span class="line">        removeChild:function(child)&#123;</span><br><span class="line">            viewport.removeChild(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    window.jView = obj;</span><br><span class="line">&#125;)(document);</span><br></pre></td></tr></table></figure></p><p>这个组件的作用是：初始化一个容器，然后可以给这个容器添加子容器，也可以移除一个容器。</p><p>功能很简单，但这里涉及到了另外一个概念：立即执行函数。 简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。</p><p>可以将上面的代码拆分成两部分：<code>(function(){})</code> 和<code>()</code> , <strong>第1个() 是一个表达式</strong>，而这个表达式本身是一个<strong>匿名函数</strong>，所以在这个<strong>表达式后面加 () 就表示执行这个匿名函数</strong>。</p><p>因此这段代码执行执行过程可以分解如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var f = function(document)&#123;</span><br><span class="line">    var viewport;</span><br><span class="line">    var obj = &#123;</span><br><span class="line">        init:function(id)&#123;</span><br><span class="line">            viewport = document.querySelector(&quot;#&quot;+id);</span><br><span class="line">        &#125;,</span><br><span class="line">        addChild:function(child)&#123;</span><br><span class="line">            viewport.appendChild(child);</span><br><span class="line">        &#125;,</span><br><span class="line">        removeChild:function(child)&#123;</span><br><span class="line">            viewport.removeChild(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    window.jView = obj;</span><br><span class="line">&#125;;</span><br><span class="line">f(document);</span><br></pre></td></tr></table></figure></p><p>在这段代码中似乎看到了闭包的影子，但 f 中没有任何返回值，似乎不具备闭包的条件，注意这句代码：<br><code>window.jView = obj;</code></p><p>obj 是在函数 f 中定义的一个对象，这个对象中定义了一系列方法， 执行window.jView = obj 就是在 window 全局对象定义了一个变量 jView，并将这个变量指向 obj 对象，即全局变量 jView 引用了 obj . 而 obj 对象中的函数又引用了函数 f 中的变量 viewport ,因此函数 f 中的 viewport 不会被 GC 回收，viewport 会一直保存到内存中，所以这种写法满足了闭包的条件。 </p><h2 id="4、-总结语"><a href="#4、-总结语" class="headerlink" title="4、 总结语"></a>4、 总结语</h2><p>这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的<code>执行环境(execution context)</code>、<code>活动对象(activation object)</code>以及<code>作用域(scope)</code>和<code>作用域链(scope chain)</code>的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！</p><p>来源：<a href="http://www.cnblogs.com/onepixel/p/5062456.html" target="_blank" rel="noopener">一像素</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/Closure/">http://jaymo666.github.io/2017/06/24/Closure/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>闭包</title>
      <link href="/2017/06/24/Closure(1)/"/>
      <content type="html"><![CDATA[<p>闭包其实是一个主动执行的代码块，这个代码块的特殊之处是可以永久保存局部变量，但又不污染全局变量，可以形成一个独立的执行过程，因此我们经常用闭包来定义组件。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=439139384&auto=0&height=66"></iframe><blockquote><p>让你分分钟学会JS闭包</p></blockquote><p>闭包，是 Javascript 比较重要的一个概念，对于初学者来讲，闭包是一个特别抽象的概念，特别是ECMA规范给的定义，如果没有实战经验，很难从定义去理解它。因此，本文不会对闭包的概念进行大篇幅描述，直接上干货，让你分分钟学会闭包！</p><h2 id="1、闭包，一睹为快"><a href="#1、闭包，一睹为快" class="headerlink" title="1、闭包，一睹为快"></a>1、闭包，一睹为快</h2><p>在接触一个新技术的时候，我首先会做的一件事就是找它的 demo。对于我们来说，看代码比自然语言更能理解一个事物的本质。其实，闭包无处不在，比如：jQuery、zepto的核心代码都包含在一个大的闭包中，所以下面我先写一个最简单最原始的闭包，以便让你在大脑里产生闭包的画面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function A()&#123;</span><br><span class="line">    function B()&#123;</span><br><span class="line">       console.log(&quot;Hello Closure!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return B;</span><br><span class="line">&#125;</span><br><span class="line">var C = A();</span><br><span class="line">C();//Hello Closure!</span><br></pre></td></tr></table></figure><p>这是最简单的闭包。</p><p>有了初步认识后，我们简单分析一下它和普通函数有什么不同，上面代码翻译成自然语言如下：</p><p>（1）定义普通函数 A</p><p>（2）在 A 中定义普通函数 B</p><p>（3）在 A 中返回 B</p><p>（4）执行 A, 并把 A 的返回结果赋值给变量 C</p><p>（5）执行 C </p><p>把这5步操作总结成一句话就是：</p><p><strong>函数A的内部函数B被函数A外的一个变量 c 引用。</strong></p><p>把这句话再加工一下就变成了闭包的定义：<br><strong>当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。</strong></p><p>因此，当你执行上述5步操作时，就已经定义了一个闭包！</p><p>这就是闭包。</p><h2 id="2、-闭包的用途"><a href="#2、-闭包的用途" class="headerlink" title="2、 闭包的用途"></a>2、 闭包的用途</h2><p>在了解闭包的作用之前，我们先了解一下 Javascript 中的GC机制:</p><p><strong>在 Javascript 中，如果一个对象不再被引用，那么这个对象就会被 GC 回收，否则这个对象一直会保存在内存中。</strong></p><p>在上述例子中，B 定义在 A 中，因此 B 依赖于 A ,而外部变量 C 又引用了 B , 所以A间接的被 C 引用。</p><p>也就是说，A 不会被 GC 回收，会一直保存在内存中。为了证明我们的推理，上面的例子稍作改进：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function A()&#123;</span><br><span class="line">    var count = 0;</span><br><span class="line">    function B()&#123;</span><br><span class="line">       count ++;</span><br><span class="line">       console.log(count);</span><br><span class="line">    &#125;</span><br><span class="line">    return B;</span><br><span class="line">&#125;</span><br><span class="line">var C = A();</span><br><span class="line">C();// 1</span><br><span class="line">C();// 2</span><br><span class="line">C();// 3</span><br></pre></td></tr></table></figure></p><p>count 是函数A 中的一个变量，它的值在函数B 中被改变，函数B 每执行一次，count 的值就在原来的基础上累加 1 。因此，函数A中的 count 变量会一直保存在内存中。</p><p><strong>当我们需要在模块中定义一些变量，并希望这些变量一直保存在内存中但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。</strong></p><h2 id="3、-闭包的高级写法"><a href="#3、-闭包的高级写法" class="headerlink" title="3、 闭包的高级写法"></a>3、 闭包的高级写法</h2><p>上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function(document)&#123;</span><br><span class="line">    var viewport;</span><br><span class="line">    var obj = &#123;</span><br><span class="line">        init:function(id)&#123;</span><br><span class="line">           viewport = document.querySelector(&quot;#&quot;+id);</span><br><span class="line">        &#125;,</span><br><span class="line">        addChild:function(child)&#123;</span><br><span class="line">            viewport.appendChild(child);</span><br><span class="line">        &#125;,</span><br><span class="line">        removeChild:function(child)&#123;</span><br><span class="line">            viewport.removeChild(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    window.jView = obj;</span><br><span class="line">&#125;)(document);</span><br></pre></td></tr></table></figure></p><p>这个组件的作用是：初始化一个容器，然后可以给这个容器添加子容器，也可以移除一个容器。</p><p>功能很简单，但这里涉及到了另外一个概念：立即执行函数。 简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。</p><p>可以将上面的代码拆分成两部分：<code>(function(){})</code> 和<code>()</code> , <strong>第1个() 是一个表达式</strong>，而这个表达式本身是一个<strong>匿名函数</strong>，所以在这个<strong>表达式后面加 () 就表示执行这个匿名函数</strong>。</p><p>因此这段代码执行执行过程可以分解如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var f = function(document)&#123;</span><br><span class="line">    var viewport;</span><br><span class="line">    var obj = &#123;</span><br><span class="line">        init:function(id)&#123;</span><br><span class="line">            viewport = document.querySelector(&quot;#&quot;+id);</span><br><span class="line">        &#125;,</span><br><span class="line">        addChild:function(child)&#123;</span><br><span class="line">            viewport.appendChild(child);</span><br><span class="line">        &#125;,</span><br><span class="line">        removeChild:function(child)&#123;</span><br><span class="line">            viewport.removeChild(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    window.jView = obj;</span><br><span class="line">&#125;;</span><br><span class="line">f(document);</span><br></pre></td></tr></table></figure></p><p>在这段代码中似乎看到了闭包的影子，但 f 中没有任何返回值，似乎不具备闭包的条件，注意这句代码：<br><code>window.jView = obj;</code></p><p>obj 是在函数 f 中定义的一个对象，这个对象中定义了一系列方法， 执行window.jView = obj 就是在 window 全局对象定义了一个变量 jView，并将这个变量指向 obj 对象，即全局变量 jView 引用了 obj . 而 obj 对象中的函数又引用了函数 f 中的变量 viewport ,因此函数 f 中的 viewport 不会被 GC 回收，viewport 会一直保存到内存中，所以这种写法满足了闭包的条件。 </p><h2 id="4、-总结语"><a href="#4、-总结语" class="headerlink" title="4、 总结语"></a>4、 总结语</h2><p>这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解JS的<code>执行环境(execution context)</code>、<code>活动对象(activation object)</code>以及<code>作用域(scope)</code>和<code>作用域链(scope chain)</code>的运行机制。但作为初学者，暂时不必了解这些，有了简单的理解之后，一定要在实际项目中用起来，等你用的多了，对于闭包，你自然会有更深层次的理解！</p><p>来源：<a href="http://www.cnblogs.com/onepixel/p/5062456.html" target="_blank" rel="noopener">一像素</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/24/Closure(1)/">http://jaymo666.github.io/2017/06/24/Closure(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>详解JS的call,apply和bind</title>
      <link href="/2017/06/20/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88-this(1)/"/>
      <content type="html"><![CDATA[<p>Function对象还提供了call、apply和bind等方法来改变函数的this指向，其中call和apply主动执行函数，bind一般在事件回调中使用，而call和apply的区别只是参数的传递方式不同<br><a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=1&height=66"></iframe><blockquote><p><strong>深入理解call,apply和bind</strong><br>在JavaScript 中，<code>call</code>、<code>apply</code> 和 <code>bind</code> 是 Function 对象自带的三个方法，这三个方法的主要作用是改变函数中的 this 指向，从而可以达到<code>接花移木</code>的效果。本文将对这三个方法进行详细的讲解，并列出几个经典应用场景。</p></blockquote><h2 id="1、call-thisArgs-args…"><a href="#1、call-thisArgs-args…" class="headerlink" title="1、call(thisArgs [,args…])"></a>1、call(thisArgs [,args…])</h2><p>该方法可以传递一个<code>thisArgs参数</code>和一个<code>参数列表</code>，<strong>thisArgs 指定了函数在运行期的调用者</strong>，也就是函数中的 this 对象，而参数列表会被传入调用函数中。thisArgs 的取值有以下4种情况：<br>（1） 不传，或者传null,undefined， 函数中的 this 指向 window 对象</p><p>（2） 传递另一个函数的函数名，函数中的 this 指向这个函数的引用</p><p>（3） 传递字符串、数值或布尔类型等基础类型，函数中的 this 指向其对应的包装对象，如 String、Number、Boolean</p><p>（4） 传递一个对象，函数中的 this 指向这个对象</p><pre><code>function a(){    console.log(this); //输出函数a中的this对象}function b(){} //定义函数bvar obj = {name:&apos;onepixel&apos;}; //定义对象obja.call(); //windowa.call(null); //windowa.call(undefined);//windowa.call(1); //Numbera.call(&apos;&apos;); //Stringa.call(true); //Booleana.call(b);// function b(){}a.call(obj); //Object</code></pre><p>这是call 的<code>核心功能</code>，<strong>它允许你在一个对象上调用该对象没有定义的方法</strong>，并且这个方法可以访问该对象中的属性，至于这样做有什么好处，我待会再讲，我们先看一个简单的例子：</p><pre><code>var a = {    name:&apos;onepixel&apos;, //定义a的属性    say:function(){ //定义a的方法        console.log(&quot;Hi,I&apos;m function a!&quot;);    }};function b(name){    console.log(&quot;Post params: &quot;+ name);    console.log(&quot;I&apos;m &quot;+ this.name);    this.say();}b.call(a,&apos;test&apos;);&gt;&gt;Post params: testI&apos;m onepixelI&apos;m function a!</code></pre><p>当执行b.call 时，字符串<code>test</code>作为参数传递给了函数b,由于call的作用，函数b中的this指向了对象a, 因此相当于调用了对象a上的函数b,而实际上a中没有定义b 。</p><h2 id="2、apply-thisArgs-args"><a href="#2、apply-thisArgs-args" class="headerlink" title="2、apply(thisArgs[,args[]])"></a>2、apply(thisArgs[,args[]])</h2><p>apply 和 call 的<strong>唯一区别</strong>是<strong>第二个参数的传递方式不同</strong>，apply 的第二个参数必须是一个<code>数组</code>，而 call 允许传递一个参数列表。值得你注意的是，虽然 apply 接收的是一个参数数组，但在传递给调用函数时，却是以参数列表的形式传递，我们看个简单的例子：</p><pre><code>function b(x,y,z){    console.log(x,y,z);}b.apply(null,[1,2,3]); // 1 2 3</code></pre><p>apply 的这个特性很重要，我们会在下面的应用场景中提到这个特性。</p><h2 id="3、bind-thisArgs-args…"><a href="#3、bind-thisArgs-args…" class="headerlink" title="3、bind(thisArgs [,args…])"></a>3、bind(thisArgs [,args…])</h2><p>bind是ES5 新增的一个方法，它的传参和call类似，但又和 call/apply 有着显著的不同，即<strong>调用 call 或 apply 都会自动执行对应的函数</strong>，而 <strong>bind 不会执行对应的函数</strong>，只是返回了对函数的引用。粗略一看，bind 似乎比call/apply 要落后一些，那ES5为什么还要引入bind 呢？</p><p>其实，ES5引入 bind 的真正目的是为了弥补 call/apply 的不足，由于 call/apply 会对目标函数自动执行，从而导致它无法在事件绑定函数中使用，因为事件绑定函数不需要我们手动执行，它是在事件被触发时由JS 内部自动执行的。而 <strong>bind 在实现改变函数 this 的同时又不会自动执行目标函数</strong>，因此可以完美的解决上述问题，看一个例子就能明白：</p><pre><code>var obj = {name:&apos;onepixel&apos;};/** * 给document添加click事件监听，并绑定onClick函数 * 通过bind方法设置onClick的this为obj，并传递参数p1,p2 */document.addEventListener(&apos;click&apos;,onClick.bind(obj,&apos;p1&apos;,&apos;p2&apos;),false);//当点击网页时触发并执行function onClick(a,b){    console.log(            this.name, //onepixel            a, //p1            b  //p2    )}</code></pre><p>当点击网页时，onClick 被触发执行，输出onepixel p1 p2, 说明 onClick 中的 this 被 bind 改变成了obj 对象，为了对 bind 进行深入的理解，我们来看一下 bind 的<code>polyfill</code> 实现：</p><pre><code>if (!Function.prototype.bind) {    Function.prototype.bind = function (oThis) {        var aArgs = Array.prototype.slice.call(arguments, 1),            fToBind = this, //this在这里指向的是目标函数            fBound = function () {                return fToBind.apply(                    //如果外部执行var obj = new fBound(),则将obj作为最终的this，放弃使用oThis                    this instanceof fToBind                            ? this  //此时的this就是new出的obj                            : oThis || this, //如果传递的oThis无效，就将fBound的调用者作为this                    //将通过bind传递的参数和调用时传递的参数进行合并，并作为最终的参数传递                    aArgs.concat(Array.prototype.slice.call(arguments)));            };        //将目标函数的原型对象拷贝到新函数中，因为目标函数有可能被当作构造函数使用        fBound.prototype = this.prototype;        //返回fBond的引用，由外部按需调用        return fBound;    };}</code></pre><p><strong>一旦函数通过bind传递了有效的this对象，则该函数在运行期的this将指向这个对象，即使通过call或apply来试图改变this的指向也是徒劳的。</strong></p><pre><code>//实现数组的去重功能Array.prototype.unique = function(fn) {        var rst = [];        var tmp = {};        this.forEach(function(val) {            //使用call来改变fn的this指向，这里传window            var key = &apos;uniq&apos; + (typeof fn === &apos;function&apos; ? fn.call(window, val) : val);            if (!tmp.hasOwnProperty(key)) {                rst.push(val);                tmp[key] = null;            }        }, this);        return rst;}//对象数组去重var arr = [    { id: 2 }, { id: 4 }, { id: 3 }, { id: 3 }, { id: 4 }, { id: 6 }]arr.unique(function(v) {     console.log(this) //使用bind传递了Array,则this一定是Array,而不会是window     return v.id}.bind(Array));</code></pre><h2 id="4、应用场景一：继承"><a href="#4、应用场景一：继承" class="headerlink" title="4、应用场景一：继承"></a>4、应用场景一：继承</h2><p>大家知道，JavaScript中没有诸如Java、C# 等高级语言中的extend 关键字，因此JS 中没有继承的概念，如果一定要继承的话，call 和 apply 可以实现这个功能：</p><pre><code>function Animal(name,weight){   this.name = name;   this.weight = weight;}function Cat(){    Animal.call(this,&apos;cat&apos;,&apos;50&apos;);  //Animal.apply(this,[&apos;cat&apos;,&apos;50&apos;]);   this.say = function(){      console.log(&quot;I am &quot; + this.name+&quot;,my weight is &quot; + this.weight);   }}var cat = new Cat();cat.say();//I am cat,my weight is 50</code></pre><p>当通过new 运算符产生了cat 时，<strong>Cat中的 this 就指向了cat对象</strong>(关于new运算符的讲解，请参考JS构造函数和new运算符，而继承的关键是在于Cat中执行了Animal.call(this,’cat’,’50’) 这句话，在call中将this作为thisArgs参数传递，于是<strong>Animal 方法中的 this 就指向了Cat中的 this</strong>，而 cat 中的 this 指向的是 cat 对象，所以Animal 中的 this 指向的就是 cat 对象，在 Animal 中定义了name 和 weight 属性，就相当于在 cat 中定义了这些属性，因此 cat 对象便拥有了Animal 中定义的属性，从而达到了继承的目的。</p><h2 id="5、应用场景二：移花接木"><a href="#5、应用场景二：移花接木" class="headerlink" title="5、应用场景二：移花接木"></a>5、应用场景二：移花接木</h2><p>在讲下面的内容之前，我们首先来认识一下JavaScript 中的一个非标准专业术语：<code>ArrayLike</code> (类数组/伪数组)</p><p>ArrayLike 对象即拥有数组的一部分行为，在DOM 中早已表现出来，而jQuery 的崛起让ArrayLike 在JavaScript 中大放异彩。ArrayLike 对象的精妙在于它和JS 原生的 Array 类似，但是它是自由构建的，它来自开发者对JavaScript 对象的扩展，也就是说：<strong>对于它的原型(prototype)我们可以自由定义，而不会污染到JS原生的Array。</strong> </p><p><strong>ArrayLike 对象在JS中被广泛使用</strong>，比如DOM 中的NodeList, 函数中的arguments 都是<code>类数组对象</code>，<strong>这些对象像数组一样存储着每一个元素，但它没有操作数组的方法</strong>，而我们可以通过call 将数组的某些方法<code>移接</code>到ArrayLike 对象，从而达到操作其元素的目的。比如我们可以这样遍历函数中的arguments:</p><pre><code>function test(){    //检测arguments是否为Array的实例    console.log(            arguments instanceof Array, //false            Array.isArray(arguments)  //false    );    //判断arguments是否有forEach方法    console.log(arguments.forEach); //undefined    // 将数组中的forEach应用到arguments上    Array.prototype.forEach.call(arguments,function(item){        console.log(item); // 1 2 3 4    });}test(1,2,3,4);</code></pre><p>除此之外，对于apply 而言，我们上面提到了它独有的一个特性，即<strong>apply 接收的是数组，在传递给调用函数的时候是以参数列表传递的。</strong> 这个特性让apply 看起来比call 略胜一筹，比如有这样一个场景：给定一个数组[1,3,4,7]，然后求数组中的最大元素，而我们知道，数组中并没有获取最大值的方法，一般情况下，你需要通过编写代码来实现。而我们知道，Math 对象中有一个获取最大值的方法，即Math.max()， max方法需要传递一个参数列表，然后返回这些参数中的最大值。而apply 不仅可以将Math 对象的max 方法应用到其他对象上，还可以将一个数组转化为参数列表传递给max,看代码就能一目了然：</p><pre><code>var arr = [2,3,1,5,4];Math.max.apply(null,arr); // 5</code></pre><p>以上便是call 和apply 比较经典的几个应用场景，熟练掌握这些技巧，并把这些特性应用到你的实际项目中，会使你的代码看起来更加耐人寻味！</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/函数指针-this(1)/">http://jaymo666.github.io/2017/06/20/函数指针-this(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 函数 </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>详解JS的call,apply和bind</title>
      <link href="/2017/06/20/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88-this/"/>
      <content type="html"><![CDATA[<p>Function对象还提供了call、apply和bind等方法来改变函数的this指向，其中call和apply主动执行函数，bind一般在事件回调中使用，而call和apply的区别只是参数的传递方式不同<br><a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=447960871&auto=1&height=66"></iframe><blockquote><p><strong>深入理解call,apply和bind</strong><br>在JavaScript 中，<code>call</code>、<code>apply</code> 和 <code>bind</code> 是 Function 对象自带的三个方法，这三个方法的主要作用是改变函数中的 this 指向，从而可以达到<code>接花移木</code>的效果。本文将对这三个方法进行详细的讲解，并列出几个经典应用场景。</p></blockquote><h2 id="1、call-thisArgs-args…"><a href="#1、call-thisArgs-args…" class="headerlink" title="1、call(thisArgs [,args…])"></a>1、call(thisArgs [,args…])</h2><p>该方法可以传递一个<code>thisArgs参数</code>和一个<code>参数列表</code>，<strong>thisArgs 指定了函数在运行期的调用者</strong>，也就是函数中的 this 对象，而参数列表会被传入调用函数中。thisArgs 的取值有以下4种情况：<br>（1） 不传，或者传null,undefined， 函数中的 this 指向 window 对象</p><p>（2） 传递另一个函数的函数名，函数中的 this 指向这个函数的引用</p><p>（3） 传递字符串、数值或布尔类型等基础类型，函数中的 this 指向其对应的包装对象，如 String、Number、Boolean</p><p>（4） 传递一个对象，函数中的 this 指向这个对象</p><pre><code>function a(){    console.log(this); //输出函数a中的this对象}function b(){} //定义函数bvar obj = {name:&apos;onepixel&apos;}; //定义对象obja.call(); //windowa.call(null); //windowa.call(undefined);//windowa.call(1); //Numbera.call(&apos;&apos;); //Stringa.call(true); //Booleana.call(b);// function b(){}a.call(obj); //Object</code></pre><p>这是call 的<code>核心功能</code>，<strong>它允许你在一个对象上调用该对象没有定义的方法</strong>，并且这个方法可以访问该对象中的属性，至于这样做有什么好处，我待会再讲，我们先看一个简单的例子：</p><pre><code>var a = {    name:&apos;onepixel&apos;, //定义a的属性    say:function(){ //定义a的方法        console.log(&quot;Hi,I&apos;m function a!&quot;);    }};function b(name){    console.log(&quot;Post params: &quot;+ name);    console.log(&quot;I&apos;m &quot;+ this.name);    this.say();}b.call(a,&apos;test&apos;);&gt;&gt;Post params: testI&apos;m onepixelI&apos;m function a!</code></pre><p>当执行b.call 时，字符串<code>test</code>作为参数传递给了函数b,由于call的作用，函数b中的this指向了对象a, 因此相当于调用了对象a上的函数b,而实际上a中没有定义b 。</p><h2 id="2、apply-thisArgs-args"><a href="#2、apply-thisArgs-args" class="headerlink" title="2、apply(thisArgs[,args[]])"></a>2、apply(thisArgs[,args[]])</h2><p>apply 和 call 的<strong>唯一区别</strong>是<strong>第二个参数的传递方式不同</strong>，apply 的第二个参数必须是一个<code>数组</code>，而 call 允许传递一个参数列表。值得你注意的是，虽然 apply 接收的是一个参数数组，但在传递给调用函数时，却是以参数列表的形式传递，我们看个简单的例子：</p><pre><code>function b(x,y,z){    console.log(x,y,z);}b.apply(null,[1,2,3]); // 1 2 3</code></pre><p>apply 的这个特性很重要，我们会在下面的应用场景中提到这个特性。</p><h2 id="3、bind-thisArgs-args…"><a href="#3、bind-thisArgs-args…" class="headerlink" title="3、bind(thisArgs [,args…])"></a>3、bind(thisArgs [,args…])</h2><p>bind是ES5 新增的一个方法，它的传参和call类似，但又和 call/apply 有着显著的不同，即<strong>调用 call 或 apply 都会自动执行对应的函数</strong>，而 <strong>bind 不会执行对应的函数</strong>，只是返回了对函数的引用。粗略一看，bind 似乎比call/apply 要落后一些，那ES5为什么还要引入bind 呢？</p><p>其实，ES5引入 bind 的真正目的是为了弥补 call/apply 的不足，由于 call/apply 会对目标函数自动执行，从而导致它无法在事件绑定函数中使用，因为事件绑定函数不需要我们手动执行，它是在事件被触发时由JS 内部自动执行的。而 <strong>bind 在实现改变函数 this 的同时又不会自动执行目标函数</strong>，因此可以完美的解决上述问题，看一个例子就能明白：</p><pre><code>var obj = {name:&apos;onepixel&apos;};/** * 给document添加click事件监听，并绑定onClick函数 * 通过bind方法设置onClick的this为obj，并传递参数p1,p2 */document.addEventListener(&apos;click&apos;,onClick.bind(obj,&apos;p1&apos;,&apos;p2&apos;),false);//当点击网页时触发并执行function onClick(a,b){    console.log(            this.name, //onepixel            a, //p1            b  //p2    )}</code></pre><p>当点击网页时，onClick 被触发执行，输出onepixel p1 p2, 说明 onClick 中的 this 被 bind 改变成了obj 对象，为了对 bind 进行深入的理解，我们来看一下 bind 的<code>polyfill</code> 实现：</p><pre><code>if (!Function.prototype.bind) {    Function.prototype.bind = function (oThis) {        var aArgs = Array.prototype.slice.call(arguments, 1),            fToBind = this, //this在这里指向的是目标函数            fBound = function () {                return fToBind.apply(                    //如果外部执行var obj = new fBound(),则将obj作为最终的this，放弃使用oThis                    this instanceof fToBind                            ? this  //此时的this就是new出的obj                            : oThis || this, //如果传递的oThis无效，就将fBound的调用者作为this                    //将通过bind传递的参数和调用时传递的参数进行合并，并作为最终的参数传递                    aArgs.concat(Array.prototype.slice.call(arguments)));            };        //将目标函数的原型对象拷贝到新函数中，因为目标函数有可能被当作构造函数使用        fBound.prototype = this.prototype;        //返回fBond的引用，由外部按需调用        return fBound;    };}</code></pre><p><strong>一旦函数通过bind传递了有效的this对象，则该函数在运行期的this将指向这个对象，即使通过call或apply来试图改变this的指向也是徒劳的。</strong></p><pre><code>//实现数组的去重功能Array.prototype.unique = function(fn) {        var rst = [];        var tmp = {};        this.forEach(function(val) {            //使用call来改变fn的this指向，这里传window            var key = &apos;uniq&apos; + (typeof fn === &apos;function&apos; ? fn.call(window, val) : val);            if (!tmp.hasOwnProperty(key)) {                rst.push(val);                tmp[key] = null;            }        }, this);        return rst;}//对象数组去重var arr = [    { id: 2 }, { id: 4 }, { id: 3 }, { id: 3 }, { id: 4 }, { id: 6 }]arr.unique(function(v) {     console.log(this) //使用bind传递了Array,则this一定是Array,而不会是window     return v.id}.bind(Array));</code></pre><h2 id="4、应用场景一：继承"><a href="#4、应用场景一：继承" class="headerlink" title="4、应用场景一：继承"></a>4、应用场景一：继承</h2><p>大家知道，JavaScript中没有诸如Java、C# 等高级语言中的extend 关键字，因此JS 中没有继承的概念，如果一定要继承的话，call 和 apply 可以实现这个功能：</p><pre><code>function Animal(name,weight){   this.name = name;   this.weight = weight;}function Cat(){    Animal.call(this,&apos;cat&apos;,&apos;50&apos;);  //Animal.apply(this,[&apos;cat&apos;,&apos;50&apos;]);   this.say = function(){      console.log(&quot;I am &quot; + this.name+&quot;,my weight is &quot; + this.weight);   }}var cat = new Cat();cat.say();//I am cat,my weight is 50</code></pre><p>当通过new 运算符产生了cat 时，<strong>Cat中的 this 就指向了cat对象</strong>(关于new运算符的讲解，请参考JS构造函数和new运算符，而继承的关键是在于Cat中执行了Animal.call(this,’cat’,’50’) 这句话，在call中将this作为thisArgs参数传递，于是<strong>Animal 方法中的 this 就指向了Cat中的 this</strong>，而 cat 中的 this 指向的是 cat 对象，所以Animal 中的 this 指向的就是 cat 对象，在 Animal 中定义了name 和 weight 属性，就相当于在 cat 中定义了这些属性，因此 cat 对象便拥有了Animal 中定义的属性，从而达到了继承的目的。</p><h2 id="5、应用场景二：移花接木"><a href="#5、应用场景二：移花接木" class="headerlink" title="5、应用场景二：移花接木"></a>5、应用场景二：移花接木</h2><p>在讲下面的内容之前，我们首先来认识一下JavaScript 中的一个非标准专业术语：<code>ArrayLike</code> (类数组/伪数组)</p><p>ArrayLike 对象即拥有数组的一部分行为，在DOM 中早已表现出来，而jQuery 的崛起让ArrayLike 在JavaScript 中大放异彩。ArrayLike 对象的精妙在于它和JS 原生的 Array 类似，但是它是自由构建的，它来自开发者对JavaScript 对象的扩展，也就是说：<strong>对于它的原型(prototype)我们可以自由定义，而不会污染到JS原生的Array。</strong> </p><p><strong>ArrayLike 对象在JS中被广泛使用</strong>，比如DOM 中的NodeList, 函数中的arguments 都是<code>类数组对象</code>，<strong>这些对象像数组一样存储着每一个元素，但它没有操作数组的方法</strong>，而我们可以通过call 将数组的某些方法<code>移接</code>到ArrayLike 对象，从而达到操作其元素的目的。比如我们可以这样遍历函数中的arguments:</p><pre><code>function test(){    //检测arguments是否为Array的实例    console.log(            arguments instanceof Array, //false            Array.isArray(arguments)  //false    );    //判断arguments是否有forEach方法    console.log(arguments.forEach); //undefined    // 将数组中的forEach应用到arguments上    Array.prototype.forEach.call(arguments,function(item){        console.log(item); // 1 2 3 4    });}test(1,2,3,4);</code></pre><p>除此之外，对于apply 而言，我们上面提到了它独有的一个特性，即<strong>apply 接收的是数组，在传递给调用函数的时候是以参数列表传递的。</strong> 这个特性让apply 看起来比call 略胜一筹，比如有这样一个场景：给定一个数组[1,3,4,7]，然后求数组中的最大元素，而我们知道，数组中并没有获取最大值的方法，一般情况下，你需要通过编写代码来实现。而我们知道，Math 对象中有一个获取最大值的方法，即Math.max()， max方法需要传递一个参数列表，然后返回这些参数中的最大值。而apply 不仅可以将Math 对象的max 方法应用到其他对象上，还可以将一个数组转化为参数列表传递给max,看代码就能一目了然：</p><pre><code>var arr = [2,3,1,5,4];Math.max.apply(null,arr); // 5</code></pre><p>以上便是call 和apply 比较经典的几个应用场景，熟练掌握这些技巧，并把这些特性应用到你的实际项目中，会使你的代码看起来更加耐人寻味！</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/函数指针-this/">http://jaymo666.github.io/2017/06/20/函数指针-this/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 函数 </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>R入门</title>
      <link href="/2017/06/20/R%E5%85%A5%E9%97%A8/"/>
      <content type="html"><![CDATA[<p>一门可视化语言<br><a id="more"></a><br><strong>安装包</strong>（例如在RStudio中国安装caret包）</p><p><code>install.packages(&quot;caret&quot;)</code></p><p><strong>使用引入包</strong></p><pre><code>library(caret)</code></pre><p><strong>数据对象的5种基本类型：</strong><br>字符（character）、数值（numeric：real numbers）、整数（integer）、复数（complex）、逻辑（logical：True/False)</p><p>x&lt;-1数值<br>x&lt;-1L 整数（后面加L）<br>逻辑（TRUE和FALSE要用大写）</p><p><strong>数据结构：</strong><br>向量（Vector）：只能包含同一类型的对象<br>矩阵（Matrix）：向量+维度属性<br>数组（array）：相当于维度大于2的矩阵（矩阵的维度等于2）<br>列表（list）：可以包含不同类型的对象<br>因子(factor):分类数据/有序vs无序    整数向量+标签（label）（优于整数向量）<br>缺失值（missing value):<br>数据框（data frame）（表格）：数据框是R里面最重要的数据对象，<br>日期与时间：</p><p><strong>par()</strong>——数据可视化的起点</p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/R入门/">http://jaymo666.github.io/2017/06/20/R入门/</a></p>]]></content>
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初级 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS 之函数原型链</title>
      <link href="/2017/06/20/JS-%E4%B9%8B%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E9%93%BE(1)/"/>
      <content type="html"><![CDATA[<p>在Javascript中，万物皆对象，但对象也有区别，大致可以分为两类，即：普通对象Object 和 函数对象Function。<br>一般而言，通过new Function产生的对象是函数对象，其他对象都是普通对象。<br><a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28285910&auto=0&height=66"></iframe><blockquote><p><strong>JS原型对象和原型链</strong></p></blockquote><p>一般而言，<strong>通过new Function产生的对象是函数对象，其他对象都是普通对象。</strong><br>栗子：</p><pre><code>function f1(){    //todo}var f2 = function(){    //todo};var f3 = new Function(&apos;x&apos;,&apos;console.log(x)&apos;);var o1 = {};var o2 = new Object();var o3 = new f1();console.log(    typeof f1,//function    typeof f2,//function    typeof f3,//function    typeof o1,//object    typeof o2,//object    typeof o3 //object);&gt;&gt; function function function object object object</code></pre><p>f1属于函数的声明，最常见的函数定义方式，f2实际上是一个匿名函数，把这个匿名函数赋值给了f2,属于函数表达式，f3不常见，但也是一种函数对象。f1属于函数的声明，最常见的函数定义方式，f2实际上是一个匿名函数，把这个匿名函数赋值给了f2,属于函数表达式，f3不常见，但也是一种函数对象。</p><p><code>Function</code>是JS自带的对象，f1,f2在创建的时候，JS会自动通过<code>new Function()</code>的方式来构建这些对象，因此，<strong>这三个对象都是通过new Function()创建的。</strong></p><p>在Javascript中创建对象有两种方式：<code>对象字面量</code>和<code>使用new表达式</code>，o1和o2的创建恰好对应了这两种方式，重点讲一下o3, 如果用Java和C#的思路来理解的话，o3是f1的实例对象，o3和f1是同一类型，至少我以前这么认为，其实不然…</p><p>那么怎么理解呢? 很简单，看o3是不是通过new Function产生的, 显然不是，既然不是函数对象，那就是普通对象 。</p><p>通过对函数对象和普通对象的简单理解之后，我们再来了解一下Javascript中的<code>原型</code>和<code>原型链</code>：</p><p>在JS中，<strong>每当创建一个函数对象f1 时，该对象中都会内置一些属性</strong>，其中包括<code>prototype</code>和<code>__proto__</code>,  <strong>prototype即原型对象</strong>，它记录着f1的一些属性和方法。</p><p>需要注意的是，prototype 对f1是不可见的，也就是说，<strong>f1不会查找prototype中的属性和方法。</strong> </p><pre><code>function f(){} f.prototype.foo = &quot;abc&quot;; console.log(f.foo); //undefined</code></pre><p>那么，prototype有什么用呢？ 其实<strong>prototype的主要作用就是继承</strong>。 通俗一点讲，<strong>prototype中定义的属性和方法都是留给自己的“后代”用的，因此，子类完全可以访问prototype中的属性和方法。</strong></p><p>想要知道f1是如何把prototype留给“后代”，我们需要了解一下JS中的原型链，此时，JS中的<code>__proto__</code> 入场了，这哥们长的很奇特，隐藏的也很深，以致于你经常见不到它，但它在普通对象和函数对象中都存在， <strong>它的作用就是保存父类的prototype对象</strong>，JS在通过new 表达式创建一个对象的时候，<strong>通常会把父类的prototype赋值给新对象的<strong>proto</strong>属性</strong>，这样，就形成了一代代传承…</p><pre><code>function f(){}f.prototype.foo = &quot;abc&quot;;var obj = new f();console.log(obj.foo); //abc</code></pre><p>现在我们知道，obj中<strong>proto</strong>保存的是f的prototype,那么f的prototype中的<strong>proto</strong>中保存的是什么呢? 看下图：<br><img src="http://images2015.cnblogs.com/blog/849589/201512/849589-20151207010715542-823199101.png" alt="此处输入图片的描述"></p><p>如图所示，f.prototype的<strong>proto</strong>中保存的是Object.prototype，Object.prototype对象中也有<strong>proto</strong>，而从输出结果看，Object.prototype.<strong>proto</strong> 是null，表示obj对象原型链的终结。如下图所示：</p><p><img src="http://images2015.cnblogs.com/blog/849589/201512/849589-20151207012900401-295187860.png" alt="此处输入图片的描述"></p><p>obj对象拥有这样一个原型链以后，当obj.foo执行时，obj会先查找自身是否有该属性，但不会查找自己的prototype,当找不到foo时，obj就沿着原型链依次去查找…</p><p>在上面的例子中，我们在f的prototype上定义了foo属性，这时obj就会在原型链上找到这个属性并执行。 </p><p>最后，用几句话总结一下本文中涉及到的<code>重点</code>：</p><ul><li>原型链的形成真正是靠<code>__proto__</code> 而非prototype</li><li><p><strong>当JS引擎执行对象的方法时，先查找对象本身是否存在该方法，如果不存在，会在原型链上查找，但不会查找自身的prototype。</strong><br><strong>一个对象的<strong>proto</strong>记录着自己的原型链，决定了自身的数据类型，改变<strong>proto</strong>就等于改变对象的数据类型。</strong></p></li><li><p>函数的<code>prototype</code>不属于自身的原型链，它是子类创建的核心，决定了子类的数据类型，<strong>是连接子类原型链的桥梁</strong>。</p></li><li><p>在原型对象上定义方法和属性的目的是为了被子类继承和使用。</p></li></ul><p>来源：<a href="http://www.cnblogs.com/onepixel/p/5024903.html" target="_blank" rel="noopener">@一像素</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/JS-之函数原型链(1)/">http://jaymo666.github.io/2017/06/20/JS-之函数原型链(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 原型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>R入门</title>
      <link href="/2017/06/20/R%E5%85%A5%E9%97%A8(1)/"/>
      <content type="html"><![CDATA[<p>一门可视化语言<br><a id="more"></a><br><strong>安装包</strong>（例如在RStudio中国安装caret包）</p><p><code>install.packages(&quot;caret&quot;)</code></p><p><strong>使用引入包</strong></p><pre><code>library(caret)</code></pre><p><strong>数据对象的5种基本类型：</strong><br>字符（character）、数值（numeric：real numbers）、整数（integer）、复数（complex）、逻辑（logical：True/False)</p><p>x&lt;-1数值<br>x&lt;-1L 整数（后面加L）<br>逻辑（TRUE和FALSE要用大写）</p><p><strong>数据结构：</strong><br>向量（Vector）：只能包含同一类型的对象<br>矩阵（Matrix）：向量+维度属性<br>数组（array）：相当于维度大于2的矩阵（矩阵的维度等于2）<br>列表（list）：可以包含不同类型的对象<br>因子(factor):分类数据/有序vs无序    整数向量+标签（label）（优于整数向量）<br>缺失值（missing value):<br>数据框（data frame）（表格）：数据框是R里面最重要的数据对象，<br>日期与时间：</p><p><strong>par()</strong>——数据可视化的起点</p><!--PC和WAP自适应版--><p><div id="SOHUCS" sid="SourceID"></div> </p><p><script type="text/javascript"><br>(function(){<br>var appid = ‘cysmzRdbl’;<br>var conf = ‘prod_7c789e58c2fd9306e64aff79a862b4df’;<br>var width = window.innerWidth || document.documentElement.clientWidth;<br>if (width &lt; 960) {<br>window.document.write(‘<script id="changyan_mobile_js" charset="utf-8" type="text/javascript" src="https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '">&lt;\/script&gt;’); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(“head”)[0]||document.head||document.documentElement;var b=document.createElement(“script”);b.setAttribute(“type”,”text/javascript”);b.setAttribute(“charset”,”UTF-8”);b.setAttribute(“src”,d);if(typeof a===”function”){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===”loaded”||e===”complete”){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(“<a href="https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})">https://changyan.sohu.com/upload/changyan.js&quot;,function(){window.changyan.api.config({appid:appid,conf:conf})})</a>; } })(); </script></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/R入门(1)/">http://jaymo666.github.io/2017/06/20/R入门(1)/</a></p>]]></content>
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初级 </tag>
            
            <tag> 可视化 </tag>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS 之函数原型链</title>
      <link href="/2017/06/20/JS-%E4%B9%8B%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <content type="html"><![CDATA[<p>在Javascript中，万物皆对象，但对象也有区别，大致可以分为两类，即：普通对象Object 和 函数对象Function。<br>一般而言，通过new Function产生的对象是函数对象，其他对象都是普通对象。<br><a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28285910&auto=0&height=66"></iframe><blockquote><p><strong>JS原型对象和原型链</strong></p></blockquote><p>一般而言，<strong>通过new Function产生的对象是函数对象，其他对象都是普通对象。</strong><br>栗子：</p><pre><code>function f1(){    //todo}var f2 = function(){    //todo};var f3 = new Function(&apos;x&apos;,&apos;console.log(x)&apos;);var o1 = {};var o2 = new Object();var o3 = new f1();console.log(    typeof f1,//function    typeof f2,//function    typeof f3,//function    typeof o1,//object    typeof o2,//object    typeof o3 //object);&gt;&gt; function function function object object object</code></pre><p>f1属于函数的声明，最常见的函数定义方式，f2实际上是一个匿名函数，把这个匿名函数赋值给了f2,属于函数表达式，f3不常见，但也是一种函数对象。f1属于函数的声明，最常见的函数定义方式，f2实际上是一个匿名函数，把这个匿名函数赋值给了f2,属于函数表达式，f3不常见，但也是一种函数对象。</p><p><code>Function</code>是JS自带的对象，f1,f2在创建的时候，JS会自动通过<code>new Function()</code>的方式来构建这些对象，因此，<strong>这三个对象都是通过new Function()创建的。</strong></p><p>在Javascript中创建对象有两种方式：<code>对象字面量</code>和<code>使用new表达式</code>，o1和o2的创建恰好对应了这两种方式，重点讲一下o3, 如果用Java和C#的思路来理解的话，o3是f1的实例对象，o3和f1是同一类型，至少我以前这么认为，其实不然…</p><p>那么怎么理解呢? 很简单，看o3是不是通过new Function产生的, 显然不是，既然不是函数对象，那就是普通对象 。</p><p>通过对函数对象和普通对象的简单理解之后，我们再来了解一下Javascript中的<code>原型</code>和<code>原型链</code>：</p><p>在JS中，<strong>每当创建一个函数对象f1 时，该对象中都会内置一些属性</strong>，其中包括<code>prototype</code>和<code>__proto__</code>,  <strong>prototype即原型对象</strong>，它记录着f1的一些属性和方法。</p><p>需要注意的是，prototype 对f1是不可见的，也就是说，<strong>f1不会查找prototype中的属性和方法。</strong> </p><pre><code>function f(){} f.prototype.foo = &quot;abc&quot;; console.log(f.foo); //undefined</code></pre><p>那么，prototype有什么用呢？ 其实<strong>prototype的主要作用就是继承</strong>。 通俗一点讲，<strong>prototype中定义的属性和方法都是留给自己的“后代”用的，因此，子类完全可以访问prototype中的属性和方法。</strong></p><p>想要知道f1是如何把prototype留给“后代”，我们需要了解一下JS中的原型链，此时，JS中的<code>__proto__</code> 入场了，这哥们长的很奇特，隐藏的也很深，以致于你经常见不到它，但它在普通对象和函数对象中都存在， <strong>它的作用就是保存父类的prototype对象</strong>，JS在通过new 表达式创建一个对象的时候，<strong>通常会把父类的prototype赋值给新对象的<strong>proto</strong>属性</strong>，这样，就形成了一代代传承…</p><pre><code>function f(){}f.prototype.foo = &quot;abc&quot;;var obj = new f();console.log(obj.foo); //abc</code></pre><p>现在我们知道，obj中<strong>proto</strong>保存的是f的prototype,那么f的prototype中的<strong>proto</strong>中保存的是什么呢? 看下图：<br><img src="http://images2015.cnblogs.com/blog/849589/201512/849589-20151207010715542-823199101.png" alt="此处输入图片的描述"></p><p>如图所示，f.prototype的<strong>proto</strong>中保存的是Object.prototype，Object.prototype对象中也有<strong>proto</strong>，而从输出结果看，Object.prototype.<strong>proto</strong> 是null，表示obj对象原型链的终结。如下图所示：</p><p><img src="http://images2015.cnblogs.com/blog/849589/201512/849589-20151207012900401-295187860.png" alt="此处输入图片的描述"></p><p>obj对象拥有这样一个原型链以后，当obj.foo执行时，obj会先查找自身是否有该属性，但不会查找自己的prototype,当找不到foo时，obj就沿着原型链依次去查找…</p><p>在上面的例子中，我们在f的prototype上定义了foo属性，这时obj就会在原型链上找到这个属性并执行。 </p><p>最后，用几句话总结一下本文中涉及到的<code>重点</code>：</p><ul><li>原型链的形成真正是靠<code>__proto__</code> 而非prototype</li><li><p><strong>当JS引擎执行对象的方法时，先查找对象本身是否存在该方法，如果不存在，会在原型链上查找，但不会查找自身的prototype。</strong><br><strong>一个对象的<strong>proto</strong>记录着自己的原型链，决定了自身的数据类型，改变<strong>proto</strong>就等于改变对象的数据类型。</strong></p></li><li><p>函数的<code>prototype</code>不属于自身的原型链，它是子类创建的核心，决定了子类的数据类型，<strong>是连接子类原型链的桥梁</strong>。</p></li><li><p>在原型对象上定义方法和属性的目的是为了被子类继承和使用。</p></li></ul><p>来源：<a href="http://www.cnblogs.com/onepixel/p/5024903.html" target="_blank" rel="noopener">@一像素</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/JS-之函数原型链/">http://jaymo666.github.io/2017/06/20/JS-之函数原型链/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 原型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS之函数作用域</title>
      <link href="/2017/06/20/JS%E4%B9%8B%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F(1)/"/>
      <content type="html"><![CDATA[<p>所谓作用域就是：变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=31445772&auto=1&height=66"></iframe><blockquote><p><strong>函数作用域和作用域链</strong></p></blockquote><h2 id="1、作用域"><a href="#1、作用域" class="headerlink" title="1、作用域"></a>1、作用域</h2><p>所谓作用域就是：变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。</p><pre><code>function scope(){    var foo = &quot;global&quot;;    if(window.getComputedStyle){        var a = &quot;I&apos;m if&quot;;        console.log(&quot;if:&quot;+foo); //if:global    }    while(1){        var b = &quot;I&apos;m while&quot;;        console.log(&quot;while:&quot;+foo);//while:global        break;    }    !function (){        var c = &quot;I&apos;m function&quot;;        console.log(&quot;function:&quot;+foo);//function:global    }();    console.log(         foo,//global         a, // I&apos;m if         b, // I&apos;m while         c  // c is not defined    );}scope();</code></pre><p>（1）scope函数中定义的foo变量，除过自身可以访问以外，还可以在if语句、while语句和内嵌的匿名函数中访问。 因此，foo的作用域就是scope函数体。</p><p>（2）在javascript中，if、while、for 等代码块不能形成独立的作用域。因此，<strong>javascript中没有块级作用域，只有函数作用域。</strong></p><blockquote><p>但是，在JS中有一种特殊情况：</p></blockquote><p> 如果一个变量没有使用var声明，window便拥有了该属性，因此这个变量的作用域不属于某一个函数体,而是window对象。</p><pre><code>function varscope(){    foo = &quot;I&apos;m in function&quot;;    console.log(foo);//I&apos;m in function}varscope();console.log(window.foo); //I&apos;m in function</code></pre><h2 id="2、作用域链"><a href="#2、作用域链" class="headerlink" title="2、作用域链"></a>2、作用域链</h2><p>所谓作用域链就是：一个函数体中嵌套了多层函数体，并在不同的函数体中定义了同一变量， 当其中一个函数访问这个变量时，便会形成一条作用域链。</p><pre><code>foo = &quot;window&quot;;function first(){    var foo = &quot;first&quot;;    function second(){       var foo = &quot;second&quot;;       console.log(foo);    }    function third(){       console.log(foo);    }    second(); //second    third();  //first}first();</code></pre><p>当执行second时，JS引擎会将second的作用域放置链表的头部，其次是first的作用域，最后是window对象，于是会形成如下作用域链：</p><p>second-&gt;first-&gt;window,  此时，JS引擎沿着该作用域链查找变量foo, 查到的是 second</p><p>当执行third时，third形成的作用域链：third-&gt;first-&gt;window, 因此查到的是：frist</p><h2 id="3、作用域的延长：with-和-catch"><a href="#3、作用域的延长：with-和-catch" class="headerlink" title="3、作用域的延长：with 和 catch"></a>3、作用域的延长：with 和 catch</h2><p><strong>with和catch语句主要用来临时扩展作用域链</strong>， 将语句中传递的变量对象添加到作用域的头部。语句结束后，原作用域链恢复正常。</p><pre><code>//with语句foo = &quot;window&quot;;function first(){    var foo = &quot;first&quot;;    function second(){       var foo = &quot;second&quot;;       console.log(foo);    }    function third(obj){       console.log(foo); //first       with (obj){           console.log(foo); //obj       }       console.log(foo); //first    }    var obj = {foo:&apos;obj&apos;};    third(obj);}first();//catch语句var e = new Error(&apos;a&apos;);try {    throw new Error(&apos;b&apos;);} catch (e) {    console.log(e.message); //b}　</code></pre><p>在执行third()时，传递了一个obj对象，obj 中有属性foo, 在执行with语句时，JS引擎将obj放置在了原链表的头部，于是形成的作用域链如下：</p><p>obj-&gt;third-&gt;first-&gt;window, 此时查找到的foo就是obj中的foo,因此输出的是 obj</p><p>而在with之前和之后，都是沿着原来的链表进行查找，从而说明在with语句结束后，作用域链已恢复正常。</p><h2 id="4、this-关键字"><a href="#4、this-关键字" class="headerlink" title="4、this 关键字"></a>4、this 关键字</h2><pre><code> 在一个函数中，this总是指向当前函数的所有者对象，this总是在运行时才能确定其具体的指向, 也才能知道它的调用对象。window.name = &quot;window&quot;;function f(){    console.log(this.name);}f();//windowvar obj = {name:&apos;obj&apos;};f.call(obj); //obj</code></pre><p>在执行f()时，此时f()的调用者是window对象，因此输出 window </p><p>f.call(obj) 是把f()放在obj对象上执行，相当于obj.f(),此时f 中的this就是obj,所以输出的是 obj</p><h2 id="5、实战应用"><a href="#5、实战应用" class="headerlink" title="5、实战应用"></a>5、实战应用</h2><pre><code>//demo1var foo = &quot;window&quot;;var obj = {    foo : &quot;obj&quot;,    getFoo : function(){        return function(){            return this.foo;        };    }};var f = obj.getFoo();f(); //window//demo2var foo = &quot;window&quot;;var obj = {    foo : &quot;obj&quot;,    getFoo : function(){        var that = this;        return function(){            return that.foo;        };    }};var f = obj.getFoo();f(); //obj</code></pre><h2 id="6、demo解析"><a href="#6、demo解析" class="headerlink" title="6、demo解析"></a>6、demo解析</h2><pre><code>//demo1://执行var  f = obj.getFoo()返回的是一个匿名函数，相当于:var f = function(){     return this.foo;}//f() 相当于window.f(), 因此f中的this指向的是window对象，this.foo相当于window.foo, 所以f()返回&quot;window&quot;//demo2://执行var f = obj.getFoo() 同样返回匿名函数，即：var f = function(){     return that.foo;}//唯一不同的是f中的this变成了that, 要知道that是哪个对象之前，先确定f的作用域链：f-&gt;getFoo-&gt;window 并在该链条上查找that,//此时可以发现that指代的是getFoo中的this, getFoo中的this指向其运行时的调用者，//从var f = obj.getFoo() 可知此时this指向的是obj对象，因此that.foo 就相当于obj.foo,所以f()返回&quot;obj&quot;</code></pre><p>所以：</p><ul><li><strong>this是指向window,</strong></li><li><strong>that就是执行obj.getFoo()时的this, 调用getFoo()的对象是obj,因此这里的this就指的是obj</strong></li></ul><p>来源：<a href="http://www.cnblogs.com/onepixel/p/5036369.html" target="_blank" rel="noopener">一像素</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/JS之函数作用域(1)/">http://jaymo666.github.io/2017/06/20/JS之函数作用域(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS之函数作用域</title>
      <link href="/2017/06/20/JS%E4%B9%8B%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <content type="html"><![CDATA[<p>所谓作用域就是：变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。<a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=31445772&auto=1&height=66"></iframe><blockquote><p><strong>函数作用域和作用域链</strong></p></blockquote><h2 id="1、作用域"><a href="#1、作用域" class="headerlink" title="1、作用域"></a>1、作用域</h2><p>所谓作用域就是：变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。</p><pre><code>function scope(){    var foo = &quot;global&quot;;    if(window.getComputedStyle){        var a = &quot;I&apos;m if&quot;;        console.log(&quot;if:&quot;+foo); //if:global    }    while(1){        var b = &quot;I&apos;m while&quot;;        console.log(&quot;while:&quot;+foo);//while:global        break;    }    !function (){        var c = &quot;I&apos;m function&quot;;        console.log(&quot;function:&quot;+foo);//function:global    }();    console.log(         foo,//global         a, // I&apos;m if         b, // I&apos;m while         c  // c is not defined    );}scope();</code></pre><p>（1）scope函数中定义的foo变量，除过自身可以访问以外，还可以在if语句、while语句和内嵌的匿名函数中访问。 因此，foo的作用域就是scope函数体。</p><p>（2）在javascript中，if、while、for 等代码块不能形成独立的作用域。因此，<strong>javascript中没有块级作用域，只有函数作用域。</strong></p><blockquote><p>但是，在JS中有一种特殊情况：</p></blockquote><p> 如果一个变量没有使用var声明，window便拥有了该属性，因此这个变量的作用域不属于某一个函数体,而是window对象。</p><pre><code>function varscope(){    foo = &quot;I&apos;m in function&quot;;    console.log(foo);//I&apos;m in function}varscope();console.log(window.foo); //I&apos;m in function</code></pre><h2 id="2、作用域链"><a href="#2、作用域链" class="headerlink" title="2、作用域链"></a>2、作用域链</h2><p>所谓作用域链就是：一个函数体中嵌套了多层函数体，并在不同的函数体中定义了同一变量， 当其中一个函数访问这个变量时，便会形成一条作用域链。</p><pre><code>foo = &quot;window&quot;;function first(){    var foo = &quot;first&quot;;    function second(){       var foo = &quot;second&quot;;       console.log(foo);    }    function third(){       console.log(foo);    }    second(); //second    third();  //first}first();</code></pre><p>当执行second时，JS引擎会将second的作用域放置链表的头部，其次是first的作用域，最后是window对象，于是会形成如下作用域链：</p><p>second-&gt;first-&gt;window,  此时，JS引擎沿着该作用域链查找变量foo, 查到的是 second</p><p>当执行third时，third形成的作用域链：third-&gt;first-&gt;window, 因此查到的是：frist</p><h2 id="3、作用域的延长：with-和-catch"><a href="#3、作用域的延长：with-和-catch" class="headerlink" title="3、作用域的延长：with 和 catch"></a>3、作用域的延长：with 和 catch</h2><p><strong>with和catch语句主要用来临时扩展作用域链</strong>， 将语句中传递的变量对象添加到作用域的头部。语句结束后，原作用域链恢复正常。</p><pre><code>//with语句foo = &quot;window&quot;;function first(){    var foo = &quot;first&quot;;    function second(){       var foo = &quot;second&quot;;       console.log(foo);    }    function third(obj){       console.log(foo); //first       with (obj){           console.log(foo); //obj       }       console.log(foo); //first    }    var obj = {foo:&apos;obj&apos;};    third(obj);}first();//catch语句var e = new Error(&apos;a&apos;);try {    throw new Error(&apos;b&apos;);} catch (e) {    console.log(e.message); //b}　</code></pre><p>在执行third()时，传递了一个obj对象，obj 中有属性foo, 在执行with语句时，JS引擎将obj放置在了原链表的头部，于是形成的作用域链如下：</p><p>obj-&gt;third-&gt;first-&gt;window, 此时查找到的foo就是obj中的foo,因此输出的是 obj</p><p>而在with之前和之后，都是沿着原来的链表进行查找，从而说明在with语句结束后，作用域链已恢复正常。</p><h2 id="4、this-关键字"><a href="#4、this-关键字" class="headerlink" title="4、this 关键字"></a>4、this 关键字</h2><pre><code> 在一个函数中，this总是指向当前函数的所有者对象，this总是在运行时才能确定其具体的指向, 也才能知道它的调用对象。window.name = &quot;window&quot;;function f(){    console.log(this.name);}f();//windowvar obj = {name:&apos;obj&apos;};f.call(obj); //obj</code></pre><p>在执行f()时，此时f()的调用者是window对象，因此输出 window </p><p>f.call(obj) 是把f()放在obj对象上执行，相当于obj.f(),此时f 中的this就是obj,所以输出的是 obj</p><h2 id="5、实战应用"><a href="#5、实战应用" class="headerlink" title="5、实战应用"></a>5、实战应用</h2><pre><code>//demo1var foo = &quot;window&quot;;var obj = {    foo : &quot;obj&quot;,    getFoo : function(){        return function(){            return this.foo;        };    }};var f = obj.getFoo();f(); //window//demo2var foo = &quot;window&quot;;var obj = {    foo : &quot;obj&quot;,    getFoo : function(){        var that = this;        return function(){            return that.foo;        };    }};var f = obj.getFoo();f(); //obj</code></pre><h2 id="6、demo解析"><a href="#6、demo解析" class="headerlink" title="6、demo解析"></a>6、demo解析</h2><pre><code>//demo1://执行var  f = obj.getFoo()返回的是一个匿名函数，相当于:var f = function(){     return this.foo;}//f() 相当于window.f(), 因此f中的this指向的是window对象，this.foo相当于window.foo, 所以f()返回&quot;window&quot;//demo2://执行var f = obj.getFoo() 同样返回匿名函数，即：var f = function(){     return that.foo;}//唯一不同的是f中的this变成了that, 要知道that是哪个对象之前，先确定f的作用域链：f-&gt;getFoo-&gt;window 并在该链条上查找that,//此时可以发现that指代的是getFoo中的this, getFoo中的this指向其运行时的调用者，//从var f = obj.getFoo() 可知此时this指向的是obj对象，因此that.foo 就相当于obj.foo,所以f()返回&quot;obj&quot;</code></pre><p>所以：</p><ul><li><strong>this是指向window,</strong></li><li><strong>that就是执行obj.getFoo()时的this, 调用getFoo()的对象是obj,因此这里的this就指的是obj</strong></li></ul><p>来源：<a href="http://www.cnblogs.com/onepixel/p/5036369.html" target="_blank" rel="noopener">一像素</a></p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/JS之函数作用域/">http://jaymo666.github.io/2017/06/20/JS之函数作用域/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>判断JS数据类型的四种方法</title>
      <link href="/2017/06/20/%E5%88%A4%E6%96%ADJS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <content type="html"><![CDATA[<p>Javascript可以通过typeof来判断基础数据类型，但不能够准确判断引用类型, 因此需要用到另外一个方法，那就是Object的toString <a id="more"></a><br>说到数据类型，我们先说一下JavaScript 中常见的几种数据类型：</p><blockquote><p>基本类型：string,number,boolean</p><p>特殊类型：undefined,null</p><p>引用类型：Object,Function,Function,Array,RegExp,Date,…</p></blockquote><p>很多时候我们都需要通过判断变量的数据类型来进行下一步操作，下面我们介绍常用的4种方法：</p><h2 id="1、typeof"><a href="#1、typeof" class="headerlink" title="1、typeof"></a>1、typeof</h2><p>typeof 返回一个表示数据类型的字符串，返回结果包括：number、boolean、string、object、undefined、function等6种数据类型。</p><pre><code>typeof &apos;&apos;; // string 有效typeof 1; // number 有效typeof true; //boolean 有效typeof undefined; //undefined 有效typeof null; //object 无效typeof [] ; //object 无效typeof new Function(); // function 有效typeof new Date(); //object 无效typeof new RegExp(); //object 无效</code></pre><blockquote><p>typeof 可以对JS基础数据类型做出准确的判断，而对于引用类型返回的基本上都是object,<br>其实返回object也没有错，因为所有对象的原型链最终都指向了Object,Object是所有对象的<code>祖宗</code>。<br>但当我们需要知道某个对象的具体类型时，typeof 就显得有些力不从心了</p></blockquote><h2 id="2、instanceof"><a href="#2、instanceof" class="headerlink" title="2、instanceof"></a>2、instanceof</h2><p>nstanceof 是用来判断 A 是否为 B 的实例对，表达式为：A instanceof B，如果A是B的实例，则返回true,否则返回false。 在这里需要特别注意的是：<strong>instanceof检测的是原型</strong>，我们用一段伪代码来模拟其内部执行过程：</p><pre><code>instanceof (A,B) = {    var L = A.__proto__;    var R = B.prototype;    if(L === R) {        //A的内部属性__proto__指向B的原型对象        return true;    }    return false;}</code></pre><p>上述过程可以看出，<strong>当 A 的 <strong>proto</strong> 指向 B 的 prototype</strong> 时，就认为A就是B的实例，我们再来看几个例子：</p><pre><code>[] instanceof Array; //true{} instanceof Object;//truenew Date() instanceof Date;//truefunction Person(){};new Person() instanceof Person;[] instanceof Object; //truenew Date() instanceof Object;//truenew Person instanceof Object;//true</code></pre><p>我们发现，虽然 instanceof 能够判断出 [] 是Array的实例，但它认为 [] 也是Object的实例，为什么呢？ 我们来分析一下[]、Array、Object 三者之间的关系: 从instanceof 能够判断出 [].<strong>proto</strong> 指向 Array.prototype， 而 Array.prototype.<strong>proto</strong> 又指向了Object.prototype，Object.prototype.<strong>proto</strong> 指向了null,标志着原型链的结束。因此，[]、Array、Object就形成了如下图所示的一条原型链：<br><img src="http://images2015.cnblogs.com/blog/849589/201601/849589-20160112232510850-2003340583.png" alt="此处输入图片的描述"><br>从原型链可以看出，[] 的 <strong>proto</strong>  直接指向Array.prototype, 间接指向Object.prototype, 所以按照 instanceof 的判断规则，[] 就是Object的实例。当然，类似的new Date()、new Person() 也会形成这样一条原型链，因此，instanceof 只能用来判断两个对象是否属于原型链的关系， 而不能获取对象的具体类型。</p><h2 id="3、constructor"><a href="#3、constructor" class="headerlink" title="3、constructor"></a>3、constructor</h2><p>当一个函数F被定义时，JS引擎会为F添加prototype原型，然后再在prototype上添加一个constructor属性，并让其指向F的引用。如下所示：<br><img src="http://images2015.cnblogs.com/blog/849589/201705/849589-20170508125250566-1896556617.png" alt="此处输入图片的描述"><br>当执行 var f = new F() 时，F被当成了构造函数，f是F的实例对象，此时F原型上的constructor传递到了f上，因此f.constructor == F<br><img src="http://images2015.cnblogs.com/blog/849589/201705/849589-20170508125714941-1649387639.png" alt="此处输入图片的描述"><br>可以看出，JS在函数F的原型上定义了constructor，当F被当作构造函数用来创建对象时，创建的新对象就被标记为了“F” 类型，使得新对象有名有姓，可以追溯。</p><p>同理,JS中的数据类型也遵守这个规则：<br><img src="http://images2015.cnblogs.com/blog/849589/201705/849589-20170508131800457-2091987664.png" alt="此处输入图片的描述"><br><strong>注意：</strong></p><pre><code>null和undefined是无效的对象，因此是不会有constructor存在的，这两种类型的数据需要通过typeof来判断。JS对象的constructor是不稳定的，这个主要体现在自定义对象上，当开发者重写prototype后，原有的constructor会丢失，constructor会默认为Object</code></pre><h2 id="4、Object-prototype-toString"><a href="#4、Object-prototype-toString" class="headerlink" title="4、Object.prototype.toString"></a>4、Object.prototype.toString</h2><pre><code>Object.prototype.toString.call(&apos;&apos;) ;   // [object String]Object.prototype.toString.call(1) ;    // [object Number]Object.prototype.toString.call(true) ; // [object Boolean]Object.prototype.toString.call(undefined) ; // [object Undefined]Object.prototype.toString.call(null) ; // [object Null]Object.prototype.toString.call(new Function()) ; // [object Function]Object.prototype.toString.call(new Date()) ; // [object Date]Object.prototype.toString.call([]) ; // [object Array]Object.prototype.toString.call(new RegExp()) ; // [object RegExp]Object.prototype.toString.call(new Error()) ; // [object Error]Object.prototype.toString.call(document) ; // [object HTMLDocument]Object.prototype.toString.call(window) ; //[object global] window是全局对象global的引用</code></pre><blockquote><p>需要注意的是，必须通过Object.prototype.toString.call来获取，而不能直接 new<br>Date().toString(), 从原型链的角度讲，所有对象的原型链最终都指向了Object,<br>按照JS变量查找规则，其他对象应该也可以直接访问到Object的toString方法，而事实上，大部分的对象都实现了自身的toString方法，这样就可能会导致Object的toString被终止查找，因此要用call来强制执行Object的toString方法。</p></blockquote><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/判断JS数据类型的四种方法/">http://jaymo666.github.io/2017/06/20/判断JS数据类型的四种方法/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 原型 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>判断JS数据类型的四种方法</title>
      <link href="/2017/06/20/%E5%88%A4%E6%96%ADJS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95(1)/"/>
      <content type="html"><![CDATA[<p>Javascript可以通过typeof来判断基础数据类型，但不能够准确判断引用类型, 因此需要用到另外一个方法，那就是Object的toString <a id="more"></a><br>说到数据类型，我们先说一下JavaScript 中常见的几种数据类型：</p><blockquote><p>基本类型：string,number,boolean</p><p>特殊类型：undefined,null</p><p>引用类型：Object,Function,Function,Array,RegExp,Date,…</p></blockquote><p>很多时候我们都需要通过判断变量的数据类型来进行下一步操作，下面我们介绍常用的4种方法：</p><h2 id="1、typeof"><a href="#1、typeof" class="headerlink" title="1、typeof"></a>1、typeof</h2><p>typeof 返回一个表示数据类型的字符串，返回结果包括：number、boolean、string、object、undefined、function等6种数据类型。</p><pre><code>typeof &apos;&apos;; // string 有效typeof 1; // number 有效typeof true; //boolean 有效typeof undefined; //undefined 有效typeof null; //object 无效typeof [] ; //object 无效typeof new Function(); // function 有效typeof new Date(); //object 无效typeof new RegExp(); //object 无效</code></pre><blockquote><p>typeof 可以对JS基础数据类型做出准确的判断，而对于引用类型返回的基本上都是object,<br>其实返回object也没有错，因为所有对象的原型链最终都指向了Object,Object是所有对象的<code>祖宗</code>。<br>但当我们需要知道某个对象的具体类型时，typeof 就显得有些力不从心了</p></blockquote><h2 id="2、instanceof"><a href="#2、instanceof" class="headerlink" title="2、instanceof"></a>2、instanceof</h2><p>nstanceof 是用来判断 A 是否为 B 的实例对，表达式为：A instanceof B，如果A是B的实例，则返回true,否则返回false。 在这里需要特别注意的是：<strong>instanceof检测的是原型</strong>，我们用一段伪代码来模拟其内部执行过程：</p><pre><code>instanceof (A,B) = {    var L = A.__proto__;    var R = B.prototype;    if(L === R) {        //A的内部属性__proto__指向B的原型对象        return true;    }    return false;}</code></pre><p>上述过程可以看出，<strong>当 A 的 <strong>proto</strong> 指向 B 的 prototype</strong> 时，就认为A就是B的实例，我们再来看几个例子：</p><pre><code>[] instanceof Array; //true{} instanceof Object;//truenew Date() instanceof Date;//truefunction Person(){};new Person() instanceof Person;[] instanceof Object; //truenew Date() instanceof Object;//truenew Person instanceof Object;//true</code></pre><p>我们发现，虽然 instanceof 能够判断出 [] 是Array的实例，但它认为 [] 也是Object的实例，为什么呢？ 我们来分析一下[]、Array、Object 三者之间的关系: 从instanceof 能够判断出 [].<strong>proto</strong> 指向 Array.prototype， 而 Array.prototype.<strong>proto</strong> 又指向了Object.prototype，Object.prototype.<strong>proto</strong> 指向了null,标志着原型链的结束。因此，[]、Array、Object就形成了如下图所示的一条原型链：<br><img src="http://images2015.cnblogs.com/blog/849589/201601/849589-20160112232510850-2003340583.png" alt="此处输入图片的描述"><br>从原型链可以看出，[] 的 <strong>proto</strong>  直接指向Array.prototype, 间接指向Object.prototype, 所以按照 instanceof 的判断规则，[] 就是Object的实例。当然，类似的new Date()、new Person() 也会形成这样一条原型链，因此，instanceof 只能用来判断两个对象是否属于原型链的关系， 而不能获取对象的具体类型。</p><h2 id="3、constructor"><a href="#3、constructor" class="headerlink" title="3、constructor"></a>3、constructor</h2><p>当一个函数F被定义时，JS引擎会为F添加prototype原型，然后再在prototype上添加一个constructor属性，并让其指向F的引用。如下所示：<br><img src="http://images2015.cnblogs.com/blog/849589/201705/849589-20170508125250566-1896556617.png" alt="此处输入图片的描述"><br>当执行 var f = new F() 时，F被当成了构造函数，f是F的实例对象，此时F原型上的constructor传递到了f上，因此f.constructor == F<br><img src="http://images2015.cnblogs.com/blog/849589/201705/849589-20170508125714941-1649387639.png" alt="此处输入图片的描述"><br>可以看出，JS在函数F的原型上定义了constructor，当F被当作构造函数用来创建对象时，创建的新对象就被标记为了“F” 类型，使得新对象有名有姓，可以追溯。</p><p>同理,JS中的数据类型也遵守这个规则：<br><img src="http://images2015.cnblogs.com/blog/849589/201705/849589-20170508131800457-2091987664.png" alt="此处输入图片的描述"><br><strong>注意：</strong></p><pre><code>null和undefined是无效的对象，因此是不会有constructor存在的，这两种类型的数据需要通过typeof来判断。JS对象的constructor是不稳定的，这个主要体现在自定义对象上，当开发者重写prototype后，原有的constructor会丢失，constructor会默认为Object</code></pre><h2 id="4、Object-prototype-toString"><a href="#4、Object-prototype-toString" class="headerlink" title="4、Object.prototype.toString"></a>4、Object.prototype.toString</h2><pre><code>Object.prototype.toString.call(&apos;&apos;) ;   // [object String]Object.prototype.toString.call(1) ;    // [object Number]Object.prototype.toString.call(true) ; // [object Boolean]Object.prototype.toString.call(undefined) ; // [object Undefined]Object.prototype.toString.call(null) ; // [object Null]Object.prototype.toString.call(new Function()) ; // [object Function]Object.prototype.toString.call(new Date()) ; // [object Date]Object.prototype.toString.call([]) ; // [object Array]Object.prototype.toString.call(new RegExp()) ; // [object RegExp]Object.prototype.toString.call(new Error()) ; // [object Error]Object.prototype.toString.call(document) ; // [object HTMLDocument]Object.prototype.toString.call(window) ; //[object global] window是全局对象global的引用</code></pre><blockquote><p>需要注意的是，必须通过Object.prototype.toString.call来获取，而不能直接 new<br>Date().toString(), 从原型链的角度讲，所有对象的原型链最终都指向了Object,<br>按照JS变量查找规则，其他对象应该也可以直接访问到Object的toString方法，而事实上，大部分的对象都实现了自身的toString方法，这样就可能会导致Object的toString被终止查找，因此要用call来强制执行Object的toString方法。</p></blockquote><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/判断JS数据类型的四种方法(1)/">http://jaymo666.github.io/2017/06/20/判断JS数据类型的四种方法(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 原型 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS之数据类型详解</title>
      <link href="/2017/06/20/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h1 id="Javascript中的数据类型有以下几种情况："><a href="#Javascript中的数据类型有以下几种情况：" class="headerlink" title="Javascript中的数据类型有以下几种情况："></a>Javascript中的数据类型有以下几种情况：</h1><p>基本类型：string,number,boolean<br>特殊类型：undefined,null<br>引用类型：Object,Function,Date,Array,RegExp, …<a id="more"></a></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28285910&auto=0&height=66"></iframe><br>Javascript中的<code>数据类型</code>有以下几种情况：</p><ul><li>基本类型：string,number,boolean</li><li>特殊类型：undefined,null</li><li>引用类型：Object,Function,Date,Array,RegExp, …</li></ul><h2 id="1、string"><a href="#1、string" class="headerlink" title="1、string"></a>1、string</h2><p>string类型的数据是由16位Unicode字符组成的字符串，用typeof检测其数据类型如下：</p><pre><code>var str = &quot;Hi, Javascript&quot;;console.log(typeof str); // string</code></pre><blockquote><p>在Javascript中，除过undefined和null之外的其他的数据类型都有toString()方法，因此这些数据类型都可以通过<code>toString</code>方法转化为对应的string类型</p></blockquote><pre><code>123..toString(); // &quot;123&quot;,注意有两个..true.toString(); // &quot;true&quot;new Object().toString(); // [object Object]&quot;Hello&quot;.toString(); //  &quot;Hello&quot;undefined.toString(); // Errornull.toString(); // Error</code></pre><p>一般情况下，toString不需要传递参数，而将数值转化为字符串时，通过传递一个radix参数，可以将数值转化为对应的二进制、八进制和十六进制的字符串表示。</p><h2 id="2、number"><a href="#2、number" class="headerlink" title="2、number"></a>2、number</h2><p>在Javascript中，没有int和float数据类型，而是用<code>number</code>来表示整数和浮点数值，除此之外，number还有一个特殊的数值，即NaN (Not a Number)，NaN<br><strong>表示一个承诺返回数值类型数据但实际没有返回的情况.</strong> NaN有两个特点：一是任何涉及NaN的操作都会返回NaN，二是NaN不与任何数值相等，包括自己，但可以通过isNaN()方法来判断一个数值是否为NaN</p><pre><code>typeof 123; // &quot;number&quot;typeof 123.45 // &quot;number&quot;typeof NaN; // &quot;number&quot;NaN+1; // NaNNaN == false; // falseNaN == NaN; //falseisNaN(NaN+1); //true</code></pre><h2 id="3、boolean"><a href="#3、boolean" class="headerlink" title="3、boolean"></a>3、boolean</h2><p>boolean类型只有两个字面值：true和false 。 但在Javascript中，所有类型的值都可以转化为与boolean等价的值，转化规则如下：<br>（1）所有对象都被当作 true<br>（2）当字符串为空时，该字符串被当作false<br>（3）null 和 undefined 被当作 false<br>（4）当数字为0时，该数字被当作 false</p><pre><code>typeof true; // &quot;boolean&quot;typeof false; // &quot;boolean&quot;Boolean(new Object()); //trueBoolean(undefined); //falseBoolean(null); //falseBoolean(&apos;&apos;); //falseBoolean(0); //falseBoolean(100); // true</code></pre><h2 id="4、undefined"><a href="#4、undefined" class="headerlink" title="4、undefined"></a>4、undefined</h2><p>该类型只有一个值，即 undefined。 undefined意为<code>未定义</code>，即当使用var声明了变量但未进行赋值时，这个变量的值就是undefined。undefined产生的原因有两种：<br>（1）访问对象不存在的属性或方法</p><p>（2）声明了变量但从未赋值</p><pre><code>var v1,obj = {};console.log(v1); //undefinedconsole.log(obj.get); //undefinedtypeof v1; // &quot;undefined&quot;typeof v2; // &quot;undefined&quot;typeof obj.get; // &quot;undefined&quot;</code></pre><h2 id="5、null"><a href="#5、null" class="headerlink" title="5、null"></a>5、null</h2><p>null类型也只有一个值：null , 表示一个变量中没有包含有效数据。null在这里意为<code>空值</code>、<code>空对象</code>的意思，更确切的说，一个被赋值为null的变量没有保存有效的数值、字符串、布尔、数组或对象等，可以通过给一个变量赋值为null来清空变量中的内容。产生null的原因只有一个：<strong>即对一个变量显式的赋值为null 。</strong></p><pre><code>var p = null;console.log(p); //nulltypeof p ; // &quot;object&quot;typeof null; // &quot;object&quot;</code></pre><p>另外，需要注意的是，typeof null 应该返回<code>null</code>，但实际上返回的是<code>object</code>，这是一个历史遗留问题，并没有其他原因。</p><h2 id="6、Object-Function-Array-Date-RegExp"><a href="#6、Object-Function-Array-Date-RegExp" class="headerlink" title="6、Object,Function,Array,Date,RegExp"></a>6、Object,Function,Array,Date,RegExp</h2><p>这些对象在JS中都属于引用类型, 除Function之外，通过typeof检测其数据类型返回的都是object, 如果要判断对应的具体类型，则可以通过<code>Object.prototype.toString</code>来获取。</p><pre><code>var a = {};var b = new Function();var c = [];var d = new Date();var e = new RegExp();typeof a;  //object  有效Object.prototype.toString.call(a); //[object Object]typeof b;  //function 有效Object.prototype.toString.call(b); //[object Object]typeof c;  //object 无效Object.prototype.toString.call(c);//[object Array]typeof d;  //object 无效Object.prototype.toString.call(d);//[object Date]typeof e;  //object 无效Object.prototype.toString.call(e);//[object RegExp]</code></pre><blockquote><p>另外，ES6中新增了symbol这个类型: typeof Symbol()</p></blockquote><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/JS之数据类型详解/">http://jaymo666.github.io/2017/06/20/JS之数据类型详解/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS之数据类型详解</title>
      <link href="/2017/06/20/JS%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3(1)/"/>
      <content type="html"><![CDATA[<h1 id="Javascript中的数据类型有以下几种情况："><a href="#Javascript中的数据类型有以下几种情况：" class="headerlink" title="Javascript中的数据类型有以下几种情况："></a>Javascript中的数据类型有以下几种情况：</h1><p>基本类型：string,number,boolean<br>特殊类型：undefined,null<br>引用类型：Object,Function,Date,Array,RegExp, …<a id="more"></a></p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28285910&auto=0&height=66"></iframe><br>Javascript中的<code>数据类型</code>有以下几种情况：</p><ul><li>基本类型：string,number,boolean</li><li>特殊类型：undefined,null</li><li>引用类型：Object,Function,Date,Array,RegExp, …</li></ul><h2 id="1、string"><a href="#1、string" class="headerlink" title="1、string"></a>1、string</h2><p>string类型的数据是由16位Unicode字符组成的字符串，用typeof检测其数据类型如下：</p><pre><code>var str = &quot;Hi, Javascript&quot;;console.log(typeof str); // string</code></pre><blockquote><p>在Javascript中，除过undefined和null之外的其他的数据类型都有toString()方法，因此这些数据类型都可以通过<code>toString</code>方法转化为对应的string类型</p></blockquote><pre><code>123..toString(); // &quot;123&quot;,注意有两个..true.toString(); // &quot;true&quot;new Object().toString(); // [object Object]&quot;Hello&quot;.toString(); //  &quot;Hello&quot;undefined.toString(); // Errornull.toString(); // Error</code></pre><p>一般情况下，toString不需要传递参数，而将数值转化为字符串时，通过传递一个radix参数，可以将数值转化为对应的二进制、八进制和十六进制的字符串表示。</p><h2 id="2、number"><a href="#2、number" class="headerlink" title="2、number"></a>2、number</h2><p>在Javascript中，没有int和float数据类型，而是用<code>number</code>来表示整数和浮点数值，除此之外，number还有一个特殊的数值，即NaN (Not a Number)，NaN<br><strong>表示一个承诺返回数值类型数据但实际没有返回的情况.</strong> NaN有两个特点：一是任何涉及NaN的操作都会返回NaN，二是NaN不与任何数值相等，包括自己，但可以通过isNaN()方法来判断一个数值是否为NaN</p><pre><code>typeof 123; // &quot;number&quot;typeof 123.45 // &quot;number&quot;typeof NaN; // &quot;number&quot;NaN+1; // NaNNaN == false; // falseNaN == NaN; //falseisNaN(NaN+1); //true</code></pre><h2 id="3、boolean"><a href="#3、boolean" class="headerlink" title="3、boolean"></a>3、boolean</h2><p>boolean类型只有两个字面值：true和false 。 但在Javascript中，所有类型的值都可以转化为与boolean等价的值，转化规则如下：<br>（1）所有对象都被当作 true<br>（2）当字符串为空时，该字符串被当作false<br>（3）null 和 undefined 被当作 false<br>（4）当数字为0时，该数字被当作 false</p><pre><code>typeof true; // &quot;boolean&quot;typeof false; // &quot;boolean&quot;Boolean(new Object()); //trueBoolean(undefined); //falseBoolean(null); //falseBoolean(&apos;&apos;); //falseBoolean(0); //falseBoolean(100); // true</code></pre><h2 id="4、undefined"><a href="#4、undefined" class="headerlink" title="4、undefined"></a>4、undefined</h2><p>该类型只有一个值，即 undefined。 undefined意为<code>未定义</code>，即当使用var声明了变量但未进行赋值时，这个变量的值就是undefined。undefined产生的原因有两种：<br>（1）访问对象不存在的属性或方法</p><p>（2）声明了变量但从未赋值</p><pre><code>var v1,obj = {};console.log(v1); //undefinedconsole.log(obj.get); //undefinedtypeof v1; // &quot;undefined&quot;typeof v2; // &quot;undefined&quot;typeof obj.get; // &quot;undefined&quot;</code></pre><h2 id="5、null"><a href="#5、null" class="headerlink" title="5、null"></a>5、null</h2><p>null类型也只有一个值：null , 表示一个变量中没有包含有效数据。null在这里意为<code>空值</code>、<code>空对象</code>的意思，更确切的说，一个被赋值为null的变量没有保存有效的数值、字符串、布尔、数组或对象等，可以通过给一个变量赋值为null来清空变量中的内容。产生null的原因只有一个：<strong>即对一个变量显式的赋值为null 。</strong></p><pre><code>var p = null;console.log(p); //nulltypeof p ; // &quot;object&quot;typeof null; // &quot;object&quot;</code></pre><p>另外，需要注意的是，typeof null 应该返回<code>null</code>，但实际上返回的是<code>object</code>，这是一个历史遗留问题，并没有其他原因。</p><h2 id="6、Object-Function-Array-Date-RegExp"><a href="#6、Object-Function-Array-Date-RegExp" class="headerlink" title="6、Object,Function,Array,Date,RegExp"></a>6、Object,Function,Array,Date,RegExp</h2><p>这些对象在JS中都属于引用类型, 除Function之外，通过typeof检测其数据类型返回的都是object, 如果要判断对应的具体类型，则可以通过<code>Object.prototype.toString</code>来获取。</p><pre><code>var a = {};var b = new Function();var c = [];var d = new Date();var e = new RegExp();typeof a;  //object  有效Object.prototype.toString.call(a); //[object Object]typeof b;  //function 有效Object.prototype.toString.call(b); //[object Object]typeof c;  //object 无效Object.prototype.toString.call(c);//[object Array]typeof d;  //object 无效Object.prototype.toString.call(d);//[object Date]typeof e;  //object 无效Object.prototype.toString.call(e);//[object RegExp]</code></pre><blockquote><p>另外，ES6中新增了symbol这个类型: typeof Symbol()</p></blockquote><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/20/JS之数据类型详解(1)/">http://jaymo666.github.io/2017/06/20/JS之数据类型详解(1)/</a></p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery 效果 - 动画</title>
      <link href="/2017/06/19/jQuery-%E6%95%88%E6%9E%9C-%E5%8A%A8%E7%94%BB/"/>
      <content type="html"><![CDATA[<p>基础要扎实。对于我来说，虽然学了好多好泛，但却没有学扎实，所以，这是一个复习JQuery动画的一篇文章，很基础。<br><a id="more"></a></p><h2 id="jQuery-效果-隐藏和显示"><a href="#jQuery-效果-隐藏和显示" class="headerlink" title="jQuery 效果 - 隐藏和显示"></a>jQuery 效果 - 隐藏和显示</h2><h4 id="包括隐藏、显示、切换，滑动，淡入淡出，以及动画，哇哦"><a href="#包括隐藏、显示、切换，滑动，淡入淡出，以及动画，哇哦" class="headerlink" title="包括隐藏、显示、切换，滑动，淡入淡出，以及动画，哇哦"></a>包括隐藏、显示、切换，滑动，淡入淡出，以及动画，哇哦</h4><ul><li><p>jQuery hide()</p><p>  $(“#hide”).click(function(){</p><pre><code>$(&quot;p&quot;).hide();</code></pre><p>  });</p></li></ul><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_hide" target="_blank" rel="noopener">演示地址</a></p><ul><li>show()与hide()类似<br>$(“#show”).click(function(){<br>$(“p”).show();<br>});</li></ul><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_hide_explanations" target="_blank" rel="noopener">演示地址</a></p><p>语法：</p><pre><code>$(selector).hide(speed,callback);$(selector).show(speed,callback);</code></pre><blockquote><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称</p></blockquote><ul><li>jQuery toggle()</li></ul><blockquote><p>使用 toggle() 方法来切换 hide() 和 show()</p></blockquote><pre><code>$(&quot;button&quot;).click(function(){  $(&quot;p&quot;).toggle();});</code></pre><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_toggle" target="_blank" rel="noopener">演示地址</a></p><h2 id="jQuery-效果-淡入淡出"><a href="#jQuery-效果-淡入淡出" class="headerlink" title="jQuery 效果 - 淡入淡出"></a>jQuery 效果 - 淡入淡出</h2><ul><li>jQuery fadeIn()</li><li>jQuery fadeOut()</li><li>jQuery fadeToggle()</li><li>jQuery fadeTo()</li></ul><p>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）<br>语法：</p><pre><code>$(selector).fadeTo(speed,opacity,callback);</code></pre><h2 id="jQuery-效果-滑动"><a href="#jQuery-效果-滑动" class="headerlink" title="jQuery 效果 - 滑动"></a>jQuery 效果 - 滑动</h2><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_slide_toggle" target="_blank" rel="noopener">slideToggle() 方法演示</a></p><h2 id="jQuery-animate-动画"><a href="#jQuery-animate-动画" class="headerlink" title="jQuery animate()动画"></a>jQuery animate()动画</h2><blockquote><p>Query animate() 方法用于创建自定义动画。</p></blockquote><p>语法：</p><pre><code>$(selector).animate({params},speed,callback);</code></pre><p>必需的 params 参数定义形成动画的 CSS 属性</p><p>下面的例子演示 animate() 方法的简单应用；它把 <div> 元素移动到左边，直到 left 属性等于 250 像素为止：</div></p><pre><code>$(&quot;button&quot;).click(function(){     $(&quot;div&quot;).animate({left:&apos;250px&apos;});   }); </code></pre><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_animation1" target="_blank" rel="noopener">演示地址</a><br>ps：生成动画的过程中可同时使用多个属性</p><pre><code>$(&quot;button&quot;).click(function(){  $(&quot;div&quot;).animate({    left:&apos;250px&apos;,    opacity:&apos;0.5&apos;,    height:&apos;150px&apos;,    width:&apos;150px&apos;  });}); </code></pre><blockquote><p> 可以用 animate() 方法来操作所有 CSS 属性吗？</p></blockquote><p>是的，几乎可以！不过，需要记住一件重要的事情：当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。</p><p>同时，色彩动画并不包含在核心 jQuery 库中。</p><p>如果需要生成颜色动画，您需要从 jQuery.com 下载 Color Animations 插件。</p><h4 id="jQuery-animate-使用预定义的值"><a href="#jQuery-animate-使用预定义的值" class="headerlink" title="jQuery animate() - 使用预定义的值"></a>jQuery animate() - 使用预定义的值</h4><p>您甚至可以把属性的动画值设置为 “show”、”hide” 或 “toggle”：</p><pre><code>$(&quot;button&quot;).click(function(){  $(&quot;div&quot;).animate({    height:&apos;toggle&apos;  });});</code></pre><h4 id="jQuery-animate-使用队列功能"><a href="#jQuery-animate-使用队列功能" class="headerlink" title="jQuery animate() - 使用队列功能"></a>jQuery animate() - 使用队列功能</h4><p>如果您希望在彼此之后执行不同的动画，那么我们要利用队列功能：</p><pre><code>$(&quot;button&quot;).click(function(){  var div=$(&quot;div&quot;);  div.animate({height:&apos;300px&apos;,opacity:&apos;0.4&apos;},&quot;slow&quot;);  div.animate({width:&apos;300px&apos;,opacity:&apos;0.8&apos;},&quot;slow&quot;);  div.animate({height:&apos;100px&apos;,opacity:&apos;0.4&apos;},&quot;slow&quot;);  div.animate({width:&apos;100px&apos;,opacity:&apos;0.8&apos;},&quot;slow&quot;);});</code></pre><h2 id="jQuery-停止动画"><a href="#jQuery-停止动画" class="headerlink" title="jQuery 停止动画"></a>jQuery 停止动画</h2><h4 id="jQuery-stop-方法用于在动画或效果完成前对它们进行停止。"><a href="#jQuery-stop-方法用于在动画或效果完成前对它们进行停止。" class="headerlink" title="jQuery stop() 方法用于在动画或效果完成前对它们进行停止。"></a>jQuery stop() 方法用于在动画或效果完成前对它们进行停止。</h4><p>jQuery stop() 滑动<br>语法：</p><pre><code>$(selector).stop(stopAll,goToEnd);</code></pre><p>可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即<code>仅停止活动的动画，允许任何排入队列的动画向后执行。</code></p><p>可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。</p><p>因此，默认地，stop() 会清除在被选元素上指定的当前动画。</p><h2 id="jQuery-Callback-函数"><a href="#jQuery-Callback-函数" class="headerlink" title="jQuery Callback 函数"></a>jQuery Callback 函数</h2><blockquote><p>Callback 函数在当前动画 100% 完成之后执行。</p></blockquote><p>由于 JavaScript 语句（指令）是逐一执行的 - 按照次序，动画之后的语句可能会产生错误或页面冲突，因为动画还没有完成。</p><p>为了避免这个情况，您可以以参数的形式添加 Callback 函数。</p><p><strong>典型</strong>的语法：</p><pre><code>$(selector).hide(speed,callback)</code></pre><p><strong>错误</strong>（没有 callback）:</p><pre><code>$(&quot;p&quot;).hide(1000);alert(&quot;The paragraph is now hidden&quot;);</code></pre><h2 id="jQuery-Chaining"><a href="#jQuery-Chaining" class="headerlink" title="jQuery - Chaining"></a>jQuery - Chaining</h2><blockquote><p>通过 jQuery，您可以把动作/方法链接起来。<br>Chaining 允许我们在一条语句中允许多个 jQuery 方法（在相同的元素上）。</p></blockquote><p><strong>例子 1</strong><br>下面的例子把 css(), slideUp(), and slideDown() 链接在一起。”p1” 元素首先会变为红色，然后向上滑动，然后向下滑动：</p><pre><code>$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000);</code></pre><p>这些是jquery的基础动画，jquery真的是一个经典的库！！！</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/jQuery-效果-动画/">http://jaymo666.github.io/2017/06/19/jQuery-效果-动画/</a></p>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> 动画 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery 效果 - 动画</title>
      <link href="/2017/06/19/jQuery-%E6%95%88%E6%9E%9C-%E5%8A%A8%E7%94%BB(1)/"/>
      <content type="html"><![CDATA[<p>基础要扎实。对于我来说，虽然学了好多好泛，但却没有学扎实，所以，这是一个复习JQuery动画的一篇文章，很基础。<br><a id="more"></a></p><h2 id="jQuery-效果-隐藏和显示"><a href="#jQuery-效果-隐藏和显示" class="headerlink" title="jQuery 效果 - 隐藏和显示"></a>jQuery 效果 - 隐藏和显示</h2><h4 id="包括隐藏、显示、切换，滑动，淡入淡出，以及动画，哇哦"><a href="#包括隐藏、显示、切换，滑动，淡入淡出，以及动画，哇哦" class="headerlink" title="包括隐藏、显示、切换，滑动，淡入淡出，以及动画，哇哦"></a>包括隐藏、显示、切换，滑动，淡入淡出，以及动画，哇哦</h4><ul><li><p>jQuery hide()</p><p>  $(“#hide”).click(function(){</p><pre><code>$(&quot;p&quot;).hide();</code></pre><p>  });</p></li></ul><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_hide" target="_blank" rel="noopener">演示地址</a></p><ul><li>show()与hide()类似<br>$(“#show”).click(function(){<br>$(“p”).show();<br>});</li></ul><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_hide_explanations" target="_blank" rel="noopener">演示地址</a></p><p>语法：</p><pre><code>$(selector).hide(speed,callback);$(selector).show(speed,callback);</code></pre><blockquote><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称</p></blockquote><ul><li>jQuery toggle()</li></ul><blockquote><p>使用 toggle() 方法来切换 hide() 和 show()</p></blockquote><pre><code>$(&quot;button&quot;).click(function(){  $(&quot;p&quot;).toggle();});</code></pre><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_toggle" target="_blank" rel="noopener">演示地址</a></p><h2 id="jQuery-效果-淡入淡出"><a href="#jQuery-效果-淡入淡出" class="headerlink" title="jQuery 效果 - 淡入淡出"></a>jQuery 效果 - 淡入淡出</h2><ul><li>jQuery fadeIn()</li><li>jQuery fadeOut()</li><li>jQuery fadeToggle()</li><li>jQuery fadeTo()</li></ul><p>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）<br>语法：</p><pre><code>$(selector).fadeTo(speed,opacity,callback);</code></pre><h2 id="jQuery-效果-滑动"><a href="#jQuery-效果-滑动" class="headerlink" title="jQuery 效果 - 滑动"></a>jQuery 效果 - 滑动</h2><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_slide_toggle" target="_blank" rel="noopener">slideToggle() 方法演示</a></p><h2 id="jQuery-animate-动画"><a href="#jQuery-animate-动画" class="headerlink" title="jQuery animate()动画"></a>jQuery animate()动画</h2><blockquote><p>Query animate() 方法用于创建自定义动画。</p></blockquote><p>语法：</p><pre><code>$(selector).animate({params},speed,callback);</code></pre><p>必需的 params 参数定义形成动画的 CSS 属性</p><p>下面的例子演示 animate() 方法的简单应用；它把 <div> 元素移动到左边，直到 left 属性等于 250 像素为止：</div></p><pre><code>$(&quot;button&quot;).click(function(){     $(&quot;div&quot;).animate({left:&apos;250px&apos;});   }); </code></pre><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_animation1" target="_blank" rel="noopener">演示地址</a><br>ps：生成动画的过程中可同时使用多个属性</p><pre><code>$(&quot;button&quot;).click(function(){  $(&quot;div&quot;).animate({    left:&apos;250px&apos;,    opacity:&apos;0.5&apos;,    height:&apos;150px&apos;,    width:&apos;150px&apos;  });}); </code></pre><blockquote><p> 可以用 animate() 方法来操作所有 CSS 属性吗？</p></blockquote><p>是的，几乎可以！不过，需要记住一件重要的事情：当使用 animate() 时，必须使用 Camel 标记法书写所有的属性名，比如，必须使用 paddingLeft 而不是 padding-left，使用 marginRight 而不是 margin-right，等等。</p><p>同时，色彩动画并不包含在核心 jQuery 库中。</p><p>如果需要生成颜色动画，您需要从 jQuery.com 下载 Color Animations 插件。</p><h4 id="jQuery-animate-使用预定义的值"><a href="#jQuery-animate-使用预定义的值" class="headerlink" title="jQuery animate() - 使用预定义的值"></a>jQuery animate() - 使用预定义的值</h4><p>您甚至可以把属性的动画值设置为 “show”、”hide” 或 “toggle”：</p><pre><code>$(&quot;button&quot;).click(function(){  $(&quot;div&quot;).animate({    height:&apos;toggle&apos;  });});</code></pre><h4 id="jQuery-animate-使用队列功能"><a href="#jQuery-animate-使用队列功能" class="headerlink" title="jQuery animate() - 使用队列功能"></a>jQuery animate() - 使用队列功能</h4><p>如果您希望在彼此之后执行不同的动画，那么我们要利用队列功能：</p><pre><code>$(&quot;button&quot;).click(function(){  var div=$(&quot;div&quot;);  div.animate({height:&apos;300px&apos;,opacity:&apos;0.4&apos;},&quot;slow&quot;);  div.animate({width:&apos;300px&apos;,opacity:&apos;0.8&apos;},&quot;slow&quot;);  div.animate({height:&apos;100px&apos;,opacity:&apos;0.4&apos;},&quot;slow&quot;);  div.animate({width:&apos;100px&apos;,opacity:&apos;0.8&apos;},&quot;slow&quot;);});</code></pre><h2 id="jQuery-停止动画"><a href="#jQuery-停止动画" class="headerlink" title="jQuery 停止动画"></a>jQuery 停止动画</h2><h4 id="jQuery-stop-方法用于在动画或效果完成前对它们进行停止。"><a href="#jQuery-stop-方法用于在动画或效果完成前对它们进行停止。" class="headerlink" title="jQuery stop() 方法用于在动画或效果完成前对它们进行停止。"></a>jQuery stop() 方法用于在动画或效果完成前对它们进行停止。</h4><p>jQuery stop() 滑动<br>语法：</p><pre><code>$(selector).stop(stopAll,goToEnd);</code></pre><p>可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即<code>仅停止活动的动画，允许任何排入队列的动画向后执行。</code></p><p>可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。</p><p>因此，默认地，stop() 会清除在被选元素上指定的当前动画。</p><h2 id="jQuery-Callback-函数"><a href="#jQuery-Callback-函数" class="headerlink" title="jQuery Callback 函数"></a>jQuery Callback 函数</h2><blockquote><p>Callback 函数在当前动画 100% 完成之后执行。</p></blockquote><p>由于 JavaScript 语句（指令）是逐一执行的 - 按照次序，动画之后的语句可能会产生错误或页面冲突，因为动画还没有完成。</p><p>为了避免这个情况，您可以以参数的形式添加 Callback 函数。</p><p><strong>典型</strong>的语法：</p><pre><code>$(selector).hide(speed,callback)</code></pre><p><strong>错误</strong>（没有 callback）:</p><pre><code>$(&quot;p&quot;).hide(1000);alert(&quot;The paragraph is now hidden&quot;);</code></pre><h2 id="jQuery-Chaining"><a href="#jQuery-Chaining" class="headerlink" title="jQuery - Chaining"></a>jQuery - Chaining</h2><blockquote><p>通过 jQuery，您可以把动作/方法链接起来。<br>Chaining 允许我们在一条语句中允许多个 jQuery 方法（在相同的元素上）。</p></blockquote><p><strong>例子 1</strong><br>下面的例子把 css(), slideUp(), and slideDown() 链接在一起。”p1” 元素首先会变为红色，然后向上滑动，然后向下滑动：</p><pre><code>$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000);</code></pre><p>这些是jquery的基础动画，jquery真的是一个经典的库！！！</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/jQuery-效果-动画(1)/">http://jaymo666.github.io/2017/06/19/jQuery-效果-动画(1)/</a></p>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> 动画 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>同步coding教程</title>
      <link href="/2017/06/19/%E5%90%8C%E6%AD%A5%E5%88%B0coding%E6%95%99%E7%A8%8B(1)/"/>
      <content type="html"><![CDATA[<p>coding是国内版的github，这篇文章默认是已经在github上布置好了，写的是现在在coding在布置教程<a id="more"></a></p><h2 id="参考网址："><a href="#参考网址：" class="headerlink" title="参考网址："></a>参考网址：</h2><ul><li><a href="http://www.cnblogs.com/tengj/p/5352572.html" target="_blank" rel="noopener">hexo干货系列：（四）将hexo博客同时托管到github和coding</a></li><li><a href="http://blog.csdn.net/xiaoliuge01/article/details/50997754" target="_blank" rel="noopener">  Hexo搭建独立博客，托管到Github和Coding上教程 </a> </li><li><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt" target="_blank" rel="noopener">YAML 语言教程 - 阮一峰的网络日志</a><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2></li></ul><ol><li>注册<code>coding</code>帐号访问官网注册并登录</li><li>创建仓库,点+创建项目,这里我创建为jaymo<blockquote><p>（仓库名称和用户名一样，推荐；ps：如果你的项目名称跟你coding的用户名一样，jaymo,博客项目名也叫jaymo<br>那直接访问jaymo.coding.me就能访问博客，否则就要带上项目名:jaymo.coding.me/项目名 才能访问<br>推荐项目名跟用户名一样，这样就可以省略项目名了）</p></blockquote></li></ol><ol><li>配置SHH，配置shh key是让本地git项目与远程的github建立联系 ：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>输入cat命令，打开id_rsa.pub文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制ssh到Coding的SSH中（这里直接使用之前部署github时已经生成的公钥）<br>4.打开Git Bash，然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p>输入密码后，如果显示以下内容，则说明coding中的ssh配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure><p>4.创建Coding Pages 服务</p><p>官网点击代码再点击Coding Pages 服务开启。分支和github分支写一样，填写master </p><p>打开根目录中的_config.yml文件，找到如下位置，填写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">      github: git@github.com:yourname/yourname.github.io.git,master</span><br><span class="line">      coding: git@git.coding.net:yourname/yourname.git,master</span><br></pre></td></tr></table></figure><p>5.在根目录中空白处右击打开Git Bash输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s #启动服务，调试用</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure><h2 id="设置自动部署"><a href="#设置自动部署" class="headerlink" title="设置自动部署"></a>设置自动部署</h2><ol><li>找到项目设置那边的WebHook,然后点击新建 Hook</li><li>第一个输入框中是填你的博客域名，然后在后面加上 <code>/_</code>，比如我的<code>http://jaymo.coding.me/_</code></li><li>第二个输入框是输入一个token，我们直接填写<code></code>就可以了。</li></ol><p>未完！！！下一篇将结束自动部署。</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/同步到coding教程(1)/">http://jaymo666.github.io/2017/06/19/同步到coding教程(1)/</a></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>同步coding教程</title>
      <link href="/2017/06/19/%E5%90%8C%E6%AD%A5%E5%88%B0coding%E6%95%99%E7%A8%8B/"/>
      <content type="html"><![CDATA[<p>coding是国内版的github，这篇文章默认是已经在github上布置好了，写的是现在在coding在布置教程<a id="more"></a></p><h2 id="参考网址："><a href="#参考网址：" class="headerlink" title="参考网址："></a>参考网址：</h2><ul><li><a href="http://www.cnblogs.com/tengj/p/5352572.html" target="_blank" rel="noopener">hexo干货系列：（四）将hexo博客同时托管到github和coding</a></li><li><a href="http://blog.csdn.net/xiaoliuge01/article/details/50997754" target="_blank" rel="noopener">  Hexo搭建独立博客，托管到Github和Coding上教程 </a> </li><li><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt" target="_blank" rel="noopener">YAML 语言教程 - 阮一峰的网络日志</a><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2></li></ul><ol><li>注册<code>coding</code>帐号访问官网注册并登录</li><li>创建仓库,点+创建项目,这里我创建为jaymo<blockquote><p>（仓库名称和用户名一样，推荐；ps：如果你的项目名称跟你coding的用户名一样，jaymo,博客项目名也叫jaymo<br>那直接访问jaymo.coding.me就能访问博客，否则就要带上项目名:jaymo.coding.me/项目名 才能访问<br>推荐项目名跟用户名一样，这样就可以省略项目名了）</p></blockquote></li></ol><ol><li>配置SHH，配置shh key是让本地git项目与远程的github建立联系 ：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p>输入cat命令，打开id_rsa.pub文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制ssh到Coding的SSH中（这里直接使用之前部署github时已经生成的公钥）<br>4.打开Git Bash，然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p>输入密码后，如果显示以下内容，则说明coding中的ssh配置成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</span><br><span class="line">provide shell access.</span><br></pre></td></tr></table></figure><p>4.创建Coding Pages 服务</p><p>官网点击代码再点击Coding Pages 服务开启。分支和github分支写一样，填写master </p><p>打开根目录中的_config.yml文件，找到如下位置，填写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">      github: git@github.com:yourname/yourname.github.io.git,master</span><br><span class="line">      coding: git@git.coding.net:yourname/yourname.git,master</span><br></pre></td></tr></table></figure><p>5.在根目录中空白处右击打开Git Bash输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s #启动服务，调试用</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure><h2 id="设置自动部署"><a href="#设置自动部署" class="headerlink" title="设置自动部署"></a>设置自动部署</h2><ol><li>找到项目设置那边的WebHook,然后点击新建 Hook</li><li>第一个输入框中是填你的博客域名，然后在后面加上 <code>/_</code>，比如我的<code>http://jaymo.coding.me/_</code></li><li>第二个输入框是输入一个token，我们直接填写<code></code>就可以了。</li></ol><p>未完！！！下一篇将结束自动部署。</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/同步到coding教程/">http://jaymo666.github.io/2017/06/19/同步到coding教程/</a></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>主题页面设置</title>
      <link href="/2017/06/19/%E4%B8%BB%E9%A2%98%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE(1)/"/>
      <content type="html"><![CDATA[<p>主题页面的简单设置 <a id="more"></a></p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT主题</a></li></ul><ol><li>下载主题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ol><li>启用主题：<br>启用了<code>Pisces</code> - 双栏 Scheme，小家碧玉似的清新<br>在\themes\next文件夹中找到站点配置文件<code>_config.yml</code>文件，选择 <code>Scheme</code>，去掉scheme前面注释<code>#</code>，如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><h2 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h2><p>编辑<code>_config.yml</code>，配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><h2 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  #about: /about</span><br><span class="line">  #categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure><p><img src="/2017/06/19/主题页面设置(1)/C:/Users\可汗金斯\Desktop\menu.PNG" alt="menu"></p><h4 id="设置菜单项的显示文本"><a href="#设置菜单项的显示文本" class="headerlink" title="设置菜单项的显示文本"></a>设置菜单项的显示文本</h4><p>在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的<code>languages/{language}.yml</code> （{language} 为你所使用的语言）。<br>以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在<code>menu</code> 字段下添加一项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  something: 有料</span><br></pre></td></tr></table></figure><h4 id="设定菜单项的图标"><a href="#设定菜单项的图标" class="headerlink" title="设定菜单项的图标"></a>设定菜单项的图标</h4><p>对应的字段是 <code>menu_icons</code>。 此设定格式是<code>item name: icon name</code>，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mapping.</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure><h2 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h2><p>放置在了 <code>source/images/</code> 目录下 ,如下：<br><img src="/2017/06/19/主题页面设置(1)/C:/Users\可汗金斯\Desktop\avatar.PNG" alt="头像路径"></p><h2 id="集成常用的第三方服务"><a href="#集成常用的第三方服务" class="headerlink" title="集成常用的第三方服务"></a>集成常用的第三方服务</h2><h4 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h4><ol><li>登录 百度统计， 定位到站点的代码获取页面</li><li>复制 hm.js? 后面那串统计脚本 id</li><li>编辑 主题配置文件， 修改字段 baidu_analytics 字段，值设置成你的百度统计脚本 id。<br>所以，页面已经设置了百度统计<h5 id="阅读次数统计"><a href="#阅读次数统计" class="headerlink" title="阅读次数统计"></a>阅读次数统计</h5>以按照 <a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a>，注册了<a href="hhttps://leancloud.cn" target="_blank" rel="noopener">https://leancloud.cn</a><br>如图：<br><img src="/2017/06/19/主题页面设置(1)/C:/Users\可汗金斯\Desktop\1.PNG" alt="leancloud"><br>创建了JayMo个人博客应用，创建了名称为<code>Counter</code>的Class,复制AppID以及AppKey并在NexT主题的_config.yml文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span><br><span class="line">  app_key: E9UJsJpw1omCHuS22PdSpKoh</span><br></pre></td></tr></table></figure><h5 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h5><p>以设置只能通过：<a href="https://jaymo666.github.io/">jaymo666.github.io/</a>或<a href="http://jaymo.cf/" target="_blank" rel="noopener">jaymo.cf/</a>来访问,确保数据调用的安全。</p><h2 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h2><h5 id="配置了百度分享"><a href="#配置了百度分享" class="headerlink" title="配置了百度分享"></a>配置了百度分享</h5><h2 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h2><h5 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h5><p>添加百度/谷歌/本地 自定义站点内容搜索</p><ol><li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>2.编辑 <code>站点配置</code>文件，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h2 id="评论服务"><a href="#评论服务" class="headerlink" title="评论服务"></a>评论服务</h2><p>注册了Disqus，配置了评论</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/主题页面设置(1)/">http://jaymo666.github.io/2017/06/19/主题页面设置(1)/</a></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>主题页面设置</title>
      <link href="/2017/06/19/%E4%B8%BB%E9%A2%98%E9%A1%B5%E9%9D%A2%E8%AE%BE%E7%BD%AE/"/>
      <content type="html"><![CDATA[<p>主题页面的简单设置 <a id="more"></a></p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT主题</a></li></ul><ol><li>下载主题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ol><li>启用主题：<br>启用了<code>Pisces</code> - 双栏 Scheme，小家碧玉似的清新<br>在\themes\next文件夹中找到站点配置文件<code>_config.yml</code>文件，选择 <code>Scheme</code>，去掉scheme前面注释<code>#</code>，如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><h2 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h2><p>编辑<code>_config.yml</code>，配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><h2 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  #about: /about</span><br><span class="line">  #categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure><p><img src="/2017/06/19/主题页面设置/C:/Users\可汗金斯\Desktop\menu.PNG" alt="menu"></p><h4 id="设置菜单项的显示文本"><a href="#设置菜单项的显示文本" class="headerlink" title="设置菜单项的显示文本"></a>设置菜单项的显示文本</h4><p>在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的<code>languages/{language}.yml</code> （{language} 为你所使用的语言）。<br>以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在<code>menu</code> 字段下添加一项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  something: 有料</span><br></pre></td></tr></table></figure><h4 id="设定菜单项的图标"><a href="#设定菜单项的图标" class="headerlink" title="设定菜单项的图标"></a>设定菜单项的图标</h4><p>对应的字段是 <code>menu_icons</code>。 此设定格式是<code>item name: icon name</code>，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mapping.</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure><h2 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h2><p>放置在了 <code>source/images/</code> 目录下 ,如下：<br><img src="/2017/06/19/主题页面设置/C:/Users\可汗金斯\Desktop\avatar.PNG" alt="头像路径"></p><h2 id="集成常用的第三方服务"><a href="#集成常用的第三方服务" class="headerlink" title="集成常用的第三方服务"></a>集成常用的第三方服务</h2><h4 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h4><ol><li>登录 百度统计， 定位到站点的代码获取页面</li><li>复制 hm.js? 后面那串统计脚本 id</li><li>编辑 主题配置文件， 修改字段 baidu_analytics 字段，值设置成你的百度统计脚本 id。<br>所以，页面已经设置了百度统计<h5 id="阅读次数统计"><a href="#阅读次数统计" class="headerlink" title="阅读次数统计"></a>阅读次数统计</h5>以按照 <a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a>，注册了<a href="hhttps://leancloud.cn" target="_blank" rel="noopener">https://leancloud.cn</a><br>如图：<br><img src="/2017/06/19/主题页面设置/C:/Users\可汗金斯\Desktop\1.PNG" alt="leancloud"><br>创建了JayMo个人博客应用，创建了名称为<code>Counter</code>的Class,复制AppID以及AppKey并在NexT主题的_config.yml文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span><br><span class="line">  app_key: E9UJsJpw1omCHuS22PdSpKoh</span><br></pre></td></tr></table></figure><h5 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h5><p>以设置只能通过：<a href="https://jaymo666.github.io/">jaymo666.github.io/</a>或<a href="http://jaymo.cf/" target="_blank" rel="noopener">jaymo.cf/</a>来访问,确保数据调用的安全。</p><h2 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h2><h5 id="配置了百度分享"><a href="#配置了百度分享" class="headerlink" title="配置了百度分享"></a>配置了百度分享</h5><h2 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h2><h5 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h5><p>添加百度/谷歌/本地 自定义站点内容搜索</p><ol><li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>2.编辑 <code>站点配置</code>文件，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h2 id="评论服务"><a href="#评论服务" class="headerlink" title="评论服务"></a>评论服务</h2><p>注册了Disqus，配置了评论</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/主题页面设置/">http://jaymo666.github.io/2017/06/19/主题页面设置/</a></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客搭建及使用</title>
      <link href="/2017/06/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8(1)/"/>
      <content type="html"><![CDATA[<p>博客搭建及使用<a id="more"></a></p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="http://www.cnblogs.com/MuYunyun/p/5927491.html#_label4" target="_blank" rel="noopener">基于hexo+github搭建一个独立博客</a></li><li><a href="http://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#undefined" target="_blank" rel="noopener">主题：Anisina 中文使用教程</a></li><li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">手把手教你用Hexo+Github 搭建属于自己的博客</a></li><li><a href="http://www.jianshu.com/p/b06222fbc135" target="_blank" rel="noopener">用Hexo创建个人博客</a></li></ul><h2 id="用Hexo创建个人博客步骤"><a href="#用Hexo创建个人博客步骤" class="headerlink" title="用Hexo创建个人博客步骤"></a>用Hexo创建个人博客步骤</h2><ol><li>搭建环境准备（包括node.js和git环境，gitHub账户的配置）</li><li>安装Hexo</li><li>配置Hexo</li><li>怎样将Hexo与github page 联系起来</li><li>怎样发布文章</li><li>主题 推荐</li><li>主题Net的简单配置</li><li>添加sitemap和feed插件</li><li>添加404 公益页面</li></ol><p>在搭建中我使用的不是推荐的Net主题，而是Anisina</p><blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p></blockquote><p>比如我的电脑下的 F:\JayMo666 目录下的成为 站点配置文件，F:\JayMo66\themes\Anisina 目录下的成为主题配置文件。具体如何配置详细看上面的网站：<a href="http://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#undefined" target="_blank" rel="noopener">主题：Anisina 中文使用教程</a></p><h2 id="创建博客步骤："><a href="#创建博客步骤：" class="headerlink" title="创建博客步骤："></a>创建博客步骤：</h2><p>在<br>1.Run server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ol><li><strong>F:\JayMo666</strong>启动命令行执行下面命令：<br>3.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;文章标题&quot;</span><br></pre></td></tr></table></figure></li></ol><p>这时候在我的 电脑的目录下 <strong>F:\JayMo666\source\ _posts</strong> 将会看到文章标题.md 文件</p><p>4.用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g #在部署前先生成</span><br></pre></td></tr></table></figure><p>其中g代表 generate（md文件生成html文件）  d 代表deploy(配置)</p><p>这样个人博客基本就ok了，剩下的就是完善了</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/博客搭建及使用(1)/">http://jaymo666.github.io/2017/06/19/博客搭建及使用(1)/</a></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客搭建及使用</title>
      <link href="/2017/06/19/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<p>博客搭建及使用<a id="more"></a></p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="http://www.cnblogs.com/MuYunyun/p/5927491.html#_label4" target="_blank" rel="noopener">基于hexo+github搭建一个独立博客</a></li><li><a href="http://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#undefined" target="_blank" rel="noopener">主题：Anisina 中文使用教程</a></li><li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">手把手教你用Hexo+Github 搭建属于自己的博客</a></li><li><a href="http://www.jianshu.com/p/b06222fbc135" target="_blank" rel="noopener">用Hexo创建个人博客</a></li></ul><h2 id="用Hexo创建个人博客步骤"><a href="#用Hexo创建个人博客步骤" class="headerlink" title="用Hexo创建个人博客步骤"></a>用Hexo创建个人博客步骤</h2><ol><li>搭建环境准备（包括node.js和git环境，gitHub账户的配置）</li><li>安装Hexo</li><li>配置Hexo</li><li>怎样将Hexo与github page 联系起来</li><li>怎样发布文章</li><li>主题 推荐</li><li>主题Net的简单配置</li><li>添加sitemap和feed插件</li><li>添加404 公益页面</li></ol><p>在搭建中我使用的不是推荐的Net主题，而是Anisina</p><blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p></blockquote><p>比如我的电脑下的 F:\JayMo666 目录下的成为 站点配置文件，F:\JayMo66\themes\Anisina 目录下的成为主题配置文件。具体如何配置详细看上面的网站：<a href="http://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#undefined" target="_blank" rel="noopener">主题：Anisina 中文使用教程</a></p><h2 id="创建博客步骤："><a href="#创建博客步骤：" class="headerlink" title="创建博客步骤："></a>创建博客步骤：</h2><p>在<br>1.Run server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ol><li><strong>F:\JayMo666</strong>启动命令行执行下面命令：<br>3.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;文章标题&quot;</span><br></pre></td></tr></table></figure></li></ol><p>这时候在我的 电脑的目录下 <strong>F:\JayMo666\source\ _posts</strong> 将会看到文章标题.md 文件</p><p>4.用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g #在部署前先生成</span><br></pre></td></tr></table></figure><p>其中g代表 generate（md文件生成html文件）  d 代表deploy(配置)</p><p>这样个人博客基本就ok了，剩下的就是完善了</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/博客搭建及使用/">http://jaymo666.github.io/2017/06/19/博客搭建及使用/</a></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>next-主题配置教程</title>
      <link href="/2017/06/19/next-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B(1)/"/>
      <content type="html"><![CDATA[<p>next-主题页面设置。使用了next，next在众多主题中评分最高，使用了几个主题后，发现它确实好用，PS：hexo很方便更换主题，赞 <a id="more"></a></p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT主题</a></li></ul><ol><li>下载主题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ol><li>启用主题：<br>启用了<code>Pisces</code> - 双栏 Scheme，小家碧玉似的清新<br>在\themes\next文件夹中找到站点配置文件<code>_config.yml</code>文件，选择 <code>Scheme</code>，去掉scheme前面注释<code>#</code>，如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><h2 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h2><p>编辑<code>_config.yml</code>，配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><h2 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  #about: /about</span><br><span class="line">  #categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure><p><img src="/2017/06/19/next-主题配置教程(1)/C:/Users\可汗金斯\Desktop\menu.PNG" alt="menu"></p><h4 id="设置菜单项的显示文本"><a href="#设置菜单项的显示文本" class="headerlink" title="设置菜单项的显示文本"></a>设置菜单项的显示文本</h4><p>在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的<code>languages/{language}.yml</code> （{language} 为你所使用的语言）。<br>以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在<code>menu</code> 字段下添加一项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  something: 有料</span><br></pre></td></tr></table></figure><h4 id="设定菜单项的图标"><a href="#设定菜单项的图标" class="headerlink" title="设定菜单项的图标"></a>设定菜单项的图标</h4><p>对应的字段是 <code>menu_icons</code>。 此设定格式是<code>item name: icon name</code>，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mapping.</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure><h2 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h2><p>放置在了 <code>source/images/</code> 目录下 ,如下：<br><img src="/2017/06/19/next-主题配置教程(1)/C:/Users\可汗金斯\Desktop\avatar.PNG" alt="头像路径"></p><h2 id="集成常用的第三方服务"><a href="#集成常用的第三方服务" class="headerlink" title="集成常用的第三方服务"></a>集成常用的第三方服务</h2><h4 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h4><ol><li>登录 百度统计， 定位到站点的代码获取页面</li><li>复制 hm.js? 后面那串统计脚本 id</li><li>编辑 主题配置文件， 修改字段 baidu_analytics 字段，值设置成你的百度统计脚本 id。<br>所以，页面已经设置了百度统计<h5 id="阅读次数统计"><a href="#阅读次数统计" class="headerlink" title="阅读次数统计"></a>阅读次数统计</h5>以按照 <a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a>，注册了<a href="hhttps://leancloud.cn" target="_blank" rel="noopener">https://leancloud.cn</a><br>如图：<br><img src="/2017/06/19/next-主题配置教程(1)/C:/Users\可汗金斯\Desktop\1.PNG" alt="leancloud"><br>创建了JayMo个人博客应用，创建了名称为<code>Counter</code>的Class,复制AppID以及AppKey并在NexT主题的_config.yml文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span><br><span class="line">  app_key: E9UJsJpw1omCHuS22PdSpKoh</span><br></pre></td></tr></table></figure><h5 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h5><p>以设置只能通过：<a href="https://jaymo666.github.io/">jaymo666.github.io/</a>或<a href="http://jaymo.cf/" target="_blank" rel="noopener">jaymo.cf/</a>来访问,确保数据调用的安全。</p><h2 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h2><h5 id="配置了百度分享"><a href="#配置了百度分享" class="headerlink" title="配置了百度分享"></a>配置了百度分享</h5><h2 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h2><h5 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h5><p>添加百度/谷歌/本地 自定义站点内容搜索</p><ol><li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>2.编辑 <code>站点配置</code>文件，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h2 id="评论服务"><a href="#评论服务" class="headerlink" title="评论服务"></a>评论服务</h2><p>注册了Disqus，配置了评论</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/next-主题配置教程(1)/">http://jaymo666.github.io/2017/06/19/next-主题配置教程(1)/</a></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>next-主题配置教程</title>
      <link href="/2017/06/19/next-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <content type="html"><![CDATA[<p>next-主题页面设置。使用了next，next在众多主题中评分最高，使用了几个主题后，发现它确实好用，PS：hexo很方便更换主题，赞 <a id="more"></a></p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT主题</a></li></ul><ol><li>下载主题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ol><li>启用主题：<br>启用了<code>Pisces</code> - 双栏 Scheme，小家碧玉似的清新<br>在\themes\next文件夹中找到站点配置文件<code>_config.yml</code>文件，选择 <code>Scheme</code>，去掉scheme前面注释<code>#</code>，如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><h2 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h2><p>编辑<code>_config.yml</code>，配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><h2 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  #about: /about</span><br><span class="line">  #categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure><p><img src="/2017/06/19/next-主题配置教程/C:/Users\可汗金斯\Desktop\menu.PNG" alt="menu"></p><h4 id="设置菜单项的显示文本"><a href="#设置菜单项的显示文本" class="headerlink" title="设置菜单项的显示文本"></a>设置菜单项的显示文本</h4><p>在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的<code>languages/{language}.yml</code> （{language} 为你所使用的语言）。<br>以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 <code>languages/zh-Hans.yml</code>，在<code>menu</code> 字段下添加一项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  something: 有料</span><br></pre></td></tr></table></figure><h4 id="设定菜单项的图标"><a href="#设定菜单项的图标" class="headerlink" title="设定菜单项的图标"></a>设定菜单项的图标</h4><p>对应的字段是 <code>menu_icons</code>。 此设定格式是<code>item name: icon name</code>，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mapping.</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure><h2 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h2><p>放置在了 <code>source/images/</code> 目录下 ,如下：<br><img src="/2017/06/19/next-主题配置教程/C:/Users\可汗金斯\Desktop\avatar.PNG" alt="头像路径"></p><h2 id="集成常用的第三方服务"><a href="#集成常用的第三方服务" class="headerlink" title="集成常用的第三方服务"></a>集成常用的第三方服务</h2><h4 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h4><ol><li>登录 百度统计， 定位到站点的代码获取页面</li><li>复制 hm.js? 后面那串统计脚本 id</li><li>编辑 主题配置文件， 修改字段 baidu_analytics 字段，值设置成你的百度统计脚本 id。<br>所以，页面已经设置了百度统计<h5 id="阅读次数统计"><a href="#阅读次数统计" class="headerlink" title="阅读次数统计"></a>阅读次数统计</h5>以按照 <a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a>，注册了<a href="hhttps://leancloud.cn" target="_blank" rel="noopener">https://leancloud.cn</a><br>如图：<br><img src="/2017/06/19/next-主题配置教程/C:/Users\可汗金斯\Desktop\1.PNG" alt="leancloud"><br>创建了JayMo个人博客应用，创建了名称为<code>Counter</code>的Class,复制AppID以及AppKey并在NexT主题的_config.yml文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span><br><span class="line">  app_key: E9UJsJpw1omCHuS22PdSpKoh</span><br></pre></td></tr></table></figure><h5 id="Web安全"><a href="#Web安全" class="headerlink" title="Web安全"></a>Web安全</h5><p>以设置只能通过：<a href="https://jaymo666.github.io/">jaymo666.github.io/</a>或<a href="http://jaymo.cf/" target="_blank" rel="noopener">jaymo.cf/</a>来访问,确保数据调用的安全。</p><h2 id="数据统计与分析"><a href="#数据统计与分析" class="headerlink" title="数据统计与分析"></a>数据统计与分析</h2><h5 id="配置了百度分享"><a href="#配置了百度分享" class="headerlink" title="配置了百度分享"></a>配置了百度分享</h5><h2 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h2><h5 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h5><p>添加百度/谷歌/本地 自定义站点内容搜索</p><ol><li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>2.编辑 <code>站点配置</code>文件，新增以下内容到任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><h2 id="评论服务"><a href="#评论服务" class="headerlink" title="评论服务"></a>评论服务</h2><p>注册了Disqus，配置了评论</p><hr><p>本作品采用 <a href="https://creativecommons.org/licenses/by-sa/2.5/cn/" target="_blank" rel="noopener">知识共享署名 2.5 中国大陆许可协议 </a>进行许可，欢迎转载，但转载请注明来自<a href="https://jaymo666.github.io/">JayMo</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。<br>本文永久链接：<a href="http://jaymo666.github.io/2017/06/19/next-主题配置教程/">http://jaymo666.github.io/2017/06/19/next-主题配置教程/</a></p>]]></content>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
